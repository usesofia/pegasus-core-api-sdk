/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.12.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BankAccountDto,
  BankAccountTypeEntity,
  BankAccountsPageDto,
  CreateBankAccountRequestBodyDto,
  ExceptionResponseEntity,
  PartialUpdateBankAccountRequestBodyDto,
  RemoveBankAccountRequestBodyDto,
} from '../models/index';
import {
    BankAccountDtoFromJSON,
    BankAccountDtoToJSON,
    BankAccountTypeEntityFromJSON,
    BankAccountTypeEntityToJSON,
    BankAccountsPageDtoFromJSON,
    BankAccountsPageDtoToJSON,
    CreateBankAccountRequestBodyDtoFromJSON,
    CreateBankAccountRequestBodyDtoToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    PartialUpdateBankAccountRequestBodyDtoFromJSON,
    PartialUpdateBankAccountRequestBodyDtoToJSON,
    RemoveBankAccountRequestBodyDtoFromJSON,
    RemoveBankAccountRequestBodyDtoToJSON,
} from '../models/index';

export interface CreateBankAccountRequest {
    createBankAccountRequestBodyDto: CreateBankAccountRequestBodyDto;
    populate?: string;
}

export interface FindAllBankAccountsRequest {
    sortOrder?: string;
    sortBy?: string;
    populate?: string;
    providerAccountId?: string;
    provider?: string;
    active?: boolean;
    ids?: Array<string>;
    isDefault?: boolean;
    isAutomatic?: boolean;
    type?: string;
    semanticSearchTermInBase64?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface FindAllByPluggyItemRequest {
    itemId: string;
    populate?: string;
}

export interface FindByIdBankAccountRequest {
    id: string;
    populate?: string;
}

export interface PartialUpdateBankAccountRequest {
    id: string;
    partialUpdateBankAccountRequestBodyDto: PartialUpdateBankAccountRequestBodyDto;
    populate?: string;
}

export interface RemoveBankAccountRequest {
    id: string;
    removeBankAccountRequestBodyDto: RemoveBankAccountRequestBodyDto;
}

export interface SystemFindAllBankAccountsRequest {
    ownerOrganizationId: string;
    readPreference?: SystemFindAllBankAccountsReadPreferenceEnum;
    sortOrder?: string;
    sortBy?: string;
    populate?: string;
    providerAccountId?: string;
    provider?: string;
    active?: boolean;
    isDefault?: boolean;
    isAutomatic?: boolean;
    type?: string;
    semanticSearchTermInBase64?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface SystemFindByIdBankAccountRequest {
    id: string;
    populate?: string;
}

/**
 * BankAccountsApi - interface
 * 
 * @export
 * @interface BankAccountsApiInterface
 */
export interface BankAccountsApiInterface {
    /**
     * 
     * @summary Cria uma nova conta bancária.
     * @param {CreateBankAccountRequestBodyDto} createBankAccountRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    createBankAccountRaw(requestParameters: CreateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>>;

    /**
     * Cria uma nova conta bancária.
     */
    createBankAccount(requestParameters: CreateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto>;

    /**
     * 
     * @summary Busca todos os tipos de conta bancária.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    findAllBankAccountTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BankAccountTypeEntity>>>;

    /**
     * Busca todos os tipos de conta bancária.
     */
    findAllBankAccountTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BankAccountTypeEntity>>;

    /**
     * 
     * @summary Busca todas as contas bancárias.
     * @param {string} [sortOrder] Ordem de ordenação das contas bancárias.
     * @param {string} [sortBy] Campo para ordenação das contas bancárias.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [providerAccountId] Identificador da conta bancária no fornecedor.
     * @param {string} [provider] Fornecedor da conta bancária.
     * @param {boolean} [active] Indica se a conta está ativa.
     * @param {Array<string>} [ids] Identificadores das contas bancárias a serem buscadas.
     * @param {boolean} [isDefault] Indica se a conta é a padrão.
     * @param {boolean} [isAutomatic] Indica se a conta é automática ou manual.
     * @param {string} [type] Tipo de conta bancária a ser buscada.
     * @param {string} [semanticSearchTermInBase64] Termo para busca semântica da conta bancária em base64.
     * @param {string} [textSearchTerm] Termo para busca textual da conta bancária.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    findAllBankAccountsRaw(requestParameters: FindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountsPageDto>>;

    /**
     * Busca todas as contas bancárias.
     */
    findAllBankAccounts(requestParameters: FindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountsPageDto>;

    /**
     * 
     * @summary Busca contas bancárias pelo identificador do item do Pluggy.
     * @param {string} itemId Identificador do item de conexão do Pluggy.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    findAllByPluggyItemRaw(requestParameters: FindAllByPluggyItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BankAccountDto>>>;

    /**
     * Busca contas bancárias pelo identificador do item do Pluggy.
     */
    findAllByPluggyItem(requestParameters: FindAllByPluggyItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BankAccountDto>>;

    /**
     * 
     * @summary Busca uma conta bancária pelo identificador.
     * @param {string} id Identificador da conta bancária.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    findByIdBankAccountRaw(requestParameters: FindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>>;

    /**
     * Busca uma conta bancária pelo identificador.
     */
    findByIdBankAccount(requestParameters: FindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto>;

    /**
     * 
     * @summary Atualiza parcialmente uma conta bancária.
     * @param {string} id Identificador da conta bancária.
     * @param {PartialUpdateBankAccountRequestBodyDto} partialUpdateBankAccountRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    partialUpdateBankAccountRaw(requestParameters: PartialUpdateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>>;

    /**
     * Atualiza parcialmente uma conta bancária.
     */
    partialUpdateBankAccount(requestParameters: PartialUpdateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto>;

    /**
     * 
     * @summary Remove uma conta bancária.
     * @param {string} id Identificador da conta bancária.
     * @param {RemoveBankAccountRequestBodyDto} removeBankAccountRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    removeBankAccountRaw(requestParameters: RemoveBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove uma conta bancária.
     */
    removeBankAccount(requestParameters: RemoveBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Busca todas as contas bancárias.
     * @param {string} ownerOrganizationId Identificador da organização proprietária das contas bancárias.
     * @param {'primary' | 'primaryPreferred' | 'secondary' | 'secondaryPreferred' | 'nearest'} [readPreference] Preferência de leitura das contas bancárias.
     * @param {string} [sortOrder] Ordem de ordenação das contas bancárias.
     * @param {string} [sortBy] Campo para ordenação das contas bancárias.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [providerAccountId] Identificador da conta bancária no fornecedor.
     * @param {string} [provider] Fornecedor da conta bancária.
     * @param {boolean} [active] Indica se a conta está ativa.
     * @param {boolean} [isDefault] Indica se a conta é a padrão.
     * @param {boolean} [isAutomatic] Indica se a conta é automática ou manual.
     * @param {string} [type] Tipo de conta bancária a ser buscada.
     * @param {string} [semanticSearchTermInBase64] Termo para busca semântica da conta bancária em base64.
     * @param {string} [textSearchTerm] Termo para busca textual da conta bancária.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    systemFindAllBankAccountsRaw(requestParameters: SystemFindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountsPageDto>>;

    /**
     * Busca todas as contas bancárias.
     */
    systemFindAllBankAccounts(requestParameters: SystemFindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountsPageDto>;

    /**
     * 
     * @summary Busca uma conta bancária pelo identificador.
     * @param {string} id Identificador da conta bancária.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    systemFindByIdBankAccountRaw(requestParameters: SystemFindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>>;

    /**
     * Busca uma conta bancária pelo identificador.
     */
    systemFindByIdBankAccount(requestParameters: SystemFindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto>;

}

/**
 * 
 */
export class BankAccountsApi extends runtime.BaseAPI implements BankAccountsApiInterface {

    /**
     * Cria uma nova conta bancária.
     */
    async createBankAccountRaw(requestParameters: CreateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>> {
        if (requestParameters['createBankAccountRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createBankAccountRequestBodyDto',
                'Required parameter "createBankAccountRequestBodyDto" was null or undefined when calling createBankAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/bank-accounts`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBankAccountRequestBodyDtoToJSON(requestParameters['createBankAccountRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankAccountDtoFromJSON(jsonValue));
    }

    /**
     * Cria uma nova conta bancária.
     */
    async createBankAccount(requestParameters: CreateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto> {
        const response = await this.createBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todos os tipos de conta bancária.
     */
    async findAllBankAccountTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BankAccountTypeEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/bank-accounts/types`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BankAccountTypeEntityFromJSON));
    }

    /**
     * Busca todos os tipos de conta bancária.
     */
    async findAllBankAccountTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BankAccountTypeEntity>> {
        const response = await this.findAllBankAccountTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Busca todas as contas bancárias.
     */
    async findAllBankAccountsRaw(requestParameters: FindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountsPageDto>> {
        const queryParameters: any = {};

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['providerAccountId'] != null) {
            queryParameters['providerAccountId'] = requestParameters['providerAccountId'];
        }

        if (requestParameters['provider'] != null) {
            queryParameters['provider'] = requestParameters['provider'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['isDefault'] != null) {
            queryParameters['isDefault'] = requestParameters['isDefault'];
        }

        if (requestParameters['isAutomatic'] != null) {
            queryParameters['isAutomatic'] = requestParameters['isAutomatic'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['semanticSearchTermInBase64'] != null) {
            queryParameters['semanticSearchTermInBase64'] = requestParameters['semanticSearchTermInBase64'];
        }

        if (requestParameters['textSearchTerm'] != null) {
            queryParameters['textSearchTerm'] = requestParameters['textSearchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/bank-accounts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankAccountsPageDtoFromJSON(jsonValue));
    }

    /**
     * Busca todas as contas bancárias.
     */
    async findAllBankAccounts(requestParameters: FindAllBankAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountsPageDto> {
        const response = await this.findAllBankAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca contas bancárias pelo identificador do item do Pluggy.
     */
    async findAllByPluggyItemRaw(requestParameters: FindAllByPluggyItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BankAccountDto>>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling findAllByPluggyItem().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/bank-accounts/pluggy/{itemId}`;
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BankAccountDtoFromJSON));
    }

    /**
     * Busca contas bancárias pelo identificador do item do Pluggy.
     */
    async findAllByPluggyItem(requestParameters: FindAllByPluggyItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BankAccountDto>> {
        const response = await this.findAllByPluggyItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca uma conta bancária pelo identificador.
     */
    async findByIdBankAccountRaw(requestParameters: FindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findByIdBankAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/bank-accounts/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankAccountDtoFromJSON(jsonValue));
    }

    /**
     * Busca uma conta bancária pelo identificador.
     */
    async findByIdBankAccount(requestParameters: FindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto> {
        const response = await this.findByIdBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Atualiza parcialmente uma conta bancária.
     */
    async partialUpdateBankAccountRaw(requestParameters: PartialUpdateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling partialUpdateBankAccount().'
            );
        }

        if (requestParameters['partialUpdateBankAccountRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'partialUpdateBankAccountRequestBodyDto',
                'Required parameter "partialUpdateBankAccountRequestBodyDto" was null or undefined when calling partialUpdateBankAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/bank-accounts/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PartialUpdateBankAccountRequestBodyDtoToJSON(requestParameters['partialUpdateBankAccountRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankAccountDtoFromJSON(jsonValue));
    }

    /**
     * Atualiza parcialmente uma conta bancária.
     */
    async partialUpdateBankAccount(requestParameters: PartialUpdateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto> {
        const response = await this.partialUpdateBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove uma conta bancária.
     */
    async removeBankAccountRaw(requestParameters: RemoveBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeBankAccount().'
            );
        }

        if (requestParameters['removeBankAccountRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'removeBankAccountRequestBodyDto',
                'Required parameter "removeBankAccountRequestBodyDto" was null or undefined when calling removeBankAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/bank-accounts/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveBankAccountRequestBodyDtoToJSON(requestParameters['removeBankAccountRequestBodyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove uma conta bancária.
     */
    async removeBankAccount(requestParameters: RemoveBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeBankAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Busca todas as contas bancárias.
     */
    async systemFindAllBankAccountsRaw(requestParameters: SystemFindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountsPageDto>> {
        if (requestParameters['ownerOrganizationId'] == null) {
            throw new runtime.RequiredError(
                'ownerOrganizationId',
                'Required parameter "ownerOrganizationId" was null or undefined when calling systemFindAllBankAccounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['readPreference'] != null) {
            queryParameters['readPreference'] = requestParameters['readPreference'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['ownerOrganizationId'] != null) {
            queryParameters['ownerOrganizationId'] = requestParameters['ownerOrganizationId'];
        }

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['providerAccountId'] != null) {
            queryParameters['providerAccountId'] = requestParameters['providerAccountId'];
        }

        if (requestParameters['provider'] != null) {
            queryParameters['provider'] = requestParameters['provider'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['isDefault'] != null) {
            queryParameters['isDefault'] = requestParameters['isDefault'];
        }

        if (requestParameters['isAutomatic'] != null) {
            queryParameters['isAutomatic'] = requestParameters['isAutomatic'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['semanticSearchTermInBase64'] != null) {
            queryParameters['semanticSearchTermInBase64'] = requestParameters['semanticSearchTermInBase64'];
        }

        if (requestParameters['textSearchTerm'] != null) {
            queryParameters['textSearchTerm'] = requestParameters['textSearchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/bank-accounts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankAccountsPageDtoFromJSON(jsonValue));
    }

    /**
     * Busca todas as contas bancárias.
     */
    async systemFindAllBankAccounts(requestParameters: SystemFindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountsPageDto> {
        const response = await this.systemFindAllBankAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca uma conta bancária pelo identificador.
     */
    async systemFindByIdBankAccountRaw(requestParameters: SystemFindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling systemFindByIdBankAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/bank-accounts/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankAccountDtoFromJSON(jsonValue));
    }

    /**
     * Busca uma conta bancária pelo identificador.
     */
    async systemFindByIdBankAccount(requestParameters: SystemFindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto> {
        const response = await this.systemFindByIdBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SystemFindAllBankAccountsReadPreferenceEnum = {
    Primary: 'primary',
    PrimaryPreferred: 'primaryPreferred',
    Secondary: 'secondary',
    SecondaryPreferred: 'secondaryPreferred',
    Nearest: 'nearest'
} as const;
export type SystemFindAllBankAccountsReadPreferenceEnum = typeof SystemFindAllBankAccountsReadPreferenceEnum[keyof typeof SystemFindAllBankAccountsReadPreferenceEnum];
