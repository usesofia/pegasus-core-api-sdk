/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTagRequestBodyDto,
  ExceptionResponseEntity,
  PartialUpdateTagRequestBodyDto,
  RemoveTagRequestBodyDto,
  TagEntity,
  TagsPageEntity,
} from '../models/index';
import {
    CreateTagRequestBodyDtoFromJSON,
    CreateTagRequestBodyDtoToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    PartialUpdateTagRequestBodyDtoFromJSON,
    PartialUpdateTagRequestBodyDtoToJSON,
    RemoveTagRequestBodyDtoFromJSON,
    RemoveTagRequestBodyDtoToJSON,
    TagEntityFromJSON,
    TagEntityToJSON,
    TagsPageEntityFromJSON,
    TagsPageEntityToJSON,
} from '../models/index';

export interface CreateTagRequest {
    createTagRequestBodyDto: CreateTagRequestBodyDto;
    populate?: string;
}

export interface FindAllTagsRequest {
    populate?: string;
    sortOrder?: string;
    sortBy?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface FindByIdTagRequest {
    id: string;
    populate?: string;
}

export interface PartialUpdateTagRequest {
    id: string;
    partialUpdateTagRequestBodyDto: PartialUpdateTagRequestBodyDto;
    populate?: string;
}

export interface RemoveTagRequest {
    id: string;
    removeTagRequestBodyDto: RemoveTagRequestBodyDto;
}

/**
 * TagsApi - interface
 * 
 * @export
 * @interface TagsApiInterface
 */
export interface TagsApiInterface {
    /**
     * 
     * @summary Cria uma nova tag.
     * @param {CreateTagRequestBodyDto} createTagRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    createTagRaw(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>>;

    /**
     * Cria uma nova tag.
     */
    createTag(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity>;

    /**
     * 
     * @summary Busca todas as tags.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [sortOrder] Ordem de ordenação dos resultados. Valores possíveis: asc ou desc.
     * @param {string} [sortBy] Campo para ordenação dos resultados. Valores possíveis: name ou createdAt.
     * @param {string} [textSearchTerm] Termo para busca por nome da tag.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    findAllTagsRaw(requestParameters: FindAllTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagsPageEntity>>;

    /**
     * Busca todas as tags.
     */
    findAllTags(requestParameters: FindAllTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagsPageEntity>;

    /**
     * 
     * @summary Busca uma tag pelo identificador.
     * @param {string} id Identificador da tag.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    findByIdTagRaw(requestParameters: FindByIdTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>>;

    /**
     * Busca uma tag pelo identificador.
     */
    findByIdTag(requestParameters: FindByIdTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity>;

    /**
     * 
     * @summary Atualiza parcialmente uma tag.
     * @param {string} id Identificador da tag.
     * @param {PartialUpdateTagRequestBodyDto} partialUpdateTagRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    partialUpdateTagRaw(requestParameters: PartialUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>>;

    /**
     * Atualiza parcialmente uma tag.
     */
    partialUpdateTag(requestParameters: PartialUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity>;

    /**
     * 
     * @summary Remove uma tag.
     * @param {string} id Identificador da tag.
     * @param {RemoveTagRequestBodyDto} removeTagRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    removeTagRaw(requestParameters: RemoveTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove uma tag.
     */
    removeTag(requestParameters: RemoveTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI implements TagsApiInterface {

    /**
     * Cria uma nova tag.
     */
    async createTagRaw(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters['createTagRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createTagRequestBodyDto',
                'Required parameter "createTagRequestBodyDto" was null or undefined when calling createTag().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTagRequestBodyDtoToJSON(requestParameters['createTagRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * Cria uma nova tag.
     */
    async createTag(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity> {
        const response = await this.createTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todas as tags.
     */
    async findAllTagsRaw(requestParameters: FindAllTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagsPageEntity>> {
        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['textSearchTerm'] != null) {
            queryParameters['textSearchTerm'] = requestParameters['textSearchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagsPageEntityFromJSON(jsonValue));
    }

    /**
     * Busca todas as tags.
     */
    async findAllTags(requestParameters: FindAllTagsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagsPageEntity> {
        const response = await this.findAllTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca uma tag pelo identificador.
     */
    async findByIdTagRaw(requestParameters: FindByIdTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findByIdTag().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/tags/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * Busca uma tag pelo identificador.
     */
    async findByIdTag(requestParameters: FindByIdTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity> {
        const response = await this.findByIdTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Atualiza parcialmente uma tag.
     */
    async partialUpdateTagRaw(requestParameters: PartialUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling partialUpdateTag().'
            );
        }

        if (requestParameters['partialUpdateTagRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'partialUpdateTagRequestBodyDto',
                'Required parameter "partialUpdateTagRequestBodyDto" was null or undefined when calling partialUpdateTag().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/tags/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PartialUpdateTagRequestBodyDtoToJSON(requestParameters['partialUpdateTagRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagEntityFromJSON(jsonValue));
    }

    /**
     * Atualiza parcialmente uma tag.
     */
    async partialUpdateTag(requestParameters: PartialUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity> {
        const response = await this.partialUpdateTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove uma tag.
     */
    async removeTagRaw(requestParameters: RemoveTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeTag().'
            );
        }

        if (requestParameters['removeTagRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'removeTagRequestBodyDto',
                'Required parameter "removeTagRequestBodyDto" was null or undefined when calling removeTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/tags/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveTagRequestBodyDtoToJSON(requestParameters['removeTagRequestBodyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove uma tag.
     */
    async removeTag(requestParameters: RemoveTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeTagRaw(requestParameters, initOverrides);
    }

}
