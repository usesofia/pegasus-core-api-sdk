/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionResponseEntity,
  ExportBankAccountsDto,
} from '../models/index';
import {
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    ExportBankAccountsDtoFromJSON,
    ExportBankAccountsDtoToJSON,
} from '../models/index';

export interface ExportBankAccountsRequest {
    sortOrder?: string;
    sortBy?: string;
    providerAccountId?: string;
    provider?: string;
    active?: boolean;
    ids?: Array<string>;
    isDefault?: boolean;
    isAutomatic?: boolean;
    type?: string;
    format?: ExportBankAccountsFormatEnum;
}

/**
 * BankAccountsExportApi - interface
 * 
 * @export
 * @interface BankAccountsExportApiInterface
 */
export interface BankAccountsExportApiInterface {
    /**
     * 
     * @summary Solicita a exportação das contas bancárias.
     * @param {string} [sortOrder] Ordem de ordenação das contas bancárias.
     * @param {string} [sortBy] Campo para ordenação das contas bancárias.
     * @param {string} [providerAccountId] Identificador da conta bancária no fornecedor.
     * @param {string} [provider] Fornecedor da conta bancária.
     * @param {boolean} [active] Indica se a conta está ativa.
     * @param {Array<string>} [ids] Identificadores das contas bancárias a serem buscadas.
     * @param {boolean} [isDefault] Indica se a conta é a padrão.
     * @param {boolean} [isAutomatic] Indica se a conta é automática ou manual.
     * @param {string} [type] Tipo de conta bancária a ser buscada.
     * @param {'csv' | 'xlsx'} [format] Formato de exportação dos dados.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsExportApiInterface
     */
    exportBankAccountsRaw(requestParameters: ExportBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportBankAccountsDto>>;

    /**
     * Solicita a exportação das contas bancárias.
     */
    exportBankAccounts(requestParameters: ExportBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportBankAccountsDto>;

}

/**
 * 
 */
export class BankAccountsExportApi extends runtime.BaseAPI implements BankAccountsExportApiInterface {

    /**
     * Solicita a exportação das contas bancárias.
     */
    async exportBankAccountsRaw(requestParameters: ExportBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportBankAccountsDto>> {
        const queryParameters: any = {};

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['providerAccountId'] != null) {
            queryParameters['providerAccountId'] = requestParameters['providerAccountId'];
        }

        if (requestParameters['provider'] != null) {
            queryParameters['provider'] = requestParameters['provider'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['isDefault'] != null) {
            queryParameters['isDefault'] = requestParameters['isDefault'];
        }

        if (requestParameters['isAutomatic'] != null) {
            queryParameters['isAutomatic'] = requestParameters['isAutomatic'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/bank-accounts/export`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportBankAccountsDtoFromJSON(jsonValue));
    }

    /**
     * Solicita a exportação das contas bancárias.
     */
    async exportBankAccounts(requestParameters: ExportBankAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportBankAccountsDto> {
        const response = await this.exportBankAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportBankAccountsFormatEnum = {
    Csv: 'csv',
    Xlsx: 'xlsx'
} as const;
export type ExportBankAccountsFormatEnum = typeof ExportBankAccountsFormatEnum[keyof typeof ExportBankAccountsFormatEnum];
