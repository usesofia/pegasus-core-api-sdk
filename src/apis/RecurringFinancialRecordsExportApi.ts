/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.12.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionResponseEntity,
  ExportRecurringFinancialRecordsDto,
} from '../models/index';
import {
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    ExportRecurringFinancialRecordsDtoFromJSON,
    ExportRecurringFinancialRecordsDtoToJSON,
} from '../models/index';

export interface ExportRecurringFinancialRecordsRequest {
    sortOrder?: ExportRecurringFinancialRecordsSortOrderEnum;
    sortBy?: ExportRecurringFinancialRecordsSortByEnum;
    frequency?: ExportRecurringFinancialRecordsFrequencyEnum;
    isActive?: boolean;
    automaticCompletion?: boolean;
    onlyBusinessDays?: boolean;
    repetitionMonth?: number;
    repetitionDay?: number;
    tags?: Array<any>;
    amountTo?: string;
    amountFrom?: string;
    subcategory?: string;
    contact?: string;
    firstOccurrenceDateTo?: Date;
    firstOccurrenceDateFrom?: Date;
    direction?: ExportRecurringFinancialRecordsDirectionEnum;
    format?: ExportRecurringFinancialRecordsFormatEnum;
}

/**
 * RecurringFinancialRecordsExportApi - interface
 * 
 * @export
 * @interface RecurringFinancialRecordsExportApiInterface
 */
export interface RecurringFinancialRecordsExportApiInterface {
    /**
     * 
     * @summary Solicita a exportação dos lançamentos recorrentes.
     * @param {'asc' | 'desc'} [sortOrder] Ordem da ordenação.
     * @param {'direction' | 'firstOccurrenceDate' | 'contact' | 'description' | 'subcategory' | 'amount' | 'frequency' | 'isActive' | 'createdAt'} [sortBy] Campo para ordenação.
     * @param {'WEEKLY' | 'MONTHLY' | 'YEARLY'} [frequency] Frequência de repetição do lançamento.
     * @param {boolean} [isActive] Indica se o lançamento recorrente está ativo.
     * @param {boolean} [automaticCompletion] Indica se o lançamento será completado automaticamente.
     * @param {boolean} [onlyBusinessDays] Indica se o lançamento será apenas em dias úteis.
     * @param {number} [repetitionMonth] Mês de repetição do lançamento.
     * @param {number} [repetitionDay] Dia de repetição do lançamento.
     * @param {Array<any>} [tags] Identificadores das tags.
     * @param {string} [amountTo] Valor máximo do lançamento.
     * @param {string} [amountFrom] Valor mínimo do lançamento.
     * @param {string} [subcategory] Identificador da subcategoria.
     * @param {string} [contact] Identificador do contato.
     * @param {Date} [firstOccurrenceDateTo] Data final da primeira ocorrência (formato ISO YYYY-MM-DD).
     * @param {Date} [firstOccurrenceDateFrom] Data inicial da primeira ocorrência (formato ISO YYYY-MM-DD).
     * @param {'IN' | 'OUT'} [direction] Direção do lançamento (entrada/saída).
     * @param {'csv' | 'xlsx'} [format] Formato de exportação dos dados.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsExportApiInterface
     */
    exportRecurringFinancialRecordsRaw(requestParameters: ExportRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportRecurringFinancialRecordsDto>>;

    /**
     * Solicita a exportação dos lançamentos recorrentes.
     */
    exportRecurringFinancialRecords(requestParameters: ExportRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportRecurringFinancialRecordsDto>;

}

/**
 * 
 */
export class RecurringFinancialRecordsExportApi extends runtime.BaseAPI implements RecurringFinancialRecordsExportApiInterface {

    /**
     * Solicita a exportação dos lançamentos recorrentes.
     */
    async exportRecurringFinancialRecordsRaw(requestParameters: ExportRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportRecurringFinancialRecordsDto>> {
        const queryParameters: any = {};

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['frequency'] != null) {
            queryParameters['frequency'] = requestParameters['frequency'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['automaticCompletion'] != null) {
            queryParameters['automaticCompletion'] = requestParameters['automaticCompletion'];
        }

        if (requestParameters['onlyBusinessDays'] != null) {
            queryParameters['onlyBusinessDays'] = requestParameters['onlyBusinessDays'];
        }

        if (requestParameters['repetitionMonth'] != null) {
            queryParameters['repetitionMonth'] = requestParameters['repetitionMonth'];
        }

        if (requestParameters['repetitionDay'] != null) {
            queryParameters['repetitionDay'] = requestParameters['repetitionDay'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['amountTo'] != null) {
            queryParameters['amountTo'] = requestParameters['amountTo'];
        }

        if (requestParameters['amountFrom'] != null) {
            queryParameters['amountFrom'] = requestParameters['amountFrom'];
        }

        if (requestParameters['subcategory'] != null) {
            queryParameters['subcategory'] = requestParameters['subcategory'];
        }

        if (requestParameters['contact'] != null) {
            queryParameters['contact'] = requestParameters['contact'];
        }

        if (requestParameters['firstOccurrenceDateTo'] != null) {
            queryParameters['firstOccurrenceDateTo'] = (requestParameters['firstOccurrenceDateTo'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['firstOccurrenceDateFrom'] != null) {
            queryParameters['firstOccurrenceDateFrom'] = (requestParameters['firstOccurrenceDateFrom'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/recurring-financial-records/export`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportRecurringFinancialRecordsDtoFromJSON(jsonValue));
    }

    /**
     * Solicita a exportação dos lançamentos recorrentes.
     */
    async exportRecurringFinancialRecords(requestParameters: ExportRecurringFinancialRecordsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportRecurringFinancialRecordsDto> {
        const response = await this.exportRecurringFinancialRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportRecurringFinancialRecordsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ExportRecurringFinancialRecordsSortOrderEnum = typeof ExportRecurringFinancialRecordsSortOrderEnum[keyof typeof ExportRecurringFinancialRecordsSortOrderEnum];
/**
 * @export
 */
export const ExportRecurringFinancialRecordsSortByEnum = {
    Direction: 'direction',
    FirstOccurrenceDate: 'firstOccurrenceDate',
    Contact: 'contact',
    Description: 'description',
    Subcategory: 'subcategory',
    Amount: 'amount',
    Frequency: 'frequency',
    IsActive: 'isActive',
    CreatedAt: 'createdAt'
} as const;
export type ExportRecurringFinancialRecordsSortByEnum = typeof ExportRecurringFinancialRecordsSortByEnum[keyof typeof ExportRecurringFinancialRecordsSortByEnum];
/**
 * @export
 */
export const ExportRecurringFinancialRecordsFrequencyEnum = {
    Weekly: 'WEEKLY',
    Monthly: 'MONTHLY',
    Yearly: 'YEARLY'
} as const;
export type ExportRecurringFinancialRecordsFrequencyEnum = typeof ExportRecurringFinancialRecordsFrequencyEnum[keyof typeof ExportRecurringFinancialRecordsFrequencyEnum];
/**
 * @export
 */
export const ExportRecurringFinancialRecordsDirectionEnum = {
    In: 'IN',
    Out: 'OUT'
} as const;
export type ExportRecurringFinancialRecordsDirectionEnum = typeof ExportRecurringFinancialRecordsDirectionEnum[keyof typeof ExportRecurringFinancialRecordsDirectionEnum];
/**
 * @export
 */
export const ExportRecurringFinancialRecordsFormatEnum = {
    Csv: 'csv',
    Xlsx: 'xlsx'
} as const;
export type ExportRecurringFinancialRecordsFormatEnum = typeof ExportRecurringFinancialRecordsFormatEnum[keyof typeof ExportRecurringFinancialRecordsFormatEnum];
