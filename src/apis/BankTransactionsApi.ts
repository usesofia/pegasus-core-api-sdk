/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BankTransactionEntity,
  BankTransactionsPageDto,
  CreateOrUpdateBankTransactionRequestBodyDto,
  ExceptionResponseEntity,
  PartialUpdateBankTransactionRequestBodyDto,
} from '../models/index';
import {
    BankTransactionEntityFromJSON,
    BankTransactionEntityToJSON,
    BankTransactionsPageDtoFromJSON,
    BankTransactionsPageDtoToJSON,
    CreateOrUpdateBankTransactionRequestBodyDtoFromJSON,
    CreateOrUpdateBankTransactionRequestBodyDtoToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    PartialUpdateBankTransactionRequestBodyDtoFromJSON,
    PartialUpdateBankTransactionRequestBodyDtoToJSON,
} from '../models/index';

export interface CreateOrUpdateBankTransactionRequest {
    createOrUpdateBankTransactionRequestBodyDto: CreateOrUpdateBankTransactionRequestBodyDto;
    populate?: string;
}

export interface FindAllBankTransactionsRequest {
    populate?: string;
    type?: FindAllBankTransactionsTypeEnum;
    dateTo?: Date;
    dateFrom?: Date;
    bankAccount?: string;
    searchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface FindByIdBankTransactionRequest {
    id: string;
    populate?: string;
}

export interface PartialUpdateBankTransactionRequest {
    id: string;
    partialUpdateBankTransactionRequestBodyDto: PartialUpdateBankTransactionRequestBodyDto;
    populate?: string;
}

/**
 * BankTransactionsApi - interface
 * 
 * @export
 * @interface BankTransactionsApiInterface
 */
export interface BankTransactionsApiInterface {
    /**
     * 
     * @summary Cria ou atualiza uma movimentação financeira.
     * @param {CreateOrUpdateBankTransactionRequestBodyDto} createOrUpdateBankTransactionRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    createOrUpdateBankTransactionRaw(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;

    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    createOrUpdateBankTransaction(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;

    /**
     * 
     * @summary Busca todas as movimentações financeiras.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {'DEBIT' | 'CREDIT'} [type] Tipo da movimentação.
     * @param {Date} [dateTo] Data final para filtrar.
     * @param {Date} [dateFrom] Data inicial para filtrar.
     * @param {string} [bankAccount] ID da conta bancária para filtrar.
     * @param {string} [searchTerm] Termo para busca por descrição.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    findAllBankTransactionsRaw(requestParameters: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsPageDto>>;

    /**
     * Busca todas as movimentações financeiras.
     */
    findAllBankTransactions(requestParameters: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsPageDto>;

    /**
     * 
     * @summary Busca uma movimentação financeira pelo identificador.
     * @param {string} id Identificador da movimentação financeira.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    findByIdBankTransactionRaw(requestParameters: FindByIdBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;

    /**
     * Busca uma movimentação financeira pelo identificador.
     */
    findByIdBankTransaction(requestParameters: FindByIdBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;

    /**
     * 
     * @summary Atualiza parcialmente uma movimentação financeira.
     * @param {string} id Identificador da movimentação financeira.
     * @param {PartialUpdateBankTransactionRequestBodyDto} partialUpdateBankTransactionRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    partialUpdateBankTransactionRaw(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;

    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    partialUpdateBankTransaction(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;

}

/**
 * 
 */
export class BankTransactionsApi extends runtime.BaseAPI implements BankTransactionsApiInterface {

    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    async createOrUpdateBankTransactionRaw(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>> {
        if (requestParameters['createOrUpdateBankTransactionRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createOrUpdateBankTransactionRequestBodyDto',
                'Required parameter "createOrUpdateBankTransactionRequestBodyDto" was null or undefined when calling createOrUpdateBankTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/internal/bank-transactions`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrUpdateBankTransactionRequestBodyDtoToJSON(requestParameters['createOrUpdateBankTransactionRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionEntityFromJSON(jsonValue));
    }

    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    async createOrUpdateBankTransaction(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity> {
        const response = await this.createOrUpdateBankTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todas as movimentações financeiras.
     */
    async findAllBankTransactionsRaw(requestParameters: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsPageDto>> {
        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['dateTo'] != null) {
            queryParameters['dateTo'] = (requestParameters['dateTo'] as any).toISOString();
        }

        if (requestParameters['dateFrom'] != null) {
            queryParameters['dateFrom'] = (requestParameters['dateFrom'] as any).toISOString();
        }

        if (requestParameters['bankAccount'] != null) {
            queryParameters['bankAccount'] = requestParameters['bankAccount'];
        }

        if (requestParameters['searchTerm'] != null) {
            queryParameters['searchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external/bank-transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionsPageDtoFromJSON(jsonValue));
    }

    /**
     * Busca todas as movimentações financeiras.
     */
    async findAllBankTransactions(requestParameters: FindAllBankTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsPageDto> {
        const response = await this.findAllBankTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca uma movimentação financeira pelo identificador.
     */
    async findByIdBankTransactionRaw(requestParameters: FindByIdBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findByIdBankTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external/bank-transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionEntityFromJSON(jsonValue));
    }

    /**
     * Busca uma movimentação financeira pelo identificador.
     */
    async findByIdBankTransaction(requestParameters: FindByIdBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity> {
        const response = await this.findByIdBankTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    async partialUpdateBankTransactionRaw(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling partialUpdateBankTransaction().'
            );
        }

        if (requestParameters['partialUpdateBankTransactionRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'partialUpdateBankTransactionRequestBodyDto',
                'Required parameter "partialUpdateBankTransactionRequestBodyDto" was null or undefined when calling partialUpdateBankTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/external/bank-transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PartialUpdateBankTransactionRequestBodyDtoToJSON(requestParameters['partialUpdateBankTransactionRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionEntityFromJSON(jsonValue));
    }

    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    async partialUpdateBankTransaction(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity> {
        const response = await this.partialUpdateBankTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const FindAllBankTransactionsTypeEnum = {
    Debit: 'DEBIT',
    Credit: 'CREDIT'
} as const;
export type FindAllBankTransactionsTypeEnum = typeof FindAllBankTransactionsTypeEnum[keyof typeof FindAllBankTransactionsTypeEnum];
