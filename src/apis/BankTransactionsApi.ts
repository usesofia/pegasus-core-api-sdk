/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.12.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BankTransactionEntity,
  BankTransactionsPageDto,
  BulkBankTransactionsJobRequestDto,
  BulkBankTransactionsJobRequestEntity,
  CreateOrUpdateBankTransactionRequestBodyDto,
  ExceptionResponseEntity,
  ExecuteBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto,
  ExecuteBulkBankTransactionsJobRequestBodyDto,
  ExecuteOfxImportJobRequestBodyDto,
  OfxImportJobRequestEntity,
  OfxImportJobRequestsPageDto,
  OfxImportRequestBodyDto,
  PartialUpdateBankTransactionRequestBodyDto,
  ReconcileBankTransactionRequestBodyDto,
  ShouldAiSuggestActionRequestBodyDto,
  ShouldAiSuggestActionResponseDto,
} from '../models/index';
import {
    BankTransactionEntityFromJSON,
    BankTransactionEntityToJSON,
    BankTransactionsPageDtoFromJSON,
    BankTransactionsPageDtoToJSON,
    BulkBankTransactionsJobRequestDtoFromJSON,
    BulkBankTransactionsJobRequestDtoToJSON,
    BulkBankTransactionsJobRequestEntityFromJSON,
    BulkBankTransactionsJobRequestEntityToJSON,
    CreateOrUpdateBankTransactionRequestBodyDtoFromJSON,
    CreateOrUpdateBankTransactionRequestBodyDtoToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    ExecuteBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDtoFromJSON,
    ExecuteBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDtoToJSON,
    ExecuteBulkBankTransactionsJobRequestBodyDtoFromJSON,
    ExecuteBulkBankTransactionsJobRequestBodyDtoToJSON,
    ExecuteOfxImportJobRequestBodyDtoFromJSON,
    ExecuteOfxImportJobRequestBodyDtoToJSON,
    OfxImportJobRequestEntityFromJSON,
    OfxImportJobRequestEntityToJSON,
    OfxImportJobRequestsPageDtoFromJSON,
    OfxImportJobRequestsPageDtoToJSON,
    OfxImportRequestBodyDtoFromJSON,
    OfxImportRequestBodyDtoToJSON,
    PartialUpdateBankTransactionRequestBodyDtoFromJSON,
    PartialUpdateBankTransactionRequestBodyDtoToJSON,
    ReconcileBankTransactionRequestBodyDtoFromJSON,
    ReconcileBankTransactionRequestBodyDtoToJSON,
    ShouldAiSuggestActionRequestBodyDtoFromJSON,
    ShouldAiSuggestActionRequestBodyDtoToJSON,
    ShouldAiSuggestActionResponseDtoFromJSON,
    ShouldAiSuggestActionResponseDtoToJSON,
} from '../models/index';

export interface CreateOrUpdateBankTransactionRequest {
    createOrUpdateBankTransactionRequestBodyDto: CreateOrUpdateBankTransactionRequestBodyDto;
    populate?: string;
}

export interface CreateOrUpdateBankTransactionBestSuggestedActionRequest {
    bankTransactionId: string;
}

export interface DispatchOfxImportRequest {
    ofxImportRequestBodyDto: OfxImportRequestBodyDto;
}

export interface FindAllBankTransactionsRequest {
    populate?: string;
    sortOrder?: FindAllBankTransactionsSortOrderEnum;
    sortBy?: FindAllBankTransactionsSortByEnum;
    ignored?: boolean;
    origin?: FindAllBankTransactionsOriginEnum;
    reconciled?: boolean;
    type?: FindAllBankTransactionsTypeEnum;
    dateTo?: Date;
    dateFrom?: Date;
    bankAccount?: string;
    semanticSearchTermInBase64?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface FindAllOfxImportJobRequestsRequest {
    sortOrder?: FindAllOfxImportJobRequestsSortOrderEnum;
    sortBy?: FindAllOfxImportJobRequestsSortByEnum;
    pageSize?: number;
    pageIndex?: number;
}

export interface FindBankTransactionByIdRequest {
    id: string;
    populate?: string;
}

export interface PartialUpdateBankTransactionRequest {
    id: string;
    partialUpdateBankTransactionRequestBodyDto: PartialUpdateBankTransactionRequestBodyDto;
    populate?: string;
}

export interface ProcessBankTransactionsCreateOrUpdateBestSuggestionActionRequest {
    executeBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto: ExecuteBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto;
}

export interface ProcessBulkBankTransactionsOperationRequest {
    executeBulkBankTransactionsJobRequestBodyDto: ExecuteBulkBankTransactionsJobRequestBodyDto;
}

export interface ProcessOfxImportRequest {
    executeOfxImportJobRequestBodyDto: ExecuteOfxImportJobRequestBodyDto;
}

export interface ReconcileBankTransactionRequest {
    bankTransactionId: string;
    reconcileBankTransactionRequestBodyDto: ReconcileBankTransactionRequestBodyDto;
}

export interface ScheduleBulkBankTransactionsOperationRequest {
    bulkBankTransactionsJobRequestDto: BulkBankTransactionsJobRequestDto;
}

export interface ShouldAiSuggestActionRequest {
    shouldAiSuggestActionRequestBodyDto: ShouldAiSuggestActionRequestBodyDto;
}

export interface SystemFindAllBankTransactionsRequest {
    ownerOrganizationId: string;
    populate?: string;
    sortOrder?: SystemFindAllBankTransactionsSortOrderEnum;
    sortBy?: SystemFindAllBankTransactionsSortByEnum;
    ignored?: boolean;
    origin?: SystemFindAllBankTransactionsOriginEnum;
    reconciled?: boolean;
    type?: SystemFindAllBankTransactionsTypeEnum;
    dateTo?: Date;
    dateFrom?: Date;
    bankAccount?: string;
    semanticSearchTermInBase64?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface SystemFindBankTransactionByIdRequest {
    id: string;
    populate?: string;
}

export interface UnreconcileBankTransactionRequest {
    bankTransactionId: string;
}

/**
 * BankTransactionsApi - interface
 * 
 * @export
 * @interface BankTransactionsApiInterface
 */
export interface BankTransactionsApiInterface {
    /**
     * 
     * @summary Cria ou atualiza uma movimentação financeira.
     * @param {CreateOrUpdateBankTransactionRequestBodyDto} createOrUpdateBankTransactionRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    createOrUpdateBankTransactionRaw(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;

    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    createOrUpdateBankTransaction(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;

    /**
     * 
     * @summary Cria ou atualiza uma sugestão de melhor ação para uma transação bancária.
     * @param {string} bankTransactionId ID da transação bancária para obter sugestões de melhor ação.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    createOrUpdateBankTransactionBestSuggestedActionRaw(requestParameters: CreateOrUpdateBankTransactionBestSuggestedActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;

    /**
     * Cria ou atualiza uma sugestão de melhor ação para uma transação bancária.
     */
    createOrUpdateBankTransactionBestSuggestedAction(requestParameters: CreateOrUpdateBankTransactionBestSuggestedActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;

    /**
     * 
     * @summary Dispara a importação assíncrona de um arquivo OFX.
     * @param {OfxImportRequestBodyDto} ofxImportRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    dispatchOfxImportRaw(requestParameters: DispatchOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OfxImportJobRequestEntity>>;

    /**
     * Dispara a importação assíncrona de um arquivo OFX.
     */
    dispatchOfxImport(requestParameters: DispatchOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OfxImportJobRequestEntity>;

    /**
     * 
     * @summary Busca todas as movimentações financeiras.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {'asc' | 'desc'} [sortOrder] Ordem da ordenação. Valores possíveis: \&#39;asc\&#39;, \&#39;desc\&#39;.
     * @param {'date' | 'amountInBrl' | 'description' | 'createdAt' | 'reconciled'} [sortBy] Campo para ordenação
     * @param {boolean} [ignored] Filtrar por transações ignoradas/arquivadas. (true/false)
     * @param {'AUTOMATIC_INTEGRATION' | 'MANUAL_OFX_IMPORT'} [origin] Filtrar pela origem da transação.
     * @param {boolean} [reconciled] Filtrar por transações reconciliadas. (true/false)
     * @param {'DEBIT' | 'CREDIT'} [type] Tipo da movimentação.
     * @param {Date} [dateTo] Data final para filtrar.
     * @param {Date} [dateFrom] Data inicial para filtrar.
     * @param {string} [bankAccount] ID da conta bancária para filtrar.
     * @param {string} [semanticSearchTermInBase64] Termo para busca semântica em base64.
     * @param {string} [textSearchTerm] Termo para busca textual.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    findAllBankTransactionsRaw(requestParameters: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsPageDto>>;

    /**
     * Busca todas as movimentações financeiras.
     */
    findAllBankTransactions(requestParameters: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsPageDto>;

    /**
     * 
     * @summary Lista todas as solicitações de importação de arquivos OFX com suas execuções.
     * @param {'asc' | 'desc'} [sortOrder] Ordem da ordenação. Valores possíveis: \&#39;asc\&#39;, \&#39;desc\&#39;.
     * @param {'createdAt' | 'fileName' | 'bankAccountName'} [sortBy] Campo para ordenação. Valores possíveis: \&#39;createdAt\&#39;, \&#39;fileName\&#39;, \&#39;bankAccountName\&#39;.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    findAllOfxImportJobRequestsRaw(requestParameters: FindAllOfxImportJobRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OfxImportJobRequestsPageDto>>;

    /**
     * Lista todas as solicitações de importação de arquivos OFX com suas execuções.
     */
    findAllOfxImportJobRequests(requestParameters: FindAllOfxImportJobRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OfxImportJobRequestsPageDto>;

    /**
     * 
     * @summary Busca uma movimentação financeira por ID.
     * @param {string} id ID da movimentação financeira.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    findBankTransactionByIdRaw(requestParameters: FindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;

    /**
     * Busca uma movimentação financeira por ID.
     */
    findBankTransactionById(requestParameters: FindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;

    /**
     * 
     * @summary Atualiza parcialmente uma movimentação financeira.
     * @param {string} id ID da movimentação financeira.
     * @param {PartialUpdateBankTransactionRequestBodyDto} partialUpdateBankTransactionRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    partialUpdateBankTransactionRaw(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;

    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    partialUpdateBankTransaction(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;

    /**
     * 
     * @summary Processa a obtenção de sugestões de melhor ação para transações bancárias via AI.
     * @param {ExecuteBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto} executeBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    processBankTransactionsCreateOrUpdateBestSuggestionActionRaw(requestParameters: ProcessBankTransactionsCreateOrUpdateBestSuggestionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Processa a obtenção de sugestões de melhor ação para transações bancárias via AI.
     */
    processBankTransactionsCreateOrUpdateBestSuggestionAction(requestParameters: ProcessBankTransactionsCreateOrUpdateBestSuggestionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Processa uma operação em lote para transações bancárias.
     * @param {ExecuteBulkBankTransactionsJobRequestBodyDto} executeBulkBankTransactionsJobRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    processBulkBankTransactionsOperationRaw(requestParameters: ProcessBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Processa uma operação em lote para transações bancárias.
     */
    processBulkBankTransactionsOperation(requestParameters: ProcessBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Processa a importação assíncrona de um arquivo OFX.
     * @param {ExecuteOfxImportJobRequestBodyDto} executeOfxImportJobRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    processOfxImportRaw(requestParameters: ProcessOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Processa a importação assíncrona de um arquivo OFX.
     */
    processOfxImport(requestParameters: ProcessOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Reconcilia uma transação bancária com múltiplos lançamentos financeiros.
     * @param {string} bankTransactionId ID da transação bancária a ser reconciliada.
     * @param {ReconcileBankTransactionRequestBodyDto} reconcileBankTransactionRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    reconcileBankTransactionRaw(requestParameters: ReconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;

    /**
     * Reconcilia uma transação bancária com múltiplos lançamentos financeiros.
     */
    reconcileBankTransaction(requestParameters: ReconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;

    /**
     * 
     * @summary Agenda uma operação em lote para transações bancárias.
     * @param {BulkBankTransactionsJobRequestDto} bulkBankTransactionsJobRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    scheduleBulkBankTransactionsOperationRaw(requestParameters: ScheduleBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkBankTransactionsJobRequestEntity>>;

    /**
     * Agenda uma operação em lote para transações bancárias.
     */
    scheduleBulkBankTransactionsOperation(requestParameters: ScheduleBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkBankTransactionsJobRequestEntity>;

    /**
     * 
     * @summary Verifica se a AI deve sugerir uma ação para uma transação bancária.
     * @param {ShouldAiSuggestActionRequestBodyDto} shouldAiSuggestActionRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    shouldAiSuggestActionRaw(requestParameters: ShouldAiSuggestActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShouldAiSuggestActionResponseDto>>;

    /**
     * Verifica se a AI deve sugerir uma ação para uma transação bancária.
     */
    shouldAiSuggestAction(requestParameters: ShouldAiSuggestActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShouldAiSuggestActionResponseDto>;

    /**
     * 
     * @summary Busca todas as movimentações financeiras pelo sistema.
     * @param {string} ownerOrganizationId Identificador da organização proprietária das movimentações financeiras.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {'asc' | 'desc'} [sortOrder] Ordem da ordenação. Valores possíveis: \&#39;asc\&#39;, \&#39;desc\&#39;.
     * @param {'date' | 'amountInBrl' | 'description' | 'createdAt' | 'reconciled'} [sortBy] Campo para ordenação
     * @param {boolean} [ignored] Filtrar por transações ignoradas/arquivadas. (true/false)
     * @param {'AUTOMATIC_INTEGRATION' | 'MANUAL_OFX_IMPORT'} [origin] Filtrar pela origem da transação.
     * @param {boolean} [reconciled] Filtrar por transações reconciliadas. (true/false)
     * @param {'DEBIT' | 'CREDIT'} [type] Tipo da movimentação.
     * @param {Date} [dateTo] Data final para filtrar.
     * @param {Date} [dateFrom] Data inicial para filtrar.
     * @param {string} [bankAccount] ID da conta bancária para filtrar.
     * @param {string} [semanticSearchTermInBase64] Termo para busca semântica em base64.
     * @param {string} [textSearchTerm] Termo para busca textual.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    systemFindAllBankTransactionsRaw(requestParameters: SystemFindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsPageDto>>;

    /**
     * Busca todas as movimentações financeiras pelo sistema.
     */
    systemFindAllBankTransactions(requestParameters: SystemFindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsPageDto>;

    /**
     * 
     * @summary Busca uma movimentação financeira por ID.
     * @param {string} id ID da movimentação financeira.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    systemFindBankTransactionByIdRaw(requestParameters: SystemFindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;

    /**
     * Busca uma movimentação financeira por ID.
     */
    systemFindBankTransactionById(requestParameters: SystemFindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;

    /**
     * 
     * @summary Desfaz a reconciliação de uma transação bancária.
     * @param {string} bankTransactionId ID da transação bancária para desfazer a reconciliação.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    unreconcileBankTransactionRaw(requestParameters: UnreconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;

    /**
     * Desfaz a reconciliação de uma transação bancária.
     */
    unreconcileBankTransaction(requestParameters: UnreconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;

}

/**
 * 
 */
export class BankTransactionsApi extends runtime.BaseAPI implements BankTransactionsApiInterface {

    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    async createOrUpdateBankTransactionRaw(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>> {
        if (requestParameters['createOrUpdateBankTransactionRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createOrUpdateBankTransactionRequestBodyDto',
                'Required parameter "createOrUpdateBankTransactionRequestBodyDto" was null or undefined when calling createOrUpdateBankTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/internal/bank-transactions`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrUpdateBankTransactionRequestBodyDtoToJSON(requestParameters['createOrUpdateBankTransactionRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionEntityFromJSON(jsonValue));
    }

    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    async createOrUpdateBankTransaction(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity> {
        const response = await this.createOrUpdateBankTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cria ou atualiza uma sugestão de melhor ação para uma transação bancária.
     */
    async createOrUpdateBankTransactionBestSuggestedActionRaw(requestParameters: CreateOrUpdateBankTransactionBestSuggestedActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>> {
        if (requestParameters['bankTransactionId'] == null) {
            throw new runtime.RequiredError(
                'bankTransactionId',
                'Required parameter "bankTransactionId" was null or undefined when calling createOrUpdateBankTransactionBestSuggestedAction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/bank-transactions/{bankTransactionId}/best-suggested-action`;
        urlPath = urlPath.replace(`{${"bankTransactionId"}}`, encodeURIComponent(String(requestParameters['bankTransactionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionEntityFromJSON(jsonValue));
    }

    /**
     * Cria ou atualiza uma sugestão de melhor ação para uma transação bancária.
     */
    async createOrUpdateBankTransactionBestSuggestedAction(requestParameters: CreateOrUpdateBankTransactionBestSuggestedActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity> {
        const response = await this.createOrUpdateBankTransactionBestSuggestedActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dispara a importação assíncrona de um arquivo OFX.
     */
    async dispatchOfxImportRaw(requestParameters: DispatchOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OfxImportJobRequestEntity>> {
        if (requestParameters['ofxImportRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'ofxImportRequestBodyDto',
                'Required parameter "ofxImportRequestBodyDto" was null or undefined when calling dispatchOfxImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/bank-transactions/ofx`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OfxImportRequestBodyDtoToJSON(requestParameters['ofxImportRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfxImportJobRequestEntityFromJSON(jsonValue));
    }

    /**
     * Dispara a importação assíncrona de um arquivo OFX.
     */
    async dispatchOfxImport(requestParameters: DispatchOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OfxImportJobRequestEntity> {
        const response = await this.dispatchOfxImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todas as movimentações financeiras.
     */
    async findAllBankTransactionsRaw(requestParameters: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsPageDto>> {
        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['ignored'] != null) {
            queryParameters['ignored'] = requestParameters['ignored'];
        }

        if (requestParameters['origin'] != null) {
            queryParameters['origin'] = requestParameters['origin'];
        }

        if (requestParameters['reconciled'] != null) {
            queryParameters['reconciled'] = requestParameters['reconciled'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['dateTo'] != null) {
            queryParameters['dateTo'] = (requestParameters['dateTo'] as any).toISOString();
        }

        if (requestParameters['dateFrom'] != null) {
            queryParameters['dateFrom'] = (requestParameters['dateFrom'] as any).toISOString();
        }

        if (requestParameters['bankAccount'] != null) {
            queryParameters['bankAccount'] = requestParameters['bankAccount'];
        }

        if (requestParameters['semanticSearchTermInBase64'] != null) {
            queryParameters['semanticSearchTermInBase64'] = requestParameters['semanticSearchTermInBase64'];
        }

        if (requestParameters['textSearchTerm'] != null) {
            queryParameters['textSearchTerm'] = requestParameters['textSearchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/bank-transactions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionsPageDtoFromJSON(jsonValue));
    }

    /**
     * Busca todas as movimentações financeiras.
     */
    async findAllBankTransactions(requestParameters: FindAllBankTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsPageDto> {
        const response = await this.findAllBankTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lista todas as solicitações de importação de arquivos OFX com suas execuções.
     */
    async findAllOfxImportJobRequestsRaw(requestParameters: FindAllOfxImportJobRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OfxImportJobRequestsPageDto>> {
        const queryParameters: any = {};

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/bank-transactions/ofx/job-requests`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfxImportJobRequestsPageDtoFromJSON(jsonValue));
    }

    /**
     * Lista todas as solicitações de importação de arquivos OFX com suas execuções.
     */
    async findAllOfxImportJobRequests(requestParameters: FindAllOfxImportJobRequestsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OfxImportJobRequestsPageDto> {
        const response = await this.findAllOfxImportJobRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca uma movimentação financeira por ID.
     */
    async findBankTransactionByIdRaw(requestParameters: FindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findBankTransactionById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/bank-transactions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionEntityFromJSON(jsonValue));
    }

    /**
     * Busca uma movimentação financeira por ID.
     */
    async findBankTransactionById(requestParameters: FindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity> {
        const response = await this.findBankTransactionByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    async partialUpdateBankTransactionRaw(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling partialUpdateBankTransaction().'
            );
        }

        if (requestParameters['partialUpdateBankTransactionRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'partialUpdateBankTransactionRequestBodyDto',
                'Required parameter "partialUpdateBankTransactionRequestBodyDto" was null or undefined when calling partialUpdateBankTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/bank-transactions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PartialUpdateBankTransactionRequestBodyDtoToJSON(requestParameters['partialUpdateBankTransactionRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionEntityFromJSON(jsonValue));
    }

    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    async partialUpdateBankTransaction(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity> {
        const response = await this.partialUpdateBankTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Processa a obtenção de sugestões de melhor ação para transações bancárias via AI.
     */
    async processBankTransactionsCreateOrUpdateBestSuggestionActionRaw(requestParameters: ProcessBankTransactionsCreateOrUpdateBestSuggestionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['executeBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'executeBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto',
                'Required parameter "executeBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto" was null or undefined when calling processBankTransactionsCreateOrUpdateBestSuggestionAction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/internal/queues/bank-transactions-create-or-update-best-suggestion-action`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExecuteBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDtoToJSON(requestParameters['executeBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Processa a obtenção de sugestões de melhor ação para transações bancárias via AI.
     */
    async processBankTransactionsCreateOrUpdateBestSuggestionAction(requestParameters: ProcessBankTransactionsCreateOrUpdateBestSuggestionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.processBankTransactionsCreateOrUpdateBestSuggestionActionRaw(requestParameters, initOverrides);
    }

    /**
     * Processa uma operação em lote para transações bancárias.
     */
    async processBulkBankTransactionsOperationRaw(requestParameters: ProcessBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['executeBulkBankTransactionsJobRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'executeBulkBankTransactionsJobRequestBodyDto',
                'Required parameter "executeBulkBankTransactionsJobRequestBodyDto" was null or undefined when calling processBulkBankTransactionsOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/internal/queues/bulk-bank-transactions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExecuteBulkBankTransactionsJobRequestBodyDtoToJSON(requestParameters['executeBulkBankTransactionsJobRequestBodyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Processa uma operação em lote para transações bancárias.
     */
    async processBulkBankTransactionsOperation(requestParameters: ProcessBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.processBulkBankTransactionsOperationRaw(requestParameters, initOverrides);
    }

    /**
     * Processa a importação assíncrona de um arquivo OFX.
     */
    async processOfxImportRaw(requestParameters: ProcessOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['executeOfxImportJobRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'executeOfxImportJobRequestBodyDto',
                'Required parameter "executeOfxImportJobRequestBodyDto" was null or undefined when calling processOfxImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/internal/queues/ofx-import`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExecuteOfxImportJobRequestBodyDtoToJSON(requestParameters['executeOfxImportJobRequestBodyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Processa a importação assíncrona de um arquivo OFX.
     */
    async processOfxImport(requestParameters: ProcessOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.processOfxImportRaw(requestParameters, initOverrides);
    }

    /**
     * Reconcilia uma transação bancária com múltiplos lançamentos financeiros.
     */
    async reconcileBankTransactionRaw(requestParameters: ReconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>> {
        if (requestParameters['bankTransactionId'] == null) {
            throw new runtime.RequiredError(
                'bankTransactionId',
                'Required parameter "bankTransactionId" was null or undefined when calling reconcileBankTransaction().'
            );
        }

        if (requestParameters['reconcileBankTransactionRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'reconcileBankTransactionRequestBodyDto',
                'Required parameter "reconcileBankTransactionRequestBodyDto" was null or undefined when calling reconcileBankTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/bank-transactions/{bankTransactionId}/reconcile`;
        urlPath = urlPath.replace(`{${"bankTransactionId"}}`, encodeURIComponent(String(requestParameters['bankTransactionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReconcileBankTransactionRequestBodyDtoToJSON(requestParameters['reconcileBankTransactionRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionEntityFromJSON(jsonValue));
    }

    /**
     * Reconcilia uma transação bancária com múltiplos lançamentos financeiros.
     */
    async reconcileBankTransaction(requestParameters: ReconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity> {
        const response = await this.reconcileBankTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Agenda uma operação em lote para transações bancárias.
     */
    async scheduleBulkBankTransactionsOperationRaw(requestParameters: ScheduleBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkBankTransactionsJobRequestEntity>> {
        if (requestParameters['bulkBankTransactionsJobRequestDto'] == null) {
            throw new runtime.RequiredError(
                'bulkBankTransactionsJobRequestDto',
                'Required parameter "bulkBankTransactionsJobRequestDto" was null or undefined when calling scheduleBulkBankTransactionsOperation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/bank-transactions/bulk-operations`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkBankTransactionsJobRequestDtoToJSON(requestParameters['bulkBankTransactionsJobRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkBankTransactionsJobRequestEntityFromJSON(jsonValue));
    }

    /**
     * Agenda uma operação em lote para transações bancárias.
     */
    async scheduleBulkBankTransactionsOperation(requestParameters: ScheduleBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkBankTransactionsJobRequestEntity> {
        const response = await this.scheduleBulkBankTransactionsOperationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verifica se a AI deve sugerir uma ação para uma transação bancária.
     */
    async shouldAiSuggestActionRaw(requestParameters: ShouldAiSuggestActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShouldAiSuggestActionResponseDto>> {
        if (requestParameters['shouldAiSuggestActionRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'shouldAiSuggestActionRequestBodyDto',
                'Required parameter "shouldAiSuggestActionRequestBodyDto" was null or undefined when calling shouldAiSuggestAction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/internal/bank-transactions/should-ai-suggest-action`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShouldAiSuggestActionRequestBodyDtoToJSON(requestParameters['shouldAiSuggestActionRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShouldAiSuggestActionResponseDtoFromJSON(jsonValue));
    }

    /**
     * Verifica se a AI deve sugerir uma ação para uma transação bancária.
     */
    async shouldAiSuggestAction(requestParameters: ShouldAiSuggestActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShouldAiSuggestActionResponseDto> {
        const response = await this.shouldAiSuggestActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todas as movimentações financeiras pelo sistema.
     */
    async systemFindAllBankTransactionsRaw(requestParameters: SystemFindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsPageDto>> {
        if (requestParameters['ownerOrganizationId'] == null) {
            throw new runtime.RequiredError(
                'ownerOrganizationId',
                'Required parameter "ownerOrganizationId" was null or undefined when calling systemFindAllBankTransactions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ownerOrganizationId'] != null) {
            queryParameters['ownerOrganizationId'] = requestParameters['ownerOrganizationId'];
        }

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['ignored'] != null) {
            queryParameters['ignored'] = requestParameters['ignored'];
        }

        if (requestParameters['origin'] != null) {
            queryParameters['origin'] = requestParameters['origin'];
        }

        if (requestParameters['reconciled'] != null) {
            queryParameters['reconciled'] = requestParameters['reconciled'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['dateTo'] != null) {
            queryParameters['dateTo'] = (requestParameters['dateTo'] as any).toISOString();
        }

        if (requestParameters['dateFrom'] != null) {
            queryParameters['dateFrom'] = (requestParameters['dateFrom'] as any).toISOString();
        }

        if (requestParameters['bankAccount'] != null) {
            queryParameters['bankAccount'] = requestParameters['bankAccount'];
        }

        if (requestParameters['semanticSearchTermInBase64'] != null) {
            queryParameters['semanticSearchTermInBase64'] = requestParameters['semanticSearchTermInBase64'];
        }

        if (requestParameters['textSearchTerm'] != null) {
            queryParameters['textSearchTerm'] = requestParameters['textSearchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/bank-transactions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionsPageDtoFromJSON(jsonValue));
    }

    /**
     * Busca todas as movimentações financeiras pelo sistema.
     */
    async systemFindAllBankTransactions(requestParameters: SystemFindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsPageDto> {
        const response = await this.systemFindAllBankTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca uma movimentação financeira por ID.
     */
    async systemFindBankTransactionByIdRaw(requestParameters: SystemFindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling systemFindBankTransactionById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/bank-transactions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionEntityFromJSON(jsonValue));
    }

    /**
     * Busca uma movimentação financeira por ID.
     */
    async systemFindBankTransactionById(requestParameters: SystemFindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity> {
        const response = await this.systemFindBankTransactionByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Desfaz a reconciliação de uma transação bancária.
     */
    async unreconcileBankTransactionRaw(requestParameters: UnreconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>> {
        if (requestParameters['bankTransactionId'] == null) {
            throw new runtime.RequiredError(
                'bankTransactionId',
                'Required parameter "bankTransactionId" was null or undefined when calling unreconcileBankTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/bank-transactions/{bankTransactionId}/unreconcile`;
        urlPath = urlPath.replace(`{${"bankTransactionId"}}`, encodeURIComponent(String(requestParameters['bankTransactionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankTransactionEntityFromJSON(jsonValue));
    }

    /**
     * Desfaz a reconciliação de uma transação bancária.
     */
    async unreconcileBankTransaction(requestParameters: UnreconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity> {
        const response = await this.unreconcileBankTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const FindAllBankTransactionsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type FindAllBankTransactionsSortOrderEnum = typeof FindAllBankTransactionsSortOrderEnum[keyof typeof FindAllBankTransactionsSortOrderEnum];
/**
 * @export
 */
export const FindAllBankTransactionsSortByEnum = {
    Date: 'date',
    AmountInBrl: 'amountInBrl',
    Description: 'description',
    CreatedAt: 'createdAt',
    Reconciled: 'reconciled'
} as const;
export type FindAllBankTransactionsSortByEnum = typeof FindAllBankTransactionsSortByEnum[keyof typeof FindAllBankTransactionsSortByEnum];
/**
 * @export
 */
export const FindAllBankTransactionsOriginEnum = {
    AutomaticIntegration: 'AUTOMATIC_INTEGRATION',
    ManualOfxImport: 'MANUAL_OFX_IMPORT'
} as const;
export type FindAllBankTransactionsOriginEnum = typeof FindAllBankTransactionsOriginEnum[keyof typeof FindAllBankTransactionsOriginEnum];
/**
 * @export
 */
export const FindAllBankTransactionsTypeEnum = {
    Debit: 'DEBIT',
    Credit: 'CREDIT'
} as const;
export type FindAllBankTransactionsTypeEnum = typeof FindAllBankTransactionsTypeEnum[keyof typeof FindAllBankTransactionsTypeEnum];
/**
 * @export
 */
export const FindAllOfxImportJobRequestsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type FindAllOfxImportJobRequestsSortOrderEnum = typeof FindAllOfxImportJobRequestsSortOrderEnum[keyof typeof FindAllOfxImportJobRequestsSortOrderEnum];
/**
 * @export
 */
export const FindAllOfxImportJobRequestsSortByEnum = {
    CreatedAt: 'createdAt',
    FileName: 'fileName',
    BankAccountName: 'bankAccountName'
} as const;
export type FindAllOfxImportJobRequestsSortByEnum = typeof FindAllOfxImportJobRequestsSortByEnum[keyof typeof FindAllOfxImportJobRequestsSortByEnum];
/**
 * @export
 */
export const SystemFindAllBankTransactionsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type SystemFindAllBankTransactionsSortOrderEnum = typeof SystemFindAllBankTransactionsSortOrderEnum[keyof typeof SystemFindAllBankTransactionsSortOrderEnum];
/**
 * @export
 */
export const SystemFindAllBankTransactionsSortByEnum = {
    Date: 'date',
    AmountInBrl: 'amountInBrl',
    Description: 'description',
    CreatedAt: 'createdAt',
    Reconciled: 'reconciled'
} as const;
export type SystemFindAllBankTransactionsSortByEnum = typeof SystemFindAllBankTransactionsSortByEnum[keyof typeof SystemFindAllBankTransactionsSortByEnum];
/**
 * @export
 */
export const SystemFindAllBankTransactionsOriginEnum = {
    AutomaticIntegration: 'AUTOMATIC_INTEGRATION',
    ManualOfxImport: 'MANUAL_OFX_IMPORT'
} as const;
export type SystemFindAllBankTransactionsOriginEnum = typeof SystemFindAllBankTransactionsOriginEnum[keyof typeof SystemFindAllBankTransactionsOriginEnum];
/**
 * @export
 */
export const SystemFindAllBankTransactionsTypeEnum = {
    Debit: 'DEBIT',
    Credit: 'CREDIT'
} as const;
export type SystemFindAllBankTransactionsTypeEnum = typeof SystemFindAllBankTransactionsTypeEnum[keyof typeof SystemFindAllBankTransactionsTypeEnum];
