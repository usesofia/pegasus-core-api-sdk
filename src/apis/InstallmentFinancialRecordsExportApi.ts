/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionResponseEntity,
  ExportInstallmentFinancialRecordsDto,
} from '../models/index';
import {
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    ExportInstallmentFinancialRecordsDtoFromJSON,
    ExportInstallmentFinancialRecordsDtoToJSON,
} from '../models/index';

export interface ExportInstallmentFinancialRecordsRequest {
    sortOrder?: ExportInstallmentFinancialRecordsSortOrderEnum;
    sortBy?: ExportInstallmentFinancialRecordsSortByEnum;
    completed?: boolean;
    frequency?: ExportInstallmentFinancialRecordsFrequencyEnum;
    competenceDateTo?: Date;
    competenceDateFrom?: Date;
    tags?: Array<any>;
    subcategory?: string;
    contact?: string;
    firstInstallmentDateTo?: Date;
    firstInstallmentDateFrom?: Date;
    direction?: ExportInstallmentFinancialRecordsDirectionEnum;
    format?: ExportInstallmentFinancialRecordsFormatEnum;
}

/**
 * InstallmentFinancialRecordsExportApi - interface
 * 
 * @export
 * @interface InstallmentFinancialRecordsExportApiInterface
 */
export interface InstallmentFinancialRecordsExportApiInterface {
    /**
     * 
     * @summary Solicita a exportação dos lançamentos financeiros parcelados.
     * @param {'asc' | 'desc'} [sortOrder] Ordem da ordenação.
     * @param {'direction' | 'firstInstallmentDate' | 'contact' | 'description' | 'subcategory' | 'amount' | 'tags' | 'competenceDate' | 'frequency' | 'createdAt'} [sortBy] Campo para ordenação.
     * @param {boolean} [completed] Indica se o lançamento parcelado está completo (todas as parcelas pagas/recebidas).
     * @param {'MONTHLY' | 'WEEKLY' | 'YEARLY'} [frequency] Frequência do lançamento parcelado.
     * @param {Date} [competenceDateTo] Data de competência final (formato ISO YYYY-MM-DD).
     * @param {Date} [competenceDateFrom] Data de competência inicial (formato ISO YYYY-MM-DD).
     * @param {Array<any>} [tags] Identificadores das tags.
     * @param {string} [subcategory] Identificador da subcategoria.
     * @param {string} [contact] Identificador do contato.
     * @param {Date} [firstInstallmentDateTo] Data final da primeira parcela (formato ISO YYYY-MM-DD).
     * @param {Date} [firstInstallmentDateFrom] Data inicial da primeira parcela (formato ISO YYYY-MM-DD).
     * @param {'IN' | 'OUT'} [direction] Direção do lançamento (entrada/saída).
     * @param {'csv' | 'xlsx'} [format] Formato de exportação dos dados (CSV padrão).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentFinancialRecordsExportApiInterface
     */
    exportInstallmentFinancialRecordsRaw(requestParameters: ExportInstallmentFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportInstallmentFinancialRecordsDto>>;

    /**
     * Solicita a exportação dos lançamentos financeiros parcelados.
     */
    exportInstallmentFinancialRecords(requestParameters: ExportInstallmentFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportInstallmentFinancialRecordsDto>;

}

/**
 * 
 */
export class InstallmentFinancialRecordsExportApi extends runtime.BaseAPI implements InstallmentFinancialRecordsExportApiInterface {

    /**
     * Solicita a exportação dos lançamentos financeiros parcelados.
     */
    async exportInstallmentFinancialRecordsRaw(requestParameters: ExportInstallmentFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportInstallmentFinancialRecordsDto>> {
        const queryParameters: any = {};

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['completed'] != null) {
            queryParameters['completed'] = requestParameters['completed'];
        }

        if (requestParameters['frequency'] != null) {
            queryParameters['frequency'] = requestParameters['frequency'];
        }

        if (requestParameters['competenceDateTo'] != null) {
            queryParameters['competenceDateTo'] = (requestParameters['competenceDateTo'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['competenceDateFrom'] != null) {
            queryParameters['competenceDateFrom'] = (requestParameters['competenceDateFrom'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['subcategory'] != null) {
            queryParameters['subcategory'] = requestParameters['subcategory'];
        }

        if (requestParameters['contact'] != null) {
            queryParameters['contact'] = requestParameters['contact'];
        }

        if (requestParameters['firstInstallmentDateTo'] != null) {
            queryParameters['firstInstallmentDateTo'] = (requestParameters['firstInstallmentDateTo'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['firstInstallmentDateFrom'] != null) {
            queryParameters['firstInstallmentDateFrom'] = (requestParameters['firstInstallmentDateFrom'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/installment-financial-records/export`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportInstallmentFinancialRecordsDtoFromJSON(jsonValue));
    }

    /**
     * Solicita a exportação dos lançamentos financeiros parcelados.
     */
    async exportInstallmentFinancialRecords(requestParameters: ExportInstallmentFinancialRecordsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportInstallmentFinancialRecordsDto> {
        const response = await this.exportInstallmentFinancialRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportInstallmentFinancialRecordsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ExportInstallmentFinancialRecordsSortOrderEnum = typeof ExportInstallmentFinancialRecordsSortOrderEnum[keyof typeof ExportInstallmentFinancialRecordsSortOrderEnum];
/**
 * @export
 */
export const ExportInstallmentFinancialRecordsSortByEnum = {
    Direction: 'direction',
    FirstInstallmentDate: 'firstInstallmentDate',
    Contact: 'contact',
    Description: 'description',
    Subcategory: 'subcategory',
    Amount: 'amount',
    Tags: 'tags',
    CompetenceDate: 'competenceDate',
    Frequency: 'frequency',
    CreatedAt: 'createdAt'
} as const;
export type ExportInstallmentFinancialRecordsSortByEnum = typeof ExportInstallmentFinancialRecordsSortByEnum[keyof typeof ExportInstallmentFinancialRecordsSortByEnum];
/**
 * @export
 */
export const ExportInstallmentFinancialRecordsFrequencyEnum = {
    Monthly: 'MONTHLY',
    Weekly: 'WEEKLY',
    Yearly: 'YEARLY'
} as const;
export type ExportInstallmentFinancialRecordsFrequencyEnum = typeof ExportInstallmentFinancialRecordsFrequencyEnum[keyof typeof ExportInstallmentFinancialRecordsFrequencyEnum];
/**
 * @export
 */
export const ExportInstallmentFinancialRecordsDirectionEnum = {
    In: 'IN',
    Out: 'OUT'
} as const;
export type ExportInstallmentFinancialRecordsDirectionEnum = typeof ExportInstallmentFinancialRecordsDirectionEnum[keyof typeof ExportInstallmentFinancialRecordsDirectionEnum];
/**
 * @export
 */
export const ExportInstallmentFinancialRecordsFormatEnum = {
    Csv: 'csv',
    Xlsx: 'xlsx'
} as const;
export type ExportInstallmentFinancialRecordsFormatEnum = typeof ExportInstallmentFinancialRecordsFormatEnum[keyof typeof ExportInstallmentFinancialRecordsFormatEnum];
