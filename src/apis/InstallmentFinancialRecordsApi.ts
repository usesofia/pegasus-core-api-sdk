/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateInstallmentFinancialRecordRequestBodyDto,
  ExceptionResponseEntity,
  InstallmentFinancialRecordDto,
  InstallmentFinancialRecordsPageDto,
  PartialUpdateInstallmentFinancialRecordRequestBodyDto,
} from '../models/index';
import {
    CreateInstallmentFinancialRecordRequestBodyDtoFromJSON,
    CreateInstallmentFinancialRecordRequestBodyDtoToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    InstallmentFinancialRecordDtoFromJSON,
    InstallmentFinancialRecordDtoToJSON,
    InstallmentFinancialRecordsPageDtoFromJSON,
    InstallmentFinancialRecordsPageDtoToJSON,
    PartialUpdateInstallmentFinancialRecordRequestBodyDtoFromJSON,
    PartialUpdateInstallmentFinancialRecordRequestBodyDtoToJSON,
} from '../models/index';

export interface CreateInstallmentFinancialRecordRequest {
    createInstallmentFinancialRecordRequestBodyDto: CreateInstallmentFinancialRecordRequestBodyDto;
    populate?: string;
}

export interface FindAllInstallmentFinancialRecordsRequest {
    populate?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface FindByIdInstallmentFinancialRecordRequest {
    id: string;
    populate?: string;
}

export interface PartialUpdateInstallmentFinancialRecordRequest {
    id: string;
    partialUpdateInstallmentFinancialRecordRequestBodyDto: PartialUpdateInstallmentFinancialRecordRequestBodyDto;
    populate?: string;
}

export interface RemoveInstallmentFinancialRecordRequest {
    id: string;
}

/**
 * InstallmentFinancialRecordsApi - interface
 * 
 * @export
 * @interface InstallmentFinancialRecordsApiInterface
 */
export interface InstallmentFinancialRecordsApiInterface {
    /**
     * 
     * @summary Cria um novo lançamento financeiro parcelado.
     * @param {CreateInstallmentFinancialRecordRequestBodyDto} createInstallmentFinancialRecordRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentFinancialRecordsApiInterface
     */
    createInstallmentFinancialRecordRaw(requestParameters: CreateInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstallmentFinancialRecordDto>>;

    /**
     * Cria um novo lançamento financeiro parcelado.
     */
    createInstallmentFinancialRecord(requestParameters: CreateInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstallmentFinancialRecordDto>;

    /**
     * 
     * @summary Busca todos os lançamentos financeiros parcelados.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [textSearchTerm] Termo para busca por descrição do lançamento parcelado.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentFinancialRecordsApiInterface
     */
    findAllInstallmentFinancialRecordsRaw(requestParameters: FindAllInstallmentFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstallmentFinancialRecordsPageDto>>;

    /**
     * Busca todos os lançamentos financeiros parcelados.
     */
    findAllInstallmentFinancialRecords(requestParameters: FindAllInstallmentFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstallmentFinancialRecordsPageDto>;

    /**
     * 
     * @summary Busca um lançamento financeiro parcelado pelo identificador.
     * @param {string} id Identificador do lançamento financeiro parcelado.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentFinancialRecordsApiInterface
     */
    findByIdInstallmentFinancialRecordRaw(requestParameters: FindByIdInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstallmentFinancialRecordDto>>;

    /**
     * Busca um lançamento financeiro parcelado pelo identificador.
     */
    findByIdInstallmentFinancialRecord(requestParameters: FindByIdInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstallmentFinancialRecordDto>;

    /**
     * 
     * @summary Atualiza parcialmente um lançamento financeiro parcelado.
     * @param {string} id Identificador do lançamento financeiro parcelado.
     * @param {PartialUpdateInstallmentFinancialRecordRequestBodyDto} partialUpdateInstallmentFinancialRecordRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentFinancialRecordsApiInterface
     */
    partialUpdateInstallmentFinancialRecordRaw(requestParameters: PartialUpdateInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstallmentFinancialRecordDto>>;

    /**
     * Atualiza parcialmente um lançamento financeiro parcelado.
     */
    partialUpdateInstallmentFinancialRecord(requestParameters: PartialUpdateInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstallmentFinancialRecordDto>;

    /**
     * 
     * @summary Remove um lançamento financeiro parcelado.
     * @param {string} id Identificador do lançamento financeiro parcelado.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentFinancialRecordsApiInterface
     */
    removeInstallmentFinancialRecordRaw(requestParameters: RemoveInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove um lançamento financeiro parcelado.
     */
    removeInstallmentFinancialRecord(requestParameters: RemoveInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class InstallmentFinancialRecordsApi extends runtime.BaseAPI implements InstallmentFinancialRecordsApiInterface {

    /**
     * Cria um novo lançamento financeiro parcelado.
     */
    async createInstallmentFinancialRecordRaw(requestParameters: CreateInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstallmentFinancialRecordDto>> {
        if (requestParameters['createInstallmentFinancialRecordRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createInstallmentFinancialRecordRequestBodyDto',
                'Required parameter "createInstallmentFinancialRecordRequestBodyDto" was null or undefined when calling createInstallmentFinancialRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/external/installment-financial-records`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInstallmentFinancialRecordRequestBodyDtoToJSON(requestParameters['createInstallmentFinancialRecordRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallmentFinancialRecordDtoFromJSON(jsonValue));
    }

    /**
     * Cria um novo lançamento financeiro parcelado.
     */
    async createInstallmentFinancialRecord(requestParameters: CreateInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstallmentFinancialRecordDto> {
        const response = await this.createInstallmentFinancialRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todos os lançamentos financeiros parcelados.
     */
    async findAllInstallmentFinancialRecordsRaw(requestParameters: FindAllInstallmentFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstallmentFinancialRecordsPageDto>> {
        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['textSearchTerm'] != null) {
            queryParameters['textSearchTerm'] = requestParameters['textSearchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external/installment-financial-records`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallmentFinancialRecordsPageDtoFromJSON(jsonValue));
    }

    /**
     * Busca todos os lançamentos financeiros parcelados.
     */
    async findAllInstallmentFinancialRecords(requestParameters: FindAllInstallmentFinancialRecordsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstallmentFinancialRecordsPageDto> {
        const response = await this.findAllInstallmentFinancialRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca um lançamento financeiro parcelado pelo identificador.
     */
    async findByIdInstallmentFinancialRecordRaw(requestParameters: FindByIdInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstallmentFinancialRecordDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findByIdInstallmentFinancialRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external/installment-financial-records/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallmentFinancialRecordDtoFromJSON(jsonValue));
    }

    /**
     * Busca um lançamento financeiro parcelado pelo identificador.
     */
    async findByIdInstallmentFinancialRecord(requestParameters: FindByIdInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstallmentFinancialRecordDto> {
        const response = await this.findByIdInstallmentFinancialRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Atualiza parcialmente um lançamento financeiro parcelado.
     */
    async partialUpdateInstallmentFinancialRecordRaw(requestParameters: PartialUpdateInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstallmentFinancialRecordDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling partialUpdateInstallmentFinancialRecord().'
            );
        }

        if (requestParameters['partialUpdateInstallmentFinancialRecordRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'partialUpdateInstallmentFinancialRecordRequestBodyDto',
                'Required parameter "partialUpdateInstallmentFinancialRecordRequestBodyDto" was null or undefined when calling partialUpdateInstallmentFinancialRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/external/installment-financial-records/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PartialUpdateInstallmentFinancialRecordRequestBodyDtoToJSON(requestParameters['partialUpdateInstallmentFinancialRecordRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallmentFinancialRecordDtoFromJSON(jsonValue));
    }

    /**
     * Atualiza parcialmente um lançamento financeiro parcelado.
     */
    async partialUpdateInstallmentFinancialRecord(requestParameters: PartialUpdateInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstallmentFinancialRecordDto> {
        const response = await this.partialUpdateInstallmentFinancialRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove um lançamento financeiro parcelado.
     */
    async removeInstallmentFinancialRecordRaw(requestParameters: RemoveInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeInstallmentFinancialRecord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external/installment-financial-records/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove um lançamento financeiro parcelado.
     */
    async removeInstallmentFinancialRecord(requestParameters: RemoveInstallmentFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeInstallmentFinancialRecordRaw(requestParameters, initOverrides);
    }

}
