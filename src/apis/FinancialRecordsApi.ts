/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateFinancialRecordRequestBodyDto,
  CreateManyFinancialRecordsRequestBodyDto,
  ExceptionResponseEntity,
  FinancialRecordDto,
  FinancialRecordsPageDto,
  PartialUpdateFinancialRecordRequestBodyDto,
  RemoveFinancialRecordRequestBodyDto,
} from '../models/index';
import {
    CreateFinancialRecordRequestBodyDtoFromJSON,
    CreateFinancialRecordRequestBodyDtoToJSON,
    CreateManyFinancialRecordsRequestBodyDtoFromJSON,
    CreateManyFinancialRecordsRequestBodyDtoToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    FinancialRecordDtoFromJSON,
    FinancialRecordDtoToJSON,
    FinancialRecordsPageDtoFromJSON,
    FinancialRecordsPageDtoToJSON,
    PartialUpdateFinancialRecordRequestBodyDtoFromJSON,
    PartialUpdateFinancialRecordRequestBodyDtoToJSON,
    RemoveFinancialRecordRequestBodyDtoFromJSON,
    RemoveFinancialRecordRequestBodyDtoToJSON,
} from '../models/index';

export interface CreateFinancialRecordRequest {
    createFinancialRecordRequestBodyDto: CreateFinancialRecordRequestBodyDto;
    populate?: string;
}

export interface CreateManyFinancialRecordsRequest {
    createManyFinancialRecordsRequestBodyDto: CreateManyFinancialRecordsRequestBodyDto;
}

export interface FindAllFinancialRecordsRequest {
    sortOrder?: string;
    sortBy?: FindAllFinancialRecordsSortByEnum;
    account?: string;
    reconciled?: boolean;
    completed?: boolean;
    tags?: string;
    createdAtTo?: string;
    createdAtFrom?: string;
    cashDateTo?: string;
    cashDateFrom?: string;
    competenceDateTo?: string;
    competenceDateFrom?: string;
    subcategory?: string;
    contact?: string;
    dueDateTo?: string;
    dueDateFrom?: string;
    amountTo?: string;
    amountFrom?: string;
    direction?: string;
    ids?: string;
    populate?: string;
    semanticSearchTermInBase64?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface FindByIdFinancialRecordRequest {
    id: string;
    populate?: string;
}

export interface PartialUpdateFinancialRecordRequest {
    id: string;
    partialUpdateFinancialRecordRequestBodyDto: PartialUpdateFinancialRecordRequestBodyDto;
    populate?: string;
}

export interface RemoveFinancialRecordRequest {
    id: string;
    removeFinancialRecordRequestBodyDto: RemoveFinancialRecordRequestBodyDto;
}

export interface SystemCreateManyFinancialRecordsRequest {
    organizationId: string;
    createManyFinancialRecordsRequestBodyDto: CreateManyFinancialRecordsRequestBodyDto;
}

export interface SystemFindAllFinancialRecordsRequest {
    ownerOrganizationId: string;
    readPreference?: SystemFindAllFinancialRecordsReadPreferenceEnum;
    sortOrder?: string;
    sortBy?: SystemFindAllFinancialRecordsSortByEnum;
    account?: string;
    reconciled?: boolean;
    completed?: boolean;
    tags?: string;
    createdAtTo?: string;
    createdAtFrom?: string;
    cashDateTo?: string;
    cashDateFrom?: string;
    competenceDateTo?: string;
    competenceDateFrom?: string;
    subcategory?: string;
    contact?: string;
    dueDateTo?: string;
    dueDateFrom?: string;
    amountTo?: string;
    amountFrom?: string;
    direction?: string;
    ids?: string;
    populate?: string;
    semanticSearchTermInBase64?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface SystemFindByIdFinancialRecordRequest {
    organizationId: string;
    financialRecordId: string;
    populate?: string;
}

/**
 * FinancialRecordsApi - interface
 * 
 * @export
 * @interface FinancialRecordsApiInterface
 */
export interface FinancialRecordsApiInterface {
    /**
     * 
     * @summary Cria um novo lançamento financeiro.
     * @param {CreateFinancialRecordRequestBodyDto} createFinancialRecordRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsApiInterface
     */
    createFinancialRecordRaw(requestParameters: CreateFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordDto>>;

    /**
     * Cria um novo lançamento financeiro.
     */
    createFinancialRecord(requestParameters: CreateFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordDto>;

    /**
     * 
     * @summary Cria múltiplos lançamentos financeiros.
     * @param {CreateManyFinancialRecordsRequestBodyDto} createManyFinancialRecordsRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsApiInterface
     */
    createManyFinancialRecordsRaw(requestParameters: CreateManyFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FinancialRecordDto>>>;

    /**
     * Cria múltiplos lançamentos financeiros.
     */
    createManyFinancialRecords(requestParameters: CreateManyFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FinancialRecordDto>>;

    /**
     * 
     * @summary Busca todos os lançamentos financeiros.
     * @param {string} [sortOrder] Ordem de ordenação dos lançamentos financeiros.
     * @param {'direction' | 'dueDate' | 'contact' | 'description' | 'subcategory' | 'amount' | 'competenceDate' | 'cashDate' | 'createdAt'} [sortBy] Campo para ordenação dos lançamentos financeiros.
     * @param {string} [account] Conta do lançamento financeiro.
     * @param {boolean} [reconciled] Indica se o lançamento financeiro foi reconciliado.
     * @param {boolean} [completed] Indica se o lançamento financeiro foi completado.
     * @param {string} [tags] Tags do lançamento financeiro.
     * @param {string} [createdAtTo] Data de criação final.
     * @param {string} [createdAtFrom] Data de criação inicial.
     * @param {string} [cashDateTo] Data de pagamento final.
     * @param {string} [cashDateFrom] Data de pagamento inicial.
     * @param {string} [competenceDateTo] Data de competência final.
     * @param {string} [competenceDateFrom] Data de competência inicial.
     * @param {string} [subcategory] Subcategoria do lançamento financeiro.
     * @param {string} [contact] Contato do lançamento financeiro.
     * @param {string} [dueDateTo] Data de vencimento final.
     * @param {string} [dueDateFrom] Data de vencimento inicial.
     * @param {string} [amountTo] Valor do lançamento financeiro máximo.
     * @param {string} [amountFrom] Valor do lançamento financeiro mínimo.
     * @param {string} [direction] Direção do lançamento financeiro.
     * @param {string} [ids] Lista de IDs de lançamentos financeiros para filtrar separados por vírgula.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [semanticSearchTermInBase64] Termo para busca semântica.
     * @param {string} [textSearchTerm] Termo para busca textual.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsApiInterface
     */
    findAllFinancialRecordsRaw(requestParameters: FindAllFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordsPageDto>>;

    /**
     * Busca todos os lançamentos financeiros.
     */
    findAllFinancialRecords(requestParameters: FindAllFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordsPageDto>;

    /**
     * 
     * @summary Busca um lançamento financeiro pelo identificador.
     * @param {string} id Identificador do lançamento financeiro.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsApiInterface
     */
    findByIdFinancialRecordRaw(requestParameters: FindByIdFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordDto>>;

    /**
     * Busca um lançamento financeiro pelo identificador.
     */
    findByIdFinancialRecord(requestParameters: FindByIdFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordDto>;

    /**
     * 
     * @summary Atualiza parcialmente um lançamento financeiro.
     * @param {string} id Identificador do lançamento financeiro.
     * @param {PartialUpdateFinancialRecordRequestBodyDto} partialUpdateFinancialRecordRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsApiInterface
     */
    partialUpdateFinancialRecordRaw(requestParameters: PartialUpdateFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordDto>>;

    /**
     * Atualiza parcialmente um lançamento financeiro.
     */
    partialUpdateFinancialRecord(requestParameters: PartialUpdateFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordDto>;

    /**
     * 
     * @summary Remove um lançamento financeiro.
     * @param {string} id Identificador do lançamento financeiro.
     * @param {RemoveFinancialRecordRequestBodyDto} removeFinancialRecordRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsApiInterface
     */
    removeFinancialRecordRaw(requestParameters: RemoveFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove um lançamento financeiro.
     */
    removeFinancialRecord(requestParameters: RemoveFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Cria múltiplos lançamentos financeiros.
     * @param {string} organizationId Identificador da organização.
     * @param {CreateManyFinancialRecordsRequestBodyDto} createManyFinancialRecordsRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsApiInterface
     */
    systemCreateManyFinancialRecordsRaw(requestParameters: SystemCreateManyFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FinancialRecordDto>>>;

    /**
     * Cria múltiplos lançamentos financeiros.
     */
    systemCreateManyFinancialRecords(requestParameters: SystemCreateManyFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FinancialRecordDto>>;

    /**
     * 
     * @summary Busca todos os lançamentos financeiros pelo sistema.
     * @param {string} ownerOrganizationId Identificador da organização proprietária dos lançamentos financeiros.
     * @param {'primary' | 'primaryPreferred' | 'secondary' | 'secondaryPreferred' | 'nearest'} [readPreference] Preferência de leitura dos lançamentos financeiros.
     * @param {string} [sortOrder] Ordem de ordenação dos lançamentos financeiros.
     * @param {'direction' | 'dueDate' | 'contact' | 'description' | 'subcategory' | 'amount' | 'competenceDate' | 'cashDate' | 'createdAt'} [sortBy] Campo para ordenação dos lançamentos financeiros.
     * @param {string} [account] Conta do lançamento financeiro.
     * @param {boolean} [reconciled] Indica se o lançamento financeiro foi reconciliado.
     * @param {boolean} [completed] Indica se o lançamento financeiro foi completado.
     * @param {string} [tags] Tags do lançamento financeiro.
     * @param {string} [createdAtTo] Data de criação final.
     * @param {string} [createdAtFrom] Data de criação inicial.
     * @param {string} [cashDateTo] Data de pagamento final.
     * @param {string} [cashDateFrom] Data de pagamento inicial.
     * @param {string} [competenceDateTo] Data de competência final.
     * @param {string} [competenceDateFrom] Data de competência inicial.
     * @param {string} [subcategory] Subcategoria do lançamento financeiro.
     * @param {string} [contact] Contato do lançamento financeiro.
     * @param {string} [dueDateTo] Data de vencimento final.
     * @param {string} [dueDateFrom] Data de vencimento inicial.
     * @param {string} [amountTo] Valor do lançamento financeiro máximo.
     * @param {string} [amountFrom] Valor do lançamento financeiro mínimo.
     * @param {string} [direction] Direção do lançamento financeiro.
     * @param {string} [ids] Lista de IDs de lançamentos financeiros para filtrar separados por vírgula.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [semanticSearchTermInBase64] Termo para busca semântica.
     * @param {string} [textSearchTerm] Termo para busca textual.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsApiInterface
     */
    systemFindAllFinancialRecordsRaw(requestParameters: SystemFindAllFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordsPageDto>>;

    /**
     * Busca todos os lançamentos financeiros pelo sistema.
     */
    systemFindAllFinancialRecords(requestParameters: SystemFindAllFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordsPageDto>;

    /**
     * 
     * @summary Busca um lançamento financeiro pelo identificador.
     * @param {string} organizationId Identificador da organização.
     * @param {string} financialRecordId Identificador do lançamento financeiro.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsApiInterface
     */
    systemFindByIdFinancialRecordRaw(requestParameters: SystemFindByIdFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordDto>>;

    /**
     * Busca um lançamento financeiro pelo identificador.
     */
    systemFindByIdFinancialRecord(requestParameters: SystemFindByIdFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordDto>;

}

/**
 * 
 */
export class FinancialRecordsApi extends runtime.BaseAPI implements FinancialRecordsApiInterface {

    /**
     * Cria um novo lançamento financeiro.
     */
    async createFinancialRecordRaw(requestParameters: CreateFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordDto>> {
        if (requestParameters['createFinancialRecordRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createFinancialRecordRequestBodyDto',
                'Required parameter "createFinancialRecordRequestBodyDto" was null or undefined when calling createFinancialRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/financial-records`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFinancialRecordRequestBodyDtoToJSON(requestParameters['createFinancialRecordRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordDtoFromJSON(jsonValue));
    }

    /**
     * Cria um novo lançamento financeiro.
     */
    async createFinancialRecord(requestParameters: CreateFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordDto> {
        const response = await this.createFinancialRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cria múltiplos lançamentos financeiros.
     */
    async createManyFinancialRecordsRaw(requestParameters: CreateManyFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FinancialRecordDto>>> {
        if (requestParameters['createManyFinancialRecordsRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createManyFinancialRecordsRequestBodyDto',
                'Required parameter "createManyFinancialRecordsRequestBodyDto" was null or undefined when calling createManyFinancialRecords().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/financial-records/many`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateManyFinancialRecordsRequestBodyDtoToJSON(requestParameters['createManyFinancialRecordsRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FinancialRecordDtoFromJSON));
    }

    /**
     * Cria múltiplos lançamentos financeiros.
     */
    async createManyFinancialRecords(requestParameters: CreateManyFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FinancialRecordDto>> {
        const response = await this.createManyFinancialRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todos os lançamentos financeiros.
     */
    async findAllFinancialRecordsRaw(requestParameters: FindAllFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordsPageDto>> {
        const queryParameters: any = {};

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['account'] != null) {
            queryParameters['account'] = requestParameters['account'];
        }

        if (requestParameters['reconciled'] != null) {
            queryParameters['reconciled'] = requestParameters['reconciled'];
        }

        if (requestParameters['completed'] != null) {
            queryParameters['completed'] = requestParameters['completed'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['createdAtTo'] != null) {
            queryParameters['createdAtTo'] = requestParameters['createdAtTo'];
        }

        if (requestParameters['createdAtFrom'] != null) {
            queryParameters['createdAtFrom'] = requestParameters['createdAtFrom'];
        }

        if (requestParameters['cashDateTo'] != null) {
            queryParameters['cashDateTo'] = requestParameters['cashDateTo'];
        }

        if (requestParameters['cashDateFrom'] != null) {
            queryParameters['cashDateFrom'] = requestParameters['cashDateFrom'];
        }

        if (requestParameters['competenceDateTo'] != null) {
            queryParameters['competenceDateTo'] = requestParameters['competenceDateTo'];
        }

        if (requestParameters['competenceDateFrom'] != null) {
            queryParameters['competenceDateFrom'] = requestParameters['competenceDateFrom'];
        }

        if (requestParameters['subcategory'] != null) {
            queryParameters['subcategory'] = requestParameters['subcategory'];
        }

        if (requestParameters['contact'] != null) {
            queryParameters['contact'] = requestParameters['contact'];
        }

        if (requestParameters['dueDateTo'] != null) {
            queryParameters['dueDateTo'] = requestParameters['dueDateTo'];
        }

        if (requestParameters['dueDateFrom'] != null) {
            queryParameters['dueDateFrom'] = requestParameters['dueDateFrom'];
        }

        if (requestParameters['amountTo'] != null) {
            queryParameters['amountTo'] = requestParameters['amountTo'];
        }

        if (requestParameters['amountFrom'] != null) {
            queryParameters['amountFrom'] = requestParameters['amountFrom'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['semanticSearchTermInBase64'] != null) {
            queryParameters['semanticSearchTermInBase64'] = requestParameters['semanticSearchTermInBase64'];
        }

        if (requestParameters['textSearchTerm'] != null) {
            queryParameters['textSearchTerm'] = requestParameters['textSearchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/financial-records`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordsPageDtoFromJSON(jsonValue));
    }

    /**
     * Busca todos os lançamentos financeiros.
     */
    async findAllFinancialRecords(requestParameters: FindAllFinancialRecordsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordsPageDto> {
        const response = await this.findAllFinancialRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca um lançamento financeiro pelo identificador.
     */
    async findByIdFinancialRecordRaw(requestParameters: FindByIdFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findByIdFinancialRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/financial-records/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordDtoFromJSON(jsonValue));
    }

    /**
     * Busca um lançamento financeiro pelo identificador.
     */
    async findByIdFinancialRecord(requestParameters: FindByIdFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordDto> {
        const response = await this.findByIdFinancialRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Atualiza parcialmente um lançamento financeiro.
     */
    async partialUpdateFinancialRecordRaw(requestParameters: PartialUpdateFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling partialUpdateFinancialRecord().'
            );
        }

        if (requestParameters['partialUpdateFinancialRecordRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'partialUpdateFinancialRecordRequestBodyDto',
                'Required parameter "partialUpdateFinancialRecordRequestBodyDto" was null or undefined when calling partialUpdateFinancialRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/financial-records/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PartialUpdateFinancialRecordRequestBodyDtoToJSON(requestParameters['partialUpdateFinancialRecordRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordDtoFromJSON(jsonValue));
    }

    /**
     * Atualiza parcialmente um lançamento financeiro.
     */
    async partialUpdateFinancialRecord(requestParameters: PartialUpdateFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordDto> {
        const response = await this.partialUpdateFinancialRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove um lançamento financeiro.
     */
    async removeFinancialRecordRaw(requestParameters: RemoveFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeFinancialRecord().'
            );
        }

        if (requestParameters['removeFinancialRecordRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'removeFinancialRecordRequestBodyDto',
                'Required parameter "removeFinancialRecordRequestBodyDto" was null or undefined when calling removeFinancialRecord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/financial-records/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveFinancialRecordRequestBodyDtoToJSON(requestParameters['removeFinancialRecordRequestBodyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove um lançamento financeiro.
     */
    async removeFinancialRecord(requestParameters: RemoveFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeFinancialRecordRaw(requestParameters, initOverrides);
    }

    /**
     * Cria múltiplos lançamentos financeiros.
     */
    async systemCreateManyFinancialRecordsRaw(requestParameters: SystemCreateManyFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FinancialRecordDto>>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling systemCreateManyFinancialRecords().'
            );
        }

        if (requestParameters['createManyFinancialRecordsRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createManyFinancialRecordsRequestBodyDto',
                'Required parameter "createManyFinancialRecordsRequestBodyDto" was null or undefined when calling systemCreateManyFinancialRecords().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/internal/organizations/{organizationId}/financial-records/many`;
        urlPath = urlPath.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateManyFinancialRecordsRequestBodyDtoToJSON(requestParameters['createManyFinancialRecordsRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FinancialRecordDtoFromJSON));
    }

    /**
     * Cria múltiplos lançamentos financeiros.
     */
    async systemCreateManyFinancialRecords(requestParameters: SystemCreateManyFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FinancialRecordDto>> {
        const response = await this.systemCreateManyFinancialRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todos os lançamentos financeiros pelo sistema.
     */
    async systemFindAllFinancialRecordsRaw(requestParameters: SystemFindAllFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordsPageDto>> {
        if (requestParameters['ownerOrganizationId'] == null) {
            throw new runtime.RequiredError(
                'ownerOrganizationId',
                'Required parameter "ownerOrganizationId" was null or undefined when calling systemFindAllFinancialRecords().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['readPreference'] != null) {
            queryParameters['readPreference'] = requestParameters['readPreference'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['ownerOrganizationId'] != null) {
            queryParameters['ownerOrganizationId'] = requestParameters['ownerOrganizationId'];
        }

        if (requestParameters['account'] != null) {
            queryParameters['account'] = requestParameters['account'];
        }

        if (requestParameters['reconciled'] != null) {
            queryParameters['reconciled'] = requestParameters['reconciled'];
        }

        if (requestParameters['completed'] != null) {
            queryParameters['completed'] = requestParameters['completed'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['createdAtTo'] != null) {
            queryParameters['createdAtTo'] = requestParameters['createdAtTo'];
        }

        if (requestParameters['createdAtFrom'] != null) {
            queryParameters['createdAtFrom'] = requestParameters['createdAtFrom'];
        }

        if (requestParameters['cashDateTo'] != null) {
            queryParameters['cashDateTo'] = requestParameters['cashDateTo'];
        }

        if (requestParameters['cashDateFrom'] != null) {
            queryParameters['cashDateFrom'] = requestParameters['cashDateFrom'];
        }

        if (requestParameters['competenceDateTo'] != null) {
            queryParameters['competenceDateTo'] = requestParameters['competenceDateTo'];
        }

        if (requestParameters['competenceDateFrom'] != null) {
            queryParameters['competenceDateFrom'] = requestParameters['competenceDateFrom'];
        }

        if (requestParameters['subcategory'] != null) {
            queryParameters['subcategory'] = requestParameters['subcategory'];
        }

        if (requestParameters['contact'] != null) {
            queryParameters['contact'] = requestParameters['contact'];
        }

        if (requestParameters['dueDateTo'] != null) {
            queryParameters['dueDateTo'] = requestParameters['dueDateTo'];
        }

        if (requestParameters['dueDateFrom'] != null) {
            queryParameters['dueDateFrom'] = requestParameters['dueDateFrom'];
        }

        if (requestParameters['amountTo'] != null) {
            queryParameters['amountTo'] = requestParameters['amountTo'];
        }

        if (requestParameters['amountFrom'] != null) {
            queryParameters['amountFrom'] = requestParameters['amountFrom'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['semanticSearchTermInBase64'] != null) {
            queryParameters['semanticSearchTermInBase64'] = requestParameters['semanticSearchTermInBase64'];
        }

        if (requestParameters['textSearchTerm'] != null) {
            queryParameters['textSearchTerm'] = requestParameters['textSearchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/financial-records`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordsPageDtoFromJSON(jsonValue));
    }

    /**
     * Busca todos os lançamentos financeiros pelo sistema.
     */
    async systemFindAllFinancialRecords(requestParameters: SystemFindAllFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordsPageDto> {
        const response = await this.systemFindAllFinancialRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca um lançamento financeiro pelo identificador.
     */
    async systemFindByIdFinancialRecordRaw(requestParameters: SystemFindByIdFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordDto>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling systemFindByIdFinancialRecord().'
            );
        }

        if (requestParameters['financialRecordId'] == null) {
            throw new runtime.RequiredError(
                'financialRecordId',
                'Required parameter "financialRecordId" was null or undefined when calling systemFindByIdFinancialRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/organizations/{organizationId}/financial-records/{financialRecordId}`;
        urlPath = urlPath.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId'])));
        urlPath = urlPath.replace(`{${"financialRecordId"}}`, encodeURIComponent(String(requestParameters['financialRecordId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordDtoFromJSON(jsonValue));
    }

    /**
     * Busca um lançamento financeiro pelo identificador.
     */
    async systemFindByIdFinancialRecord(requestParameters: SystemFindByIdFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordDto> {
        const response = await this.systemFindByIdFinancialRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const FindAllFinancialRecordsSortByEnum = {
    Direction: 'direction',
    DueDate: 'dueDate',
    Contact: 'contact',
    Description: 'description',
    Subcategory: 'subcategory',
    Amount: 'amount',
    CompetenceDate: 'competenceDate',
    CashDate: 'cashDate',
    CreatedAt: 'createdAt'
} as const;
export type FindAllFinancialRecordsSortByEnum = typeof FindAllFinancialRecordsSortByEnum[keyof typeof FindAllFinancialRecordsSortByEnum];
/**
 * @export
 */
export const SystemFindAllFinancialRecordsReadPreferenceEnum = {
    Primary: 'primary',
    PrimaryPreferred: 'primaryPreferred',
    Secondary: 'secondary',
    SecondaryPreferred: 'secondaryPreferred',
    Nearest: 'nearest'
} as const;
export type SystemFindAllFinancialRecordsReadPreferenceEnum = typeof SystemFindAllFinancialRecordsReadPreferenceEnum[keyof typeof SystemFindAllFinancialRecordsReadPreferenceEnum];
/**
 * @export
 */
export const SystemFindAllFinancialRecordsSortByEnum = {
    Direction: 'direction',
    DueDate: 'dueDate',
    Contact: 'contact',
    Description: 'description',
    Subcategory: 'subcategory',
    Amount: 'amount',
    CompetenceDate: 'competenceDate',
    CashDate: 'cashDate',
    CreatedAt: 'createdAt'
} as const;
export type SystemFindAllFinancialRecordsSortByEnum = typeof SystemFindAllFinancialRecordsSortByEnum[keyof typeof SystemFindAllFinancialRecordsSortByEnum];
