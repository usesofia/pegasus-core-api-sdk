/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.12.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateFinancialRecordRadarItemRequestBodyDto,
  CreatedFinancialRecordRadarItemResultEntity,
  ExceptionResponseEntity,
  FinancialRecordRadarItemEntity,
  FinancialRecordRadarItemTagEntity,
  FinancialRecordRadarItemsPageDto,
  FinancialRecordsBulkCreateFilePreviewEntity,
  LinkFinancialRecordsRequestBodyDto,
  PartialUpdateFinancialRecordRadarItemRequestBodyDto,
  UnlinkFinancialRecordsRequestBodyDto,
} from '../models/index';
import {
    CreateFinancialRecordRadarItemRequestBodyDtoFromJSON,
    CreateFinancialRecordRadarItemRequestBodyDtoToJSON,
    CreatedFinancialRecordRadarItemResultEntityFromJSON,
    CreatedFinancialRecordRadarItemResultEntityToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    FinancialRecordRadarItemEntityFromJSON,
    FinancialRecordRadarItemEntityToJSON,
    FinancialRecordRadarItemTagEntityFromJSON,
    FinancialRecordRadarItemTagEntityToJSON,
    FinancialRecordRadarItemsPageDtoFromJSON,
    FinancialRecordRadarItemsPageDtoToJSON,
    FinancialRecordsBulkCreateFilePreviewEntityFromJSON,
    FinancialRecordsBulkCreateFilePreviewEntityToJSON,
    LinkFinancialRecordsRequestBodyDtoFromJSON,
    LinkFinancialRecordsRequestBodyDtoToJSON,
    PartialUpdateFinancialRecordRadarItemRequestBodyDtoFromJSON,
    PartialUpdateFinancialRecordRadarItemRequestBodyDtoToJSON,
    UnlinkFinancialRecordsRequestBodyDtoFromJSON,
    UnlinkFinancialRecordsRequestBodyDtoToJSON,
} from '../models/index';

export interface CreateFinancialRecordRadarItemRequest {
    createFinancialRecordRadarItemRequestBodyDto: CreateFinancialRecordRadarItemRequestBodyDto;
}

export interface FindAllFinancialRecordRadarItemsRequest {
    sortOrder?: string;
    sortBy?: string;
    hasAutoExecute?: boolean;
    populate?: string;
    nature?: FindAllFinancialRecordRadarItemsNatureEnum;
    origin?: FindAllFinancialRecordRadarItemsOriginEnum;
    status?: FindAllFinancialRecordRadarItemsStatusEnum;
    folder?: FindAllFinancialRecordRadarItemsFolderEnum;
    pageSize?: number;
    pageIndex?: number;
}

export interface FindByIdFinancialRecordRadarItemRequest {
    radarItemId: string;
    populate?: string;
}

export interface GetTagsForFinancialRecordRadarItemRequest {
    radarItemId: string;
}

export interface LinkFinancialRecordsToFinancialRecordRadarItemRequest {
    radarItemId: string;
    linkFinancialRecordsRequestBodyDto: LinkFinancialRecordsRequestBodyDto;
}

export interface PartialUpdateFinancialRecordRadarItemRequest {
    radarItemId: string;
    partialUpdateFinancialRecordRadarItemRequestBodyDto: PartialUpdateFinancialRecordRadarItemRequestBodyDto;
}

export interface PreviewBulkCreateFileRequest {
    radarItemId: string;
    limit?: number;
}

export interface SystemFindByIdFinancialRecordRadarItemRequest {
    organizationId: string;
    radarItemId: string;
    populate?: string;
}

export interface UnlinkFinancialRecordsFromFinancialRecordRadarItemRequest {
    radarItemId: string;
    unlinkFinancialRecordsRequestBodyDto: UnlinkFinancialRecordsRequestBodyDto;
}

/**
 * FinancialRecordRadarItemsApi - interface
 * 
 * @export
 * @interface FinancialRecordRadarItemsApiInterface
 */
export interface FinancialRecordRadarItemsApiInterface {
    /**
     * 
     * @summary Cria um novo registro de radar
     * @param {CreateFinancialRecordRadarItemRequestBodyDto} createFinancialRecordRadarItemRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordRadarItemsApiInterface
     */
    createFinancialRecordRadarItemRaw(requestParameters: CreateFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatedFinancialRecordRadarItemResultEntity>>;

    /**
     * Cria um novo registro de radar
     */
    createFinancialRecordRadarItem(requestParameters: CreateFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatedFinancialRecordRadarItemResultEntity>;

    /**
     * 
     * @summary Busca todos os registros do radar.
     * @param {string} [sortOrder] Ordem de ordenação.
     * @param {string} [sortBy] Campo de ordenação.
     * @param {boolean} [hasAutoExecute] Se possui auto-execute.
     * @param {string} [populate] População do registro.
     * @param {'WHATSAPP_MESSAGE' | 'EMAIL_MESSAGE'} [nature] Natureza do registro.
     * @param {'WHATSAPP_AGENT' | 'EMAIL_FORWARDING_INTEGRATION'} [origin] Origem do registro.
     * @param {'PENDING' | 'LINKED' | 'ARCHIVED'} [status] Status do registro.
     * @param {'MAIN' | 'SPAM'} [folder] Pasta do registro.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordRadarItemsApiInterface
     */
    findAllFinancialRecordRadarItemsRaw(requestParameters: FindAllFinancialRecordRadarItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordRadarItemsPageDto>>;

    /**
     * Busca todos os registros do radar.
     */
    findAllFinancialRecordRadarItems(requestParameters: FindAllFinancialRecordRadarItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordRadarItemsPageDto>;

    /**
     * 
     * @summary Busca um registro de radar pelo identificador.
     * @param {string} radarItemId Identificador do registro de radar
     * @param {string} [populate] População do registro.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordRadarItemsApiInterface
     */
    findByIdFinancialRecordRadarItemRaw(requestParameters: FindByIdFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordRadarItemEntity>>;

    /**
     * Busca um registro de radar pelo identificador.
     */
    findByIdFinancialRecordRadarItem(requestParameters: FindByIdFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordRadarItemEntity>;

    /**
     * 
     * @summary Obtém os tags para um registro de radar.
     * @param {string} radarItemId Identificador do registro de radar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordRadarItemsApiInterface
     */
    getTagsForFinancialRecordRadarItemRaw(requestParameters: GetTagsForFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FinancialRecordRadarItemTagEntity>>>;

    /**
     * Obtém os tags para um registro de radar.
     */
    getTagsForFinancialRecordRadarItem(requestParameters: GetTagsForFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FinancialRecordRadarItemTagEntity>>;

    /**
     * Adiciona vínculos entre um registro de radar e múltiplos registros financeiros, atualizando ambos os lados da relação.
     * @summary Vincula registros financeiros a um registro de radar
     * @param {string} radarItemId Identificador do registro de radar
     * @param {LinkFinancialRecordsRequestBodyDto} linkFinancialRecordsRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordRadarItemsApiInterface
     */
    linkFinancialRecordsToFinancialRecordRadarItemRaw(requestParameters: LinkFinancialRecordsToFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordRadarItemEntity>>;

    /**
     * Adiciona vínculos entre um registro de radar e múltiplos registros financeiros, atualizando ambos os lados da relação.
     * Vincula registros financeiros a um registro de radar
     */
    linkFinancialRecordsToFinancialRecordRadarItem(requestParameters: LinkFinancialRecordsToFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordRadarItemEntity>;

    /**
     * Atualiza parcialmente um registro de radar existente.
     * @summary Atualiza parcialmente um registro de radar
     * @param {string} radarItemId Identificador do registro de radar
     * @param {PartialUpdateFinancialRecordRadarItemRequestBodyDto} partialUpdateFinancialRecordRadarItemRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordRadarItemsApiInterface
     */
    partialUpdateFinancialRecordRadarItemRaw(requestParameters: PartialUpdateFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordRadarItemEntity>>;

    /**
     * Atualiza parcialmente um registro de radar existente.
     * Atualiza parcialmente um registro de radar
     */
    partialUpdateFinancialRecordRadarItem(requestParameters: PartialUpdateFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordRadarItemEntity>;

    /**
     * 
     * @summary Obtém o preview de um arquivo .csv para criação em lote.
     * @param {string} radarItemId Identificador do registro de radar
     * @param {number} [limit] Limite de registros a serem retornados.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordRadarItemsApiInterface
     */
    previewBulkCreateFileRaw(requestParameters: PreviewBulkCreateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordsBulkCreateFilePreviewEntity>>;

    /**
     * Obtém o preview de um arquivo .csv para criação em lote.
     */
    previewBulkCreateFile(requestParameters: PreviewBulkCreateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordsBulkCreateFilePreviewEntity>;

    /**
     * 
     * @summary Busca um registro de radar pelo identificador.
     * @param {string} organizationId Identificador da organização
     * @param {string} radarItemId Identificador do registro de radar
     * @param {string} [populate] População do registro.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordRadarItemsApiInterface
     */
    systemFindByIdFinancialRecordRadarItemRaw(requestParameters: SystemFindByIdFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordRadarItemEntity>>;

    /**
     * Busca um registro de radar pelo identificador.
     */
    systemFindByIdFinancialRecordRadarItem(requestParameters: SystemFindByIdFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordRadarItemEntity>;

    /**
     * Remove vínculos entre um registro de radar e registros financeiros, atualizando ambos os lados da relação.
     * @summary Desvincula registros financeiros de um registro de radar
     * @param {string} radarItemId Identificador do registro de radar
     * @param {UnlinkFinancialRecordsRequestBodyDto} unlinkFinancialRecordsRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordRadarItemsApiInterface
     */
    unlinkFinancialRecordsFromFinancialRecordRadarItemRaw(requestParameters: UnlinkFinancialRecordsFromFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordRadarItemEntity>>;

    /**
     * Remove vínculos entre um registro de radar e registros financeiros, atualizando ambos os lados da relação.
     * Desvincula registros financeiros de um registro de radar
     */
    unlinkFinancialRecordsFromFinancialRecordRadarItem(requestParameters: UnlinkFinancialRecordsFromFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordRadarItemEntity>;

}

/**
 * 
 */
export class FinancialRecordRadarItemsApi extends runtime.BaseAPI implements FinancialRecordRadarItemsApiInterface {

    /**
     * Cria um novo registro de radar
     */
    async createFinancialRecordRadarItemRaw(requestParameters: CreateFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatedFinancialRecordRadarItemResultEntity>> {
        if (requestParameters['createFinancialRecordRadarItemRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createFinancialRecordRadarItemRequestBodyDto',
                'Required parameter "createFinancialRecordRadarItemRequestBodyDto" was null or undefined when calling createFinancialRecordRadarItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/financial-records/radar/items`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFinancialRecordRadarItemRequestBodyDtoToJSON(requestParameters['createFinancialRecordRadarItemRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatedFinancialRecordRadarItemResultEntityFromJSON(jsonValue));
    }

    /**
     * Cria um novo registro de radar
     */
    async createFinancialRecordRadarItem(requestParameters: CreateFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatedFinancialRecordRadarItemResultEntity> {
        const response = await this.createFinancialRecordRadarItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todos os registros do radar.
     */
    async findAllFinancialRecordRadarItemsRaw(requestParameters: FindAllFinancialRecordRadarItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordRadarItemsPageDto>> {
        const queryParameters: any = {};

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['hasAutoExecute'] != null) {
            queryParameters['hasAutoExecute'] = requestParameters['hasAutoExecute'];
        }

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['nature'] != null) {
            queryParameters['nature'] = requestParameters['nature'];
        }

        if (requestParameters['origin'] != null) {
            queryParameters['origin'] = requestParameters['origin'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['folder'] != null) {
            queryParameters['folder'] = requestParameters['folder'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/financial-records/radar/items`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordRadarItemsPageDtoFromJSON(jsonValue));
    }

    /**
     * Busca todos os registros do radar.
     */
    async findAllFinancialRecordRadarItems(requestParameters: FindAllFinancialRecordRadarItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordRadarItemsPageDto> {
        const response = await this.findAllFinancialRecordRadarItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca um registro de radar pelo identificador.
     */
    async findByIdFinancialRecordRadarItemRaw(requestParameters: FindByIdFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordRadarItemEntity>> {
        if (requestParameters['radarItemId'] == null) {
            throw new runtime.RequiredError(
                'radarItemId',
                'Required parameter "radarItemId" was null or undefined when calling findByIdFinancialRecordRadarItem().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/financial-records/radar/items/{radarItemId}`;
        urlPath = urlPath.replace(`{${"radarItemId"}}`, encodeURIComponent(String(requestParameters['radarItemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordRadarItemEntityFromJSON(jsonValue));
    }

    /**
     * Busca um registro de radar pelo identificador.
     */
    async findByIdFinancialRecordRadarItem(requestParameters: FindByIdFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordRadarItemEntity> {
        const response = await this.findByIdFinancialRecordRadarItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Obtém os tags para um registro de radar.
     */
    async getTagsForFinancialRecordRadarItemRaw(requestParameters: GetTagsForFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FinancialRecordRadarItemTagEntity>>> {
        if (requestParameters['radarItemId'] == null) {
            throw new runtime.RequiredError(
                'radarItemId',
                'Required parameter "radarItemId" was null or undefined when calling getTagsForFinancialRecordRadarItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/financial-records/radar/items/{radarItemId}/tags`;
        urlPath = urlPath.replace(`{${"radarItemId"}}`, encodeURIComponent(String(requestParameters['radarItemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FinancialRecordRadarItemTagEntityFromJSON));
    }

    /**
     * Obtém os tags para um registro de radar.
     */
    async getTagsForFinancialRecordRadarItem(requestParameters: GetTagsForFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FinancialRecordRadarItemTagEntity>> {
        const response = await this.getTagsForFinancialRecordRadarItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adiciona vínculos entre um registro de radar e múltiplos registros financeiros, atualizando ambos os lados da relação.
     * Vincula registros financeiros a um registro de radar
     */
    async linkFinancialRecordsToFinancialRecordRadarItemRaw(requestParameters: LinkFinancialRecordsToFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordRadarItemEntity>> {
        if (requestParameters['radarItemId'] == null) {
            throw new runtime.RequiredError(
                'radarItemId',
                'Required parameter "radarItemId" was null or undefined when calling linkFinancialRecordsToFinancialRecordRadarItem().'
            );
        }

        if (requestParameters['linkFinancialRecordsRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'linkFinancialRecordsRequestBodyDto',
                'Required parameter "linkFinancialRecordsRequestBodyDto" was null or undefined when calling linkFinancialRecordsToFinancialRecordRadarItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/financial-records/radar/items/{radarItemId}/links`;
        urlPath = urlPath.replace(`{${"radarItemId"}}`, encodeURIComponent(String(requestParameters['radarItemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkFinancialRecordsRequestBodyDtoToJSON(requestParameters['linkFinancialRecordsRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordRadarItemEntityFromJSON(jsonValue));
    }

    /**
     * Adiciona vínculos entre um registro de radar e múltiplos registros financeiros, atualizando ambos os lados da relação.
     * Vincula registros financeiros a um registro de radar
     */
    async linkFinancialRecordsToFinancialRecordRadarItem(requestParameters: LinkFinancialRecordsToFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordRadarItemEntity> {
        const response = await this.linkFinancialRecordsToFinancialRecordRadarItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Atualiza parcialmente um registro de radar existente.
     * Atualiza parcialmente um registro de radar
     */
    async partialUpdateFinancialRecordRadarItemRaw(requestParameters: PartialUpdateFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordRadarItemEntity>> {
        if (requestParameters['radarItemId'] == null) {
            throw new runtime.RequiredError(
                'radarItemId',
                'Required parameter "radarItemId" was null or undefined when calling partialUpdateFinancialRecordRadarItem().'
            );
        }

        if (requestParameters['partialUpdateFinancialRecordRadarItemRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'partialUpdateFinancialRecordRadarItemRequestBodyDto',
                'Required parameter "partialUpdateFinancialRecordRadarItemRequestBodyDto" was null or undefined when calling partialUpdateFinancialRecordRadarItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/financial-records/radar/items/{radarItemId}`;
        urlPath = urlPath.replace(`{${"radarItemId"}}`, encodeURIComponent(String(requestParameters['radarItemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PartialUpdateFinancialRecordRadarItemRequestBodyDtoToJSON(requestParameters['partialUpdateFinancialRecordRadarItemRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordRadarItemEntityFromJSON(jsonValue));
    }

    /**
     * Atualiza parcialmente um registro de radar existente.
     * Atualiza parcialmente um registro de radar
     */
    async partialUpdateFinancialRecordRadarItem(requestParameters: PartialUpdateFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordRadarItemEntity> {
        const response = await this.partialUpdateFinancialRecordRadarItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Obtém o preview de um arquivo .csv para criação em lote.
     */
    async previewBulkCreateFileRaw(requestParameters: PreviewBulkCreateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordsBulkCreateFilePreviewEntity>> {
        if (requestParameters['radarItemId'] == null) {
            throw new runtime.RequiredError(
                'radarItemId',
                'Required parameter "radarItemId" was null or undefined when calling previewBulkCreateFile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/financial-records/radar/items/{radarItemId}/preview-bulk-create-file`;
        urlPath = urlPath.replace(`{${"radarItemId"}}`, encodeURIComponent(String(requestParameters['radarItemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordsBulkCreateFilePreviewEntityFromJSON(jsonValue));
    }

    /**
     * Obtém o preview de um arquivo .csv para criação em lote.
     */
    async previewBulkCreateFile(requestParameters: PreviewBulkCreateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordsBulkCreateFilePreviewEntity> {
        const response = await this.previewBulkCreateFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca um registro de radar pelo identificador.
     */
    async systemFindByIdFinancialRecordRadarItemRaw(requestParameters: SystemFindByIdFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordRadarItemEntity>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling systemFindByIdFinancialRecordRadarItem().'
            );
        }

        if (requestParameters['radarItemId'] == null) {
            throw new runtime.RequiredError(
                'radarItemId',
                'Required parameter "radarItemId" was null or undefined when calling systemFindByIdFinancialRecordRadarItem().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/organizations/{organizationId}/financial-records/radar/items/{radarItemId}`;
        urlPath = urlPath.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId'])));
        urlPath = urlPath.replace(`{${"radarItemId"}}`, encodeURIComponent(String(requestParameters['radarItemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordRadarItemEntityFromJSON(jsonValue));
    }

    /**
     * Busca um registro de radar pelo identificador.
     */
    async systemFindByIdFinancialRecordRadarItem(requestParameters: SystemFindByIdFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordRadarItemEntity> {
        const response = await this.systemFindByIdFinancialRecordRadarItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove vínculos entre um registro de radar e registros financeiros, atualizando ambos os lados da relação.
     * Desvincula registros financeiros de um registro de radar
     */
    async unlinkFinancialRecordsFromFinancialRecordRadarItemRaw(requestParameters: UnlinkFinancialRecordsFromFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialRecordRadarItemEntity>> {
        if (requestParameters['radarItemId'] == null) {
            throw new runtime.RequiredError(
                'radarItemId',
                'Required parameter "radarItemId" was null or undefined when calling unlinkFinancialRecordsFromFinancialRecordRadarItem().'
            );
        }

        if (requestParameters['unlinkFinancialRecordsRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'unlinkFinancialRecordsRequestBodyDto',
                'Required parameter "unlinkFinancialRecordsRequestBodyDto" was null or undefined when calling unlinkFinancialRecordsFromFinancialRecordRadarItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/financial-records/radar/items/{radarItemId}/unlink`;
        urlPath = urlPath.replace(`{${"radarItemId"}}`, encodeURIComponent(String(requestParameters['radarItemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnlinkFinancialRecordsRequestBodyDtoToJSON(requestParameters['unlinkFinancialRecordsRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialRecordRadarItemEntityFromJSON(jsonValue));
    }

    /**
     * Remove vínculos entre um registro de radar e registros financeiros, atualizando ambos os lados da relação.
     * Desvincula registros financeiros de um registro de radar
     */
    async unlinkFinancialRecordsFromFinancialRecordRadarItem(requestParameters: UnlinkFinancialRecordsFromFinancialRecordRadarItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialRecordRadarItemEntity> {
        const response = await this.unlinkFinancialRecordsFromFinancialRecordRadarItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const FindAllFinancialRecordRadarItemsNatureEnum = {
    WhatsappMessage: 'WHATSAPP_MESSAGE',
    EmailMessage: 'EMAIL_MESSAGE'
} as const;
export type FindAllFinancialRecordRadarItemsNatureEnum = typeof FindAllFinancialRecordRadarItemsNatureEnum[keyof typeof FindAllFinancialRecordRadarItemsNatureEnum];
/**
 * @export
 */
export const FindAllFinancialRecordRadarItemsOriginEnum = {
    WhatsappAgent: 'WHATSAPP_AGENT',
    EmailForwardingIntegration: 'EMAIL_FORWARDING_INTEGRATION'
} as const;
export type FindAllFinancialRecordRadarItemsOriginEnum = typeof FindAllFinancialRecordRadarItemsOriginEnum[keyof typeof FindAllFinancialRecordRadarItemsOriginEnum];
/**
 * @export
 */
export const FindAllFinancialRecordRadarItemsStatusEnum = {
    Pending: 'PENDING',
    Linked: 'LINKED',
    Archived: 'ARCHIVED'
} as const;
export type FindAllFinancialRecordRadarItemsStatusEnum = typeof FindAllFinancialRecordRadarItemsStatusEnum[keyof typeof FindAllFinancialRecordRadarItemsStatusEnum];
/**
 * @export
 */
export const FindAllFinancialRecordRadarItemsFolderEnum = {
    Main: 'MAIN',
    Spam: 'SPAM'
} as const;
export type FindAllFinancialRecordRadarItemsFolderEnum = typeof FindAllFinancialRecordRadarItemsFolderEnum[keyof typeof FindAllFinancialRecordRadarItemsFolderEnum];
