/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.12.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionResponseEntity,
} from '../models/index';
import {
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
} from '../models/index';

/**
 * FibonacciApi - interface
 * 
 * @export
 * @interface FibonacciApiInterface
 */
export interface FibonacciApiInterface {
    /**
     * 
     * @summary Gera a sequência de Fibonacci a partir de um número n recebido.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FibonacciApiInterface
     */
    generateFibonacciSequenceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Gera a sequência de Fibonacci a partir de um número n recebido.
     */
    generateFibonacciSequence(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Inicia a sequência de Fibonacci gerando 20 números a serem processados.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FibonacciApiInterface
     */
    startFibonacciRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Inicia a sequência de Fibonacci gerando 20 números a serem processados.
     */
    startFibonacci(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Soma a sequência de Fibonacci gerada.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FibonacciApiInterface
     */
    sumFibonacciSequenceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Soma a sequência de Fibonacci gerada.
     */
    sumFibonacciSequence(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class FibonacciApi extends runtime.BaseAPI implements FibonacciApiInterface {

    /**
     * Gera a sequência de Fibonacci a partir de um número n recebido.
     */
    async generateFibonacciSequenceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/queues/generate-fibonacci-sequence`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Gera a sequência de Fibonacci a partir de um número n recebido.
     */
    async generateFibonacciSequence(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.generateFibonacciSequenceRaw(initOverrides);
    }

    /**
     * Inicia a sequência de Fibonacci gerando 20 números a serem processados.
     */
    async startFibonacciRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/fibonacci/start`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Inicia a sequência de Fibonacci gerando 20 números a serem processados.
     */
    async startFibonacci(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startFibonacciRaw(initOverrides);
    }

    /**
     * Soma a sequência de Fibonacci gerada.
     */
    async sumFibonacciSequenceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/queues/sum-fibonacci-sequence`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Soma a sequência de Fibonacci gerada.
     */
    async sumFibonacciSequence(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sumFibonacciSequenceRaw(initOverrides);
    }

}
