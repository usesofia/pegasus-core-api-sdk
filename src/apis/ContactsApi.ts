/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContactEntity,
  ContactOriginItemEntity,
  ContactTypeItemEntity,
  ContactsPageEntity,
  CreateContactRequestBodyDto,
  ExceptionResponseEntity,
  PartialUpdateContactRequestBodyDto,
  RemoveContactRequestBodyDto,
} from '../models/index';
import {
    ContactEntityFromJSON,
    ContactEntityToJSON,
    ContactOriginItemEntityFromJSON,
    ContactOriginItemEntityToJSON,
    ContactTypeItemEntityFromJSON,
    ContactTypeItemEntityToJSON,
    ContactsPageEntityFromJSON,
    ContactsPageEntityToJSON,
    CreateContactRequestBodyDtoFromJSON,
    CreateContactRequestBodyDtoToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    PartialUpdateContactRequestBodyDtoFromJSON,
    PartialUpdateContactRequestBodyDtoToJSON,
    RemoveContactRequestBodyDtoFromJSON,
    RemoveContactRequestBodyDtoToJSON,
} from '../models/index';

export interface CreateContactRequest {
    createContactRequestBodyDto: CreateContactRequestBodyDto;
    populate?: string;
}

export interface FindAllContactsRequest {
    sortOrder?: string;
    sortBy?: string;
    populate?: string;
    considerNotIdentified?: boolean;
    states?: string;
    country?: string;
    birthdayTo?: string;
    birthdayFrom?: string;
    origins?: string;
    types?: string;
    searchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface FindByIdContactRequest {
    id: string;
    populate?: string;
}

export interface PartialUpdateContactRequest {
    id: string;
    partialUpdateContactRequestBodyDto: PartialUpdateContactRequestBodyDto;
    populate?: string;
}

export interface RemoveContactRequest {
    id: string;
    removeContactRequestBodyDto: RemoveContactRequestBodyDto;
}

/**
 * ContactsApi - interface
 * 
 * @export
 * @interface ContactsApiInterface
 */
export interface ContactsApiInterface {
    /**
     * 
     * @summary Cria um novo contato.
     * @param {CreateContactRequestBodyDto} createContactRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    createContactRaw(requestParameters: CreateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactEntity>>;

    /**
     * Cria um novo contato.
     */
    createContact(requestParameters: CreateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactEntity>;

    /**
     * 
     * @summary Busca todas as origens de contato.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    findAllContactOriginsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContactOriginItemEntity>>>;

    /**
     * Busca todas as origens de contato.
     */
    findAllContactOrigins(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContactOriginItemEntity>>;

    /**
     * 
     * @summary Busca todos os tipos de contato.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    findAllContactTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContactTypeItemEntity>>>;

    /**
     * Busca todos os tipos de contato.
     */
    findAllContactTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContactTypeItemEntity>>;

    /**
     * 
     * @summary Busca todos os contatos.
     * @param {string} [sortOrder] Ordem de ordenação dos contatos.
     * @param {string} [sortBy] Campo para ordenação dos contatos.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {boolean} [considerNotIdentified] Considerar ou não o contato não identificado.
     * @param {string} [states] Estados a serem buscados.
     * @param {string} [country] País a serem buscados.
     * @param {string} [birthdayTo] Data de nascimento final a serem buscadas.
     * @param {string} [birthdayFrom] Data de nascimento inicial a serem buscadas.
     * @param {string} [origins] Origens de contato a serem buscadas.
     * @param {string} [types] Tipos de contato a serem buscados.
     * @param {string} [searchTerm] Termo para busca por nome do contato.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    findAllContactsRaw(requestParameters: FindAllContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactsPageEntity>>;

    /**
     * Busca todos os contatos.
     */
    findAllContacts(requestParameters: FindAllContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactsPageEntity>;

    /**
     * 
     * @summary Busca um contato pelo identificador.
     * @param {string} id Identificador do contato.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    findByIdContactRaw(requestParameters: FindByIdContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactEntity>>;

    /**
     * Busca um contato pelo identificador.
     */
    findByIdContact(requestParameters: FindByIdContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactEntity>;

    /**
     * 
     * @summary Atualiza parcialmente um contato.
     * @param {string} id Identificador do contato.
     * @param {PartialUpdateContactRequestBodyDto} partialUpdateContactRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    partialUpdateContactRaw(requestParameters: PartialUpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactEntity>>;

    /**
     * Atualiza parcialmente um contato.
     */
    partialUpdateContact(requestParameters: PartialUpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactEntity>;

    /**
     * 
     * @summary Remove um contato.
     * @param {string} id Identificador do contato.
     * @param {RemoveContactRequestBodyDto} removeContactRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    removeContactRaw(requestParameters: RemoveContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove um contato.
     */
    removeContact(requestParameters: RemoveContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class ContactsApi extends runtime.BaseAPI implements ContactsApiInterface {

    /**
     * Cria um novo contato.
     */
    async createContactRaw(requestParameters: CreateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactEntity>> {
        if (requestParameters['createContactRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createContactRequestBodyDto',
                'Required parameter "createContactRequestBodyDto" was null or undefined when calling createContact().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/external/contacts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateContactRequestBodyDtoToJSON(requestParameters['createContactRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactEntityFromJSON(jsonValue));
    }

    /**
     * Cria um novo contato.
     */
    async createContact(requestParameters: CreateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactEntity> {
        const response = await this.createContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todas as origens de contato.
     */
    async findAllContactOriginsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContactOriginItemEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external/contacts/origins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContactOriginItemEntityFromJSON));
    }

    /**
     * Busca todas as origens de contato.
     */
    async findAllContactOrigins(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContactOriginItemEntity>> {
        const response = await this.findAllContactOriginsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Busca todos os tipos de contato.
     */
    async findAllContactTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContactTypeItemEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external/contacts/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContactTypeItemEntityFromJSON));
    }

    /**
     * Busca todos os tipos de contato.
     */
    async findAllContactTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContactTypeItemEntity>> {
        const response = await this.findAllContactTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Busca todos os contatos.
     */
    async findAllContactsRaw(requestParameters: FindAllContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactsPageEntity>> {
        const queryParameters: any = {};

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['considerNotIdentified'] != null) {
            queryParameters['considerNotIdentified'] = requestParameters['considerNotIdentified'];
        }

        if (requestParameters['states'] != null) {
            queryParameters['states'] = requestParameters['states'];
        }

        if (requestParameters['country'] != null) {
            queryParameters['country'] = requestParameters['country'];
        }

        if (requestParameters['birthdayTo'] != null) {
            queryParameters['birthdayTo'] = requestParameters['birthdayTo'];
        }

        if (requestParameters['birthdayFrom'] != null) {
            queryParameters['birthdayFrom'] = requestParameters['birthdayFrom'];
        }

        if (requestParameters['origins'] != null) {
            queryParameters['origins'] = requestParameters['origins'];
        }

        if (requestParameters['types'] != null) {
            queryParameters['types'] = requestParameters['types'];
        }

        if (requestParameters['searchTerm'] != null) {
            queryParameters['searchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external/contacts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactsPageEntityFromJSON(jsonValue));
    }

    /**
     * Busca todos os contatos.
     */
    async findAllContacts(requestParameters: FindAllContactsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactsPageEntity> {
        const response = await this.findAllContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca um contato pelo identificador.
     */
    async findByIdContactRaw(requestParameters: FindByIdContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findByIdContact().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external/contacts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactEntityFromJSON(jsonValue));
    }

    /**
     * Busca um contato pelo identificador.
     */
    async findByIdContact(requestParameters: FindByIdContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactEntity> {
        const response = await this.findByIdContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Atualiza parcialmente um contato.
     */
    async partialUpdateContactRaw(requestParameters: PartialUpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling partialUpdateContact().'
            );
        }

        if (requestParameters['partialUpdateContactRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'partialUpdateContactRequestBodyDto',
                'Required parameter "partialUpdateContactRequestBodyDto" was null or undefined when calling partialUpdateContact().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/external/contacts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PartialUpdateContactRequestBodyDtoToJSON(requestParameters['partialUpdateContactRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactEntityFromJSON(jsonValue));
    }

    /**
     * Atualiza parcialmente um contato.
     */
    async partialUpdateContact(requestParameters: PartialUpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactEntity> {
        const response = await this.partialUpdateContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove um contato.
     */
    async removeContactRaw(requestParameters: RemoveContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeContact().'
            );
        }

        if (requestParameters['removeContactRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'removeContactRequestBodyDto',
                'Required parameter "removeContactRequestBodyDto" was null or undefined when calling removeContact().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/external/contacts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveContactRequestBodyDtoToJSON(requestParameters['removeContactRequestBodyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove um contato.
     */
    async removeContact(requestParameters: RemoveContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeContactRaw(requestParameters, initOverrides);
    }

}
