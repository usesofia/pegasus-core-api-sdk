/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CountryItemEntity,
  CountryStateItemEntity,
  ExceptionResponseEntity,
} from '../models/index';
import {
    CountryItemEntityFromJSON,
    CountryItemEntityToJSON,
    CountryStateItemEntityFromJSON,
    CountryStateItemEntityToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
} from '../models/index';

export interface FindStatesByCountryRequest {
    countryId: string;
}

/**
 * AddressesApi - interface
 * 
 * @export
 * @interface AddressesApiInterface
 */
export interface AddressesApiInterface {
    /**
     * 
     * @summary Busca todos os países.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApiInterface
     */
    findAllCountriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryItemEntity>>>;

    /**
     * Busca todos os países.
     */
    findAllCountries(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryItemEntity>>;

    /**
     * 
     * @summary Busca todos os estados de um país.
     * @param {string} countryId Identificador do país.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApiInterface
     */
    findStatesByCountryRaw(requestParameters: FindStatesByCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryStateItemEntity>>>;

    /**
     * Busca todos os estados de um país.
     */
    findStatesByCountry(requestParameters: FindStatesByCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryStateItemEntity>>;

}

/**
 * 
 */
export class AddressesApi extends runtime.BaseAPI implements AddressesApiInterface {

    /**
     * Busca todos os países.
     */
    async findAllCountriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryItemEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/addresses/countries`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CountryItemEntityFromJSON));
    }

    /**
     * Busca todos os países.
     */
    async findAllCountries(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryItemEntity>> {
        const response = await this.findAllCountriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Busca todos os estados de um país.
     */
    async findStatesByCountryRaw(requestParameters: FindStatesByCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryStateItemEntity>>> {
        if (requestParameters['countryId'] == null) {
            throw new runtime.RequiredError(
                'countryId',
                'Required parameter "countryId" was null or undefined when calling findStatesByCountry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/addresses/countries/{countryId}/states`;
        urlPath = urlPath.replace(`{${"countryId"}}`, encodeURIComponent(String(requestParameters['countryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CountryStateItemEntityFromJSON));
    }

    /**
     * Busca todos os estados de um país.
     */
    async findStatesByCountry(requestParameters: FindStatesByCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryStateItemEntity>> {
        const response = await this.findStatesByCountryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
