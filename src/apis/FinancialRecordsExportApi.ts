/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionResponseEntity,
  ExportFinancialRecordsDto,
} from '../models/index';
import {
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    ExportFinancialRecordsDtoFromJSON,
    ExportFinancialRecordsDtoToJSON,
} from '../models/index';

export interface ExportFinancialRecordsRequest {
    recurringFinancialRecord?: string;
    installmentFinancialRecord?: string;
    account?: string;
    reconciled?: boolean;
    completed?: boolean;
    tags?: string;
    createdAtTo?: string;
    createdAtFrom?: string;
    cashDateTo?: string;
    cashDateFrom?: string;
    competenceDateTo?: string;
    competenceDateFrom?: string;
    subcategory?: string;
    contact?: string;
    dueDateTo?: string;
    dueDateFrom?: string;
    amountTo?: string;
    amountFrom?: string;
    direction?: string;
    format?: ExportFinancialRecordsFormatEnum;
}

/**
 * FinancialRecordsExportApi - interface
 * 
 * @export
 * @interface FinancialRecordsExportApiInterface
 */
export interface FinancialRecordsExportApiInterface {
    /**
     * 
     * @summary Solicita a exportação dos lançamentos financeiros.
     * @param {string} [recurringFinancialRecord] ID da recorrência financeira.
     * @param {string} [installmentFinancialRecord] ID do parcelamento financeiro.
     * @param {string} [account] Conta do lançamento financeiro.
     * @param {boolean} [reconciled] Indica se o lançamento financeiro foi reconciliado.
     * @param {boolean} [completed] Indica se o lançamento financeiro foi completado.
     * @param {string} [tags] Tags do lançamento financeiro.
     * @param {string} [createdAtTo] Data de criação final.
     * @param {string} [createdAtFrom] Data de criação inicial.
     * @param {string} [cashDateTo] Data de pagamento final.
     * @param {string} [cashDateFrom] Data de pagamento inicial.
     * @param {string} [competenceDateTo] Data de competência final.
     * @param {string} [competenceDateFrom] Data de competência inicial.
     * @param {string} [subcategory] Subcategoria do lançamento financeiro.
     * @param {string} [contact] Contato do lançamento financeiro.
     * @param {string} [dueDateTo] Data de vencimento final.
     * @param {string} [dueDateFrom] Data de vencimento inicial.
     * @param {string} [amountTo] Valor do lançamento financeiro máximo.
     * @param {string} [amountFrom] Valor do lançamento financeiro mínimo.
     * @param {string} [direction] Direção do lançamento financeiro.
     * @param {'csv' | 'xlsx'} [format] Formato de exportação dos dados.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialRecordsExportApiInterface
     */
    exportFinancialRecordsRaw(requestParameters: ExportFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportFinancialRecordsDto>>;

    /**
     * Solicita a exportação dos lançamentos financeiros.
     */
    exportFinancialRecords(requestParameters: ExportFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportFinancialRecordsDto>;

}

/**
 * 
 */
export class FinancialRecordsExportApi extends runtime.BaseAPI implements FinancialRecordsExportApiInterface {

    /**
     * Solicita a exportação dos lançamentos financeiros.
     */
    async exportFinancialRecordsRaw(requestParameters: ExportFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportFinancialRecordsDto>> {
        const queryParameters: any = {};

        if (requestParameters['recurringFinancialRecord'] != null) {
            queryParameters['recurringFinancialRecord'] = requestParameters['recurringFinancialRecord'];
        }

        if (requestParameters['installmentFinancialRecord'] != null) {
            queryParameters['installmentFinancialRecord'] = requestParameters['installmentFinancialRecord'];
        }

        if (requestParameters['account'] != null) {
            queryParameters['account'] = requestParameters['account'];
        }

        if (requestParameters['reconciled'] != null) {
            queryParameters['reconciled'] = requestParameters['reconciled'];
        }

        if (requestParameters['completed'] != null) {
            queryParameters['completed'] = requestParameters['completed'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['createdAtTo'] != null) {
            queryParameters['createdAtTo'] = requestParameters['createdAtTo'];
        }

        if (requestParameters['createdAtFrom'] != null) {
            queryParameters['createdAtFrom'] = requestParameters['createdAtFrom'];
        }

        if (requestParameters['cashDateTo'] != null) {
            queryParameters['cashDateTo'] = requestParameters['cashDateTo'];
        }

        if (requestParameters['cashDateFrom'] != null) {
            queryParameters['cashDateFrom'] = requestParameters['cashDateFrom'];
        }

        if (requestParameters['competenceDateTo'] != null) {
            queryParameters['competenceDateTo'] = requestParameters['competenceDateTo'];
        }

        if (requestParameters['competenceDateFrom'] != null) {
            queryParameters['competenceDateFrom'] = requestParameters['competenceDateFrom'];
        }

        if (requestParameters['subcategory'] != null) {
            queryParameters['subcategory'] = requestParameters['subcategory'];
        }

        if (requestParameters['contact'] != null) {
            queryParameters['contact'] = requestParameters['contact'];
        }

        if (requestParameters['dueDateTo'] != null) {
            queryParameters['dueDateTo'] = requestParameters['dueDateTo'];
        }

        if (requestParameters['dueDateFrom'] != null) {
            queryParameters['dueDateFrom'] = requestParameters['dueDateFrom'];
        }

        if (requestParameters['amountTo'] != null) {
            queryParameters['amountTo'] = requestParameters['amountTo'];
        }

        if (requestParameters['amountFrom'] != null) {
            queryParameters['amountFrom'] = requestParameters['amountFrom'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/financial-records/export`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportFinancialRecordsDtoFromJSON(jsonValue));
    }

    /**
     * Solicita a exportação dos lançamentos financeiros.
     */
    async exportFinancialRecords(requestParameters: ExportFinancialRecordsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportFinancialRecordsDto> {
        const response = await this.exportFinancialRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportFinancialRecordsFormatEnum = {
    Csv: 'csv',
    Xlsx: 'xlsx'
} as const;
export type ExportFinancialRecordsFormatEnum = typeof ExportFinancialRecordsFormatEnum[keyof typeof ExportFinancialRecordsFormatEnum];
