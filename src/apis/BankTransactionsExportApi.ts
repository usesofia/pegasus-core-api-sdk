/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionResponseEntity,
  ExportBankTransactionsDto,
} from '../models/index';
import {
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    ExportBankTransactionsDtoFromJSON,
    ExportBankTransactionsDtoToJSON,
} from '../models/index';

export interface ExportBankTransactionsRequest {
    sortOrder?: ExportBankTransactionsSortOrderEnum;
    sortBy?: ExportBankTransactionsSortByEnum;
    ignored?: boolean;
    origin?: ExportBankTransactionsOriginEnum;
    reconciled?: boolean;
    type?: ExportBankTransactionsTypeEnum;
    dateTo?: Date;
    dateFrom?: Date;
    bankAccount?: string;
    format?: ExportBankTransactionsFormatEnum;
}

/**
 * BankTransactionsExportApi - interface
 * 
 * @export
 * @interface BankTransactionsExportApiInterface
 */
export interface BankTransactionsExportApiInterface {
    /**
     * 
     * @summary Solicita a exportação das transações bancárias.
     * @param {'asc' | 'desc'} [sortOrder] Ordem da ordenação. Valores possíveis: \&#39;asc\&#39;, \&#39;desc\&#39;.
     * @param {'date' | 'amountInBrl' | 'description' | 'createdAt' | 'reconciled'} [sortBy] Campo para ordenação
     * @param {boolean} [ignored] Filtrar por transações ignoradas/arquivadas. (true/false)
     * @param {'AUTOMATIC_INTEGRATION' | 'MANUAL_OFX_IMPORT'} [origin] Filtrar pela origem da transação.
     * @param {boolean} [reconciled] Filtrar por transações reconciliadas. (true/false)
     * @param {'DEBIT' | 'CREDIT'} [type] Tipo da movimentação.
     * @param {Date} [dateTo] Data final para filtrar.
     * @param {Date} [dateFrom] Data inicial para filtrar.
     * @param {string} [bankAccount] ID da conta bancária para filtrar.
     * @param {'csv' | 'xlsx'} [format] Formato de exportação dos dados.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsExportApiInterface
     */
    exportBankTransactionsRaw(requestParameters: ExportBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportBankTransactionsDto>>;

    /**
     * Solicita a exportação das transações bancárias.
     */
    exportBankTransactions(requestParameters: ExportBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportBankTransactionsDto>;

}

/**
 * 
 */
export class BankTransactionsExportApi extends runtime.BaseAPI implements BankTransactionsExportApiInterface {

    /**
     * Solicita a exportação das transações bancárias.
     */
    async exportBankTransactionsRaw(requestParameters: ExportBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportBankTransactionsDto>> {
        const queryParameters: any = {};

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['ignored'] != null) {
            queryParameters['ignored'] = requestParameters['ignored'];
        }

        if (requestParameters['origin'] != null) {
            queryParameters['origin'] = requestParameters['origin'];
        }

        if (requestParameters['reconciled'] != null) {
            queryParameters['reconciled'] = requestParameters['reconciled'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['dateTo'] != null) {
            queryParameters['dateTo'] = (requestParameters['dateTo'] as any).toISOString();
        }

        if (requestParameters['dateFrom'] != null) {
            queryParameters['dateFrom'] = (requestParameters['dateFrom'] as any).toISOString();
        }

        if (requestParameters['bankAccount'] != null) {
            queryParameters['bankAccount'] = requestParameters['bankAccount'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/bank-transactions/export`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportBankTransactionsDtoFromJSON(jsonValue));
    }

    /**
     * Solicita a exportação das transações bancárias.
     */
    async exportBankTransactions(requestParameters: ExportBankTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportBankTransactionsDto> {
        const response = await this.exportBankTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportBankTransactionsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ExportBankTransactionsSortOrderEnum = typeof ExportBankTransactionsSortOrderEnum[keyof typeof ExportBankTransactionsSortOrderEnum];
/**
 * @export
 */
export const ExportBankTransactionsSortByEnum = {
    Date: 'date',
    AmountInBrl: 'amountInBrl',
    Description: 'description',
    CreatedAt: 'createdAt',
    Reconciled: 'reconciled'
} as const;
export type ExportBankTransactionsSortByEnum = typeof ExportBankTransactionsSortByEnum[keyof typeof ExportBankTransactionsSortByEnum];
/**
 * @export
 */
export const ExportBankTransactionsOriginEnum = {
    AutomaticIntegration: 'AUTOMATIC_INTEGRATION',
    ManualOfxImport: 'MANUAL_OFX_IMPORT'
} as const;
export type ExportBankTransactionsOriginEnum = typeof ExportBankTransactionsOriginEnum[keyof typeof ExportBankTransactionsOriginEnum];
/**
 * @export
 */
export const ExportBankTransactionsTypeEnum = {
    Debit: 'DEBIT',
    Credit: 'CREDIT'
} as const;
export type ExportBankTransactionsTypeEnum = typeof ExportBankTransactionsTypeEnum[keyof typeof ExportBankTransactionsTypeEnum];
/**
 * @export
 */
export const ExportBankTransactionsFormatEnum = {
    Csv: 'csv',
    Xlsx: 'xlsx'
} as const;
export type ExportBankTransactionsFormatEnum = typeof ExportBankTransactionsFormatEnum[keyof typeof ExportBankTransactionsFormatEnum];
