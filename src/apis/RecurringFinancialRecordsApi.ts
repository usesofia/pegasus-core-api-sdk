/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.12.16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateManyRecurringFinancialRecordsRequestBodyDto,
  CreateRecurringFinancialRecordRequestBodyDto,
  ExceptionResponseEntity,
  PartialUpdateRecurringFinancialRecordRequestBodyDto,
  RecurringFinancialRecordDto,
  RecurringFinancialRecordsPageDto,
  RemoveRecurringFinancialRecordRequestBodyDto,
  ScheduleRecurringFinancialRecordsSeedingRequestBodyDto,
  SeedRecurringFinancialRecordsRequestBodyDto,
} from '../models/index';
import {
    CreateManyRecurringFinancialRecordsRequestBodyDtoFromJSON,
    CreateManyRecurringFinancialRecordsRequestBodyDtoToJSON,
    CreateRecurringFinancialRecordRequestBodyDtoFromJSON,
    CreateRecurringFinancialRecordRequestBodyDtoToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    PartialUpdateRecurringFinancialRecordRequestBodyDtoFromJSON,
    PartialUpdateRecurringFinancialRecordRequestBodyDtoToJSON,
    RecurringFinancialRecordDtoFromJSON,
    RecurringFinancialRecordDtoToJSON,
    RecurringFinancialRecordsPageDtoFromJSON,
    RecurringFinancialRecordsPageDtoToJSON,
    RemoveRecurringFinancialRecordRequestBodyDtoFromJSON,
    RemoveRecurringFinancialRecordRequestBodyDtoToJSON,
    ScheduleRecurringFinancialRecordsSeedingRequestBodyDtoFromJSON,
    ScheduleRecurringFinancialRecordsSeedingRequestBodyDtoToJSON,
    SeedRecurringFinancialRecordsRequestBodyDtoFromJSON,
    SeedRecurringFinancialRecordsRequestBodyDtoToJSON,
} from '../models/index';

export interface CreateManyRecurringFinancialRecordsRequest {
    createManyRecurringFinancialRecordsRequestBodyDto: CreateManyRecurringFinancialRecordsRequestBodyDto;
}

export interface CreateRecurringFinancialRecordRequest {
    createRecurringFinancialRecordRequestBodyDto: CreateRecurringFinancialRecordRequestBodyDto;
    populate?: string;
}

export interface FindAllRecurringFinancialRecordsRequest {
    frequency?: FindAllRecurringFinancialRecordsFrequencyEnum;
    isActive?: boolean;
    automaticCompletion?: boolean;
    onlyBusinessDays?: boolean;
    repetitionMonth?: number;
    repetitionDay?: number;
    tags?: Array<any>;
    amountTo?: string;
    amountFrom?: string;
    subcategory?: string;
    contact?: string;
    firstOccurrenceDateTo?: Date;
    firstOccurrenceDateFrom?: Date;
    direction?: FindAllRecurringFinancialRecordsDirectionEnum;
    sortOrder?: FindAllRecurringFinancialRecordsSortOrderEnum;
    sortBy?: FindAllRecurringFinancialRecordsSortByEnum;
    populate?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface FindByIdRecurringFinancialRecordRequest {
    id: string;
    populate?: string;
}

export interface PartialUpdateRecurringFinancialRecordRequest {
    id: string;
    partialUpdateRecurringFinancialRecordRequestBodyDto: PartialUpdateRecurringFinancialRecordRequestBodyDto;
    populate?: string;
}

export interface RemoveRecurringFinancialRecordRequest {
    id: string;
    removeRecurringFinancialRecordRequestBodyDto: RemoveRecurringFinancialRecordRequestBodyDto;
}

export interface ScheduleRecurringFinancialRecordsSeedingRequest {
    scheduleRecurringFinancialRecordsSeedingRequestBodyDto: ScheduleRecurringFinancialRecordsSeedingRequestBodyDto;
}

export interface StartRecurringFinancialRecordsSeederRequest {
    seedRecurringFinancialRecordsRequestBodyDto: SeedRecurringFinancialRecordsRequestBodyDto;
}

/**
 * RecurringFinancialRecordsApi - interface
 * 
 * @export
 * @interface RecurringFinancialRecordsApiInterface
 */
export interface RecurringFinancialRecordsApiInterface {
    /**
     * 
     * @summary Cria múltiplos lançamentos financeiros recorrentes.
     * @param {CreateManyRecurringFinancialRecordsRequestBodyDto} createManyRecurringFinancialRecordsRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    createManyRecurringFinancialRecordsRaw(requestParameters: CreateManyRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RecurringFinancialRecordDto>>>;

    /**
     * Cria múltiplos lançamentos financeiros recorrentes.
     */
    createManyRecurringFinancialRecords(requestParameters: CreateManyRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RecurringFinancialRecordDto>>;

    /**
     * 
     * @summary Cria um novo lançamento financeiro recorrente.
     * @param {CreateRecurringFinancialRecordRequestBodyDto} createRecurringFinancialRecordRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    createRecurringFinancialRecordRaw(requestParameters: CreateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordDto>>;

    /**
     * Cria um novo lançamento financeiro recorrente.
     */
    createRecurringFinancialRecord(requestParameters: CreateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordDto>;

    /**
     * 
     * @summary Busca todos os lançamentos financeiros recorrentes.
     * @param {'WEEKLY' | 'MONTHLY' | 'YEARLY'} [frequency] Frequência de repetição do lançamento.
     * @param {boolean} [isActive] Indica se o lançamento recorrente está ativo.
     * @param {boolean} [automaticCompletion] Indica se o lançamento será completado automaticamente.
     * @param {boolean} [onlyBusinessDays] Indica se o lançamento será apenas em dias úteis.
     * @param {number} [repetitionMonth] Mês de repetição do lançamento.
     * @param {number} [repetitionDay] Dia de repetição do lançamento.
     * @param {Array<any>} [tags] Identificadores das tags.
     * @param {string} [amountTo] Valor máximo do lançamento.
     * @param {string} [amountFrom] Valor mínimo do lançamento.
     * @param {string} [subcategory] Identificador da subcategoria.
     * @param {string} [contact] Identificador do contato.
     * @param {Date} [firstOccurrenceDateTo] Data final da primeira ocorrência (formato ISO YYYY-MM-DD).
     * @param {Date} [firstOccurrenceDateFrom] Data inicial da primeira ocorrência (formato ISO YYYY-MM-DD).
     * @param {'IN' | 'OUT'} [direction] Direção do lançamento (entrada/saída).
     * @param {'asc' | 'desc'} [sortOrder] Ordem da ordenação.
     * @param {'direction' | 'firstOccurrenceDate' | 'contact' | 'description' | 'subcategory' | 'amount' | 'frequency' | 'isActive' | 'createdAt'} [sortBy] Campo para ordenação.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [textSearchTerm] Termo para busca por descrição do lançamento.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    findAllRecurringFinancialRecordsRaw(requestParameters: FindAllRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordsPageDto>>;

    /**
     * Busca todos os lançamentos financeiros recorrentes.
     */
    findAllRecurringFinancialRecords(requestParameters: FindAllRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordsPageDto>;

    /**
     * 
     * @summary Busca um lançamento financeiro recorrente pelo identificador.
     * @param {string} id Identificador do lançamento financeiro recorrente.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    findByIdRecurringFinancialRecordRaw(requestParameters: FindByIdRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordDto>>;

    /**
     * Busca um lançamento financeiro recorrente pelo identificador.
     */
    findByIdRecurringFinancialRecord(requestParameters: FindByIdRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordDto>;

    /**
     * 
     * @summary Atualiza parcialmente um lançamento financeiro recorrente.
     * @param {string} id Identificador do lançamento financeiro recorrente.
     * @param {PartialUpdateRecurringFinancialRecordRequestBodyDto} partialUpdateRecurringFinancialRecordRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    partialUpdateRecurringFinancialRecordRaw(requestParameters: PartialUpdateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordDto>>;

    /**
     * Atualiza parcialmente um lançamento financeiro recorrente.
     */
    partialUpdateRecurringFinancialRecord(requestParameters: PartialUpdateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordDto>;

    /**
     * 
     * @summary Remove um lançamento financeiro recorrente.
     * @param {string} id Identificador do lançamento financeiro recorrente.
     * @param {RemoveRecurringFinancialRecordRequestBodyDto} removeRecurringFinancialRecordRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    removeRecurringFinancialRecordRaw(requestParameters: RemoveRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove um lançamento financeiro recorrente.
     */
    removeRecurringFinancialRecord(requestParameters: RemoveRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Agenda o seeder de lançamentos financeiros recorrentes.
     * @param {ScheduleRecurringFinancialRecordsSeedingRequestBodyDto} scheduleRecurringFinancialRecordsSeedingRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    scheduleRecurringFinancialRecordsSeedingRaw(requestParameters: ScheduleRecurringFinancialRecordsSeedingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Agenda o seeder de lançamentos financeiros recorrentes.
     */
    scheduleRecurringFinancialRecordsSeeding(requestParameters: ScheduleRecurringFinancialRecordsSeedingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Inicia o seeder de lançamentos financeiros recorrentes.
     * @param {SeedRecurringFinancialRecordsRequestBodyDto} seedRecurringFinancialRecordsRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    startRecurringFinancialRecordsSeederRaw(requestParameters: StartRecurringFinancialRecordsSeederRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Inicia o seeder de lançamentos financeiros recorrentes.
     */
    startRecurringFinancialRecordsSeeder(requestParameters: StartRecurringFinancialRecordsSeederRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class RecurringFinancialRecordsApi extends runtime.BaseAPI implements RecurringFinancialRecordsApiInterface {

    /**
     * Cria múltiplos lançamentos financeiros recorrentes.
     */
    async createManyRecurringFinancialRecordsRaw(requestParameters: CreateManyRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RecurringFinancialRecordDto>>> {
        if (requestParameters['createManyRecurringFinancialRecordsRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createManyRecurringFinancialRecordsRequestBodyDto',
                'Required parameter "createManyRecurringFinancialRecordsRequestBodyDto" was null or undefined when calling createManyRecurringFinancialRecords().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/recurring-financial-records/many`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateManyRecurringFinancialRecordsRequestBodyDtoToJSON(requestParameters['createManyRecurringFinancialRecordsRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecurringFinancialRecordDtoFromJSON));
    }

    /**
     * Cria múltiplos lançamentos financeiros recorrentes.
     */
    async createManyRecurringFinancialRecords(requestParameters: CreateManyRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RecurringFinancialRecordDto>> {
        const response = await this.createManyRecurringFinancialRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cria um novo lançamento financeiro recorrente.
     */
    async createRecurringFinancialRecordRaw(requestParameters: CreateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordDto>> {
        if (requestParameters['createRecurringFinancialRecordRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createRecurringFinancialRecordRequestBodyDto',
                'Required parameter "createRecurringFinancialRecordRequestBodyDto" was null or undefined when calling createRecurringFinancialRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/recurring-financial-records`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRecurringFinancialRecordRequestBodyDtoToJSON(requestParameters['createRecurringFinancialRecordRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurringFinancialRecordDtoFromJSON(jsonValue));
    }

    /**
     * Cria um novo lançamento financeiro recorrente.
     */
    async createRecurringFinancialRecord(requestParameters: CreateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordDto> {
        const response = await this.createRecurringFinancialRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todos os lançamentos financeiros recorrentes.
     */
    async findAllRecurringFinancialRecordsRaw(requestParameters: FindAllRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordsPageDto>> {
        const queryParameters: any = {};

        if (requestParameters['frequency'] != null) {
            queryParameters['frequency'] = requestParameters['frequency'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['automaticCompletion'] != null) {
            queryParameters['automaticCompletion'] = requestParameters['automaticCompletion'];
        }

        if (requestParameters['onlyBusinessDays'] != null) {
            queryParameters['onlyBusinessDays'] = requestParameters['onlyBusinessDays'];
        }

        if (requestParameters['repetitionMonth'] != null) {
            queryParameters['repetitionMonth'] = requestParameters['repetitionMonth'];
        }

        if (requestParameters['repetitionDay'] != null) {
            queryParameters['repetitionDay'] = requestParameters['repetitionDay'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['amountTo'] != null) {
            queryParameters['amountTo'] = requestParameters['amountTo'];
        }

        if (requestParameters['amountFrom'] != null) {
            queryParameters['amountFrom'] = requestParameters['amountFrom'];
        }

        if (requestParameters['subcategory'] != null) {
            queryParameters['subcategory'] = requestParameters['subcategory'];
        }

        if (requestParameters['contact'] != null) {
            queryParameters['contact'] = requestParameters['contact'];
        }

        if (requestParameters['firstOccurrenceDateTo'] != null) {
            queryParameters['firstOccurrenceDateTo'] = (requestParameters['firstOccurrenceDateTo'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['firstOccurrenceDateFrom'] != null) {
            queryParameters['firstOccurrenceDateFrom'] = (requestParameters['firstOccurrenceDateFrom'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['textSearchTerm'] != null) {
            queryParameters['textSearchTerm'] = requestParameters['textSearchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/recurring-financial-records`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurringFinancialRecordsPageDtoFromJSON(jsonValue));
    }

    /**
     * Busca todos os lançamentos financeiros recorrentes.
     */
    async findAllRecurringFinancialRecords(requestParameters: FindAllRecurringFinancialRecordsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordsPageDto> {
        const response = await this.findAllRecurringFinancialRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca um lançamento financeiro recorrente pelo identificador.
     */
    async findByIdRecurringFinancialRecordRaw(requestParameters: FindByIdRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findByIdRecurringFinancialRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/external/recurring-financial-records/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurringFinancialRecordDtoFromJSON(jsonValue));
    }

    /**
     * Busca um lançamento financeiro recorrente pelo identificador.
     */
    async findByIdRecurringFinancialRecord(requestParameters: FindByIdRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordDto> {
        const response = await this.findByIdRecurringFinancialRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Atualiza parcialmente um lançamento financeiro recorrente.
     */
    async partialUpdateRecurringFinancialRecordRaw(requestParameters: PartialUpdateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling partialUpdateRecurringFinancialRecord().'
            );
        }

        if (requestParameters['partialUpdateRecurringFinancialRecordRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'partialUpdateRecurringFinancialRecordRequestBodyDto',
                'Required parameter "partialUpdateRecurringFinancialRecordRequestBodyDto" was null or undefined when calling partialUpdateRecurringFinancialRecord().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/recurring-financial-records/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PartialUpdateRecurringFinancialRecordRequestBodyDtoToJSON(requestParameters['partialUpdateRecurringFinancialRecordRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurringFinancialRecordDtoFromJSON(jsonValue));
    }

    /**
     * Atualiza parcialmente um lançamento financeiro recorrente.
     */
    async partialUpdateRecurringFinancialRecord(requestParameters: PartialUpdateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordDto> {
        const response = await this.partialUpdateRecurringFinancialRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove um lançamento financeiro recorrente.
     */
    async removeRecurringFinancialRecordRaw(requestParameters: RemoveRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeRecurringFinancialRecord().'
            );
        }

        if (requestParameters['removeRecurringFinancialRecordRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'removeRecurringFinancialRecordRequestBodyDto',
                'Required parameter "removeRecurringFinancialRecordRequestBodyDto" was null or undefined when calling removeRecurringFinancialRecord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/external/recurring-financial-records/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveRecurringFinancialRecordRequestBodyDtoToJSON(requestParameters['removeRecurringFinancialRecordRequestBodyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove um lançamento financeiro recorrente.
     */
    async removeRecurringFinancialRecord(requestParameters: RemoveRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeRecurringFinancialRecordRaw(requestParameters, initOverrides);
    }

    /**
     * Agenda o seeder de lançamentos financeiros recorrentes.
     */
    async scheduleRecurringFinancialRecordsSeedingRaw(requestParameters: ScheduleRecurringFinancialRecordsSeedingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleRecurringFinancialRecordsSeedingRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'scheduleRecurringFinancialRecordsSeedingRequestBodyDto',
                'Required parameter "scheduleRecurringFinancialRecordsSeedingRequestBodyDto" was null or undefined when calling scheduleRecurringFinancialRecordsSeeding().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/internal/recurring-financial-records/seed`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScheduleRecurringFinancialRecordsSeedingRequestBodyDtoToJSON(requestParameters['scheduleRecurringFinancialRecordsSeedingRequestBodyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Agenda o seeder de lançamentos financeiros recorrentes.
     */
    async scheduleRecurringFinancialRecordsSeeding(requestParameters: ScheduleRecurringFinancialRecordsSeedingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scheduleRecurringFinancialRecordsSeedingRaw(requestParameters, initOverrides);
    }

    /**
     * Inicia o seeder de lançamentos financeiros recorrentes.
     */
    async startRecurringFinancialRecordsSeederRaw(requestParameters: StartRecurringFinancialRecordsSeederRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['seedRecurringFinancialRecordsRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'seedRecurringFinancialRecordsRequestBodyDto',
                'Required parameter "seedRecurringFinancialRecordsRequestBodyDto" was null or undefined when calling startRecurringFinancialRecordsSeeder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/internal/queues/recurring-financial-records-2`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeedRecurringFinancialRecordsRequestBodyDtoToJSON(requestParameters['seedRecurringFinancialRecordsRequestBodyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Inicia o seeder de lançamentos financeiros recorrentes.
     */
    async startRecurringFinancialRecordsSeeder(requestParameters: StartRecurringFinancialRecordsSeederRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startRecurringFinancialRecordsSeederRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const FindAllRecurringFinancialRecordsFrequencyEnum = {
    Weekly: 'WEEKLY',
    Monthly: 'MONTHLY',
    Yearly: 'YEARLY'
} as const;
export type FindAllRecurringFinancialRecordsFrequencyEnum = typeof FindAllRecurringFinancialRecordsFrequencyEnum[keyof typeof FindAllRecurringFinancialRecordsFrequencyEnum];
/**
 * @export
 */
export const FindAllRecurringFinancialRecordsDirectionEnum = {
    In: 'IN',
    Out: 'OUT'
} as const;
export type FindAllRecurringFinancialRecordsDirectionEnum = typeof FindAllRecurringFinancialRecordsDirectionEnum[keyof typeof FindAllRecurringFinancialRecordsDirectionEnum];
/**
 * @export
 */
export const FindAllRecurringFinancialRecordsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type FindAllRecurringFinancialRecordsSortOrderEnum = typeof FindAllRecurringFinancialRecordsSortOrderEnum[keyof typeof FindAllRecurringFinancialRecordsSortOrderEnum];
/**
 * @export
 */
export const FindAllRecurringFinancialRecordsSortByEnum = {
    Direction: 'direction',
    FirstOccurrenceDate: 'firstOccurrenceDate',
    Contact: 'contact',
    Description: 'description',
    Subcategory: 'subcategory',
    Amount: 'amount',
    Frequency: 'frequency',
    IsActive: 'isActive',
    CreatedAt: 'createdAt'
} as const;
export type FindAllRecurringFinancialRecordsSortByEnum = typeof FindAllRecurringFinancialRecordsSortByEnum[keyof typeof FindAllRecurringFinancialRecordsSortByEnum];
