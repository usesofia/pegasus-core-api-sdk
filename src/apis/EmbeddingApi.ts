/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.12.16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CalculateAndUpdateEmbeddingBodyRequestDto,
  ExceptionResponseEntity,
} from '../models/index';
import {
    CalculateAndUpdateEmbeddingBodyRequestDtoFromJSON,
    CalculateAndUpdateEmbeddingBodyRequestDtoToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
} from '../models/index';

export interface CalculateAndUpdateEmbeddingRequest {
    calculateAndUpdateEmbeddingBodyRequestDto: CalculateAndUpdateEmbeddingBodyRequestDto;
}

/**
 * EmbeddingApi - interface
 * 
 * @export
 * @interface EmbeddingApiInterface
 */
export interface EmbeddingApiInterface {
    /**
     * 
     * @summary Calcula e atualiza o embedding de um recurso.
     * @param {CalculateAndUpdateEmbeddingBodyRequestDto} calculateAndUpdateEmbeddingBodyRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddingApiInterface
     */
    calculateAndUpdateEmbeddingRaw(requestParameters: CalculateAndUpdateEmbeddingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Calcula e atualiza o embedding de um recurso.
     */
    calculateAndUpdateEmbedding(requestParameters: CalculateAndUpdateEmbeddingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Checa se existem recursos que precisam do cálculo do embedding e os adiciona na fila.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddingApiInterface
     */
    catchProblematicEmbeddingCalculationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Checa se existem recursos que precisam do cálculo do embedding e os adiciona na fila.
     */
    catchProblematicEmbeddingCalculations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class EmbeddingApi extends runtime.BaseAPI implements EmbeddingApiInterface {

    /**
     * Calcula e atualiza o embedding de um recurso.
     */
    async calculateAndUpdateEmbeddingRaw(requestParameters: CalculateAndUpdateEmbeddingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['calculateAndUpdateEmbeddingBodyRequestDto'] == null) {
            throw new runtime.RequiredError(
                'calculateAndUpdateEmbeddingBodyRequestDto',
                'Required parameter "calculateAndUpdateEmbeddingBodyRequestDto" was null or undefined when calling calculateAndUpdateEmbedding().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/internal/queues/calculate-embedding`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CalculateAndUpdateEmbeddingBodyRequestDtoToJSON(requestParameters['calculateAndUpdateEmbeddingBodyRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Calcula e atualiza o embedding de um recurso.
     */
    async calculateAndUpdateEmbedding(requestParameters: CalculateAndUpdateEmbeddingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.calculateAndUpdateEmbeddingRaw(requestParameters, initOverrides);
    }

    /**
     * Checa se existem recursos que precisam do cálculo do embedding e os adiciona na fila.
     */
    async catchProblematicEmbeddingCalculationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/internal/embedding/catch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Checa se existem recursos que precisam do cálculo do embedding e os adiciona na fila.
     */
    async catchProblematicEmbeddingCalculations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.catchProblematicEmbeddingCalculationsRaw(initOverrides);
    }

}
