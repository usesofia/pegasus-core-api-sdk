/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionResponseEntity,
  ExternalCreateSubcategoryRequestBodyDto,
  PartialUpdateSubcategoryRequestBodyDto,
  RemoveSubcategoryRequestBodyDto,
  SubcategoriesPageEntity,
  SubcategoryEntity,
} from '../models/index';
import {
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    ExternalCreateSubcategoryRequestBodyDtoFromJSON,
    ExternalCreateSubcategoryRequestBodyDtoToJSON,
    PartialUpdateSubcategoryRequestBodyDtoFromJSON,
    PartialUpdateSubcategoryRequestBodyDtoToJSON,
    RemoveSubcategoryRequestBodyDtoFromJSON,
    RemoveSubcategoryRequestBodyDtoToJSON,
    SubcategoriesPageEntityFromJSON,
    SubcategoriesPageEntityToJSON,
    SubcategoryEntityFromJSON,
    SubcategoryEntityToJSON,
} from '../models/index';

export interface CreateSubcategoryRequest {
    externalCreateSubcategoryRequestBodyDto: ExternalCreateSubcategoryRequestBodyDto;
    populate?: string;
}

export interface FindAllSubcategoriesRequest {
    populate?: string;
    categoryId?: string;
    searchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface FindBySlugSubcategoryRequest {
    slug: string;
    populate?: string;
}

export interface PartialUpdateSubcategoryRequest {
    id: string;
    partialUpdateSubcategoryRequestBodyDto: PartialUpdateSubcategoryRequestBodyDto;
    populate?: string;
}

export interface RemoveSubcategoryRequest {
    id: string;
    removeSubcategoryRequestBodyDto: RemoveSubcategoryRequestBodyDto;
}

/**
 * SubcategoriesApi - interface
 * 
 * @export
 * @interface SubcategoriesApiInterface
 */
export interface SubcategoriesApiInterface {
    /**
     * 
     * @summary Cria uma nova subcategoria.
     * @param {ExternalCreateSubcategoryRequestBodyDto} externalCreateSubcategoryRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoriesApiInterface
     */
    createSubcategoryRaw(requestParameters: CreateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoryEntity>>;

    /**
     * Cria uma nova subcategoria.
     */
    createSubcategory(requestParameters: CreateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoryEntity>;

    /**
     * 
     * @summary Busca todas as subcategorias.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [categoryId] ID da categoria para filtrar subcategorias.
     * @param {string} [searchTerm] Termo para busca por nome da subcategoria.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoriesApiInterface
     */
    findAllSubcategoriesRaw(requestParameters: FindAllSubcategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoriesPageEntity>>;

    /**
     * Busca todas as subcategorias.
     */
    findAllSubcategories(requestParameters: FindAllSubcategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoriesPageEntity>;

    /**
     * 
     * @summary Busca uma subcategoria pelo slug.
     * @param {string} slug Slug da subcategoria.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoriesApiInterface
     */
    findBySlugSubcategoryRaw(requestParameters: FindBySlugSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoryEntity>>;

    /**
     * Busca uma subcategoria pelo slug.
     */
    findBySlugSubcategory(requestParameters: FindBySlugSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoryEntity>;

    /**
     * 
     * @summary Atualiza parcialmente uma subcategoria.
     * @param {string} id Identificador da subcategoria.
     * @param {PartialUpdateSubcategoryRequestBodyDto} partialUpdateSubcategoryRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoriesApiInterface
     */
    partialUpdateSubcategoryRaw(requestParameters: PartialUpdateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoryEntity>>;

    /**
     * Atualiza parcialmente uma subcategoria.
     */
    partialUpdateSubcategory(requestParameters: PartialUpdateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoryEntity>;

    /**
     * 
     * @summary Remove uma subcategoria.
     * @param {string} id Identificador da subcategoria.
     * @param {RemoveSubcategoryRequestBodyDto} removeSubcategoryRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoriesApiInterface
     */
    removeSubcategoryRaw(requestParameters: RemoveSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove uma subcategoria.
     */
    removeSubcategory(requestParameters: RemoveSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class SubcategoriesApi extends runtime.BaseAPI implements SubcategoriesApiInterface {

    /**
     * Cria uma nova subcategoria.
     */
    async createSubcategoryRaw(requestParameters: CreateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoryEntity>> {
        if (requestParameters['externalCreateSubcategoryRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'externalCreateSubcategoryRequestBodyDto',
                'Required parameter "externalCreateSubcategoryRequestBodyDto" was null or undefined when calling createSubcategory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/external/subcategories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExternalCreateSubcategoryRequestBodyDtoToJSON(requestParameters['externalCreateSubcategoryRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubcategoryEntityFromJSON(jsonValue));
    }

    /**
     * Cria uma nova subcategoria.
     */
    async createSubcategory(requestParameters: CreateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoryEntity> {
        const response = await this.createSubcategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todas as subcategorias.
     */
    async findAllSubcategoriesRaw(requestParameters: FindAllSubcategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoriesPageEntity>> {
        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['categoryId'] != null) {
            queryParameters['categoryId'] = requestParameters['categoryId'];
        }

        if (requestParameters['searchTerm'] != null) {
            queryParameters['searchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external/subcategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubcategoriesPageEntityFromJSON(jsonValue));
    }

    /**
     * Busca todas as subcategorias.
     */
    async findAllSubcategories(requestParameters: FindAllSubcategoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoriesPageEntity> {
        const response = await this.findAllSubcategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca uma subcategoria pelo slug.
     */
    async findBySlugSubcategoryRaw(requestParameters: FindBySlugSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoryEntity>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling findBySlugSubcategory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/external/subcategories/slug/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubcategoryEntityFromJSON(jsonValue));
    }

    /**
     * Busca uma subcategoria pelo slug.
     */
    async findBySlugSubcategory(requestParameters: FindBySlugSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoryEntity> {
        const response = await this.findBySlugSubcategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Atualiza parcialmente uma subcategoria.
     */
    async partialUpdateSubcategoryRaw(requestParameters: PartialUpdateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoryEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling partialUpdateSubcategory().'
            );
        }

        if (requestParameters['partialUpdateSubcategoryRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'partialUpdateSubcategoryRequestBodyDto',
                'Required parameter "partialUpdateSubcategoryRequestBodyDto" was null or undefined when calling partialUpdateSubcategory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/external/subcategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PartialUpdateSubcategoryRequestBodyDtoToJSON(requestParameters['partialUpdateSubcategoryRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubcategoryEntityFromJSON(jsonValue));
    }

    /**
     * Atualiza parcialmente uma subcategoria.
     */
    async partialUpdateSubcategory(requestParameters: PartialUpdateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoryEntity> {
        const response = await this.partialUpdateSubcategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove uma subcategoria.
     */
    async removeSubcategoryRaw(requestParameters: RemoveSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeSubcategory().'
            );
        }

        if (requestParameters['removeSubcategoryRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'removeSubcategoryRequestBodyDto',
                'Required parameter "removeSubcategoryRequestBodyDto" was null or undefined when calling removeSubcategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/external/subcategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveSubcategoryRequestBodyDtoToJSON(requestParameters['removeSubcategoryRequestBodyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove uma subcategoria.
     */
    async removeSubcategory(requestParameters: RemoveSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeSubcategoryRaw(requestParameters, initOverrides);
    }

}
