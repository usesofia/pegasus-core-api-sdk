/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedNormalizedSubcategory } from './CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedNormalizedSubcategory';
import {
    CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedNormalizedSubcategoryFromJSON,
    CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedNormalizedSubcategoryFromJSONTyped,
    CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedNormalizedSubcategoryToJSON,
    CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedNormalizedSubcategoryToJSONTyped,
} from './CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedNormalizedSubcategory';
import type { CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedCategory } from './CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedCategory';
import {
    CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedCategoryFromJSON,
    CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedCategoryFromJSONTyped,
    CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedCategoryToJSON,
    CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedCategoryToJSONTyped,
} from './CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedCategory';

/**
 * 
 * @export
 * @interface ExternalCreateSubcategoryRequestBodyDto
 */
export interface ExternalCreateSubcategoryRequestBodyDto {
    /**
     * Nome da subcategoria.
     * @type {string}
     * @memberof ExternalCreateSubcategoryRequestBodyDto
     */
    name: string;
    /**
     * Slug da subcategoria.
     * @type {string}
     * @memberof ExternalCreateSubcategoryRequestBodyDto
     */
    slug: string;
    /**
     * Índice da subcategoria.
     * @type {number}
     * @memberof ExternalCreateSubcategoryRequestBodyDto
     */
    index: number;
    /**
     * 
     * @type {string}
     * @memberof ExternalCreateSubcategoryRequestBodyDto
     */
    category: string;
    /**
     * 
     * @type {CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedCategory}
     * @memberof ExternalCreateSubcategoryRequestBodyDto
     */
    populatedCategory?: CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedCategory | null;
    /**
     * Identificador da subcategoria normalizada.
     * @type {string}
     * @memberof ExternalCreateSubcategoryRequestBodyDto
     */
    normalizedSubcategory?: string | null;
    /**
     * 
     * @type {CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedNormalizedSubcategory}
     * @memberof ExternalCreateSubcategoryRequestBodyDto
     */
    populatedNormalizedSubcategory?: CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedNormalizedSubcategory | null;
    /**
     * Indica se a subcategoria deve ser exibida no DRE.
     * @type {boolean}
     * @memberof ExternalCreateSubcategoryRequestBodyDto
     */
    considerInDre: boolean;
    /**
     * Descrição da subcategoria.
     * @type {string}
     * @memberof ExternalCreateSubcategoryRequestBodyDto
     */
    description: string;
    /**
     * Indica se a subcategoria está ativa.
     * @type {boolean}
     * @memberof ExternalCreateSubcategoryRequestBodyDto
     */
    active?: boolean;
    /**
     * Pontuação de busca da subcategoria.
     * @type {number}
     * @memberof ExternalCreateSubcategoryRequestBodyDto
     */
    searchScore?: number | null;
    /**
     * Canal de origem da operação
     * @type {string}
     * @memberof ExternalCreateSubcategoryRequestBodyDto
     */
    channel: ExternalCreateSubcategoryRequestBodyDtoChannelEnum;
}


/**
 * @export
 */
export const ExternalCreateSubcategoryRequestBodyDtoChannelEnum = {
    WebApp: 'WEB_APP',
    Whatsapp: 'WHATSAPP',
    System: 'SYSTEM',
    Email: 'EMAIL'
} as const;
export type ExternalCreateSubcategoryRequestBodyDtoChannelEnum = typeof ExternalCreateSubcategoryRequestBodyDtoChannelEnum[keyof typeof ExternalCreateSubcategoryRequestBodyDtoChannelEnum];


/**
 * Check if a given object implements the ExternalCreateSubcategoryRequestBodyDto interface.
 */
export function instanceOfExternalCreateSubcategoryRequestBodyDto(value: object): value is ExternalCreateSubcategoryRequestBodyDto {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('slug' in value) || value['slug'] === undefined) return false;
    if (!('index' in value) || value['index'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('considerInDre' in value) || value['considerInDre'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('channel' in value) || value['channel'] === undefined) return false;
    return true;
}

export function ExternalCreateSubcategoryRequestBodyDtoFromJSON(json: any): ExternalCreateSubcategoryRequestBodyDto {
    return ExternalCreateSubcategoryRequestBodyDtoFromJSONTyped(json, false);
}

export function ExternalCreateSubcategoryRequestBodyDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalCreateSubcategoryRequestBodyDto {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'slug': json['slug'],
        'index': json['index'],
        'category': json['category'],
        'populatedCategory': json['populatedCategory'] == null ? undefined : CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedCategoryFromJSON(json['populatedCategory']),
        'normalizedSubcategory': json['normalizedSubcategory'] == null ? undefined : json['normalizedSubcategory'],
        'populatedNormalizedSubcategory': json['populatedNormalizedSubcategory'] == null ? undefined : CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedNormalizedSubcategoryFromJSON(json['populatedNormalizedSubcategory']),
        'considerInDre': json['considerInDre'],
        'description': json['description'],
        'active': json['active'] == null ? undefined : json['active'],
        'searchScore': json['searchScore'] == null ? undefined : json['searchScore'],
        'channel': json['channel'],
    };
}

export function ExternalCreateSubcategoryRequestBodyDtoToJSON(json: any): ExternalCreateSubcategoryRequestBodyDto {
    return ExternalCreateSubcategoryRequestBodyDtoToJSONTyped(json, false);
}

export function ExternalCreateSubcategoryRequestBodyDtoToJSONTyped(value?: ExternalCreateSubcategoryRequestBodyDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'slug': value['slug'],
        'index': value['index'],
        'category': value['category'],
        'populatedCategory': CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedCategoryToJSON(value['populatedCategory']),
        'normalizedSubcategory': value['normalizedSubcategory'],
        'populatedNormalizedSubcategory': CreateFinancialRecordRequestBodyDtoPopulatedSubcategoryPopulatedNormalizedSubcategoryToJSON(value['populatedNormalizedSubcategory']),
        'considerInDre': value['considerInDre'],
        'description': value['description'],
        'active': value['active'],
        'searchScore': value['searchScore'],
        'channel': value['channel'],
    };
}

