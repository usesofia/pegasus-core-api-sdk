/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e m√©dias empresas.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthUserEntityOrganizationParent } from './AuthUserEntityOrganizationParent';
import {
    AuthUserEntityOrganizationParentFromJSON,
    AuthUserEntityOrganizationParentFromJSONTyped,
    AuthUserEntityOrganizationParentToJSON,
    AuthUserEntityOrganizationParentToJSONTyped,
} from './AuthUserEntityOrganizationParent';
import type { AuthUserEntityOrganizationChildrenInner } from './AuthUserEntityOrganizationChildrenInner';
import {
    AuthUserEntityOrganizationChildrenInnerFromJSON,
    AuthUserEntityOrganizationChildrenInnerFromJSONTyped,
    AuthUserEntityOrganizationChildrenInnerToJSON,
    AuthUserEntityOrganizationChildrenInnerToJSONTyped,
} from './AuthUserEntityOrganizationChildrenInner';

/**
 * 
 * @export
 * @interface AuthUserEntityOrganization
 */
export interface AuthUserEntityOrganization {
    /**
     * 
     * @type {string}
     * @memberof AuthUserEntityOrganization
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof AuthUserEntityOrganization
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AuthUserEntityOrganization
     */
    role: AuthUserEntityOrganizationRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthUserEntityOrganization
     */
    type: AuthUserEntityOrganizationTypeEnum;
    /**
     * 
     * @type {AuthUserEntityOrganizationParent}
     * @memberof AuthUserEntityOrganization
     */
    parent?: AuthUserEntityOrganizationParent | null;
    /**
     * 
     * @type {Array<AuthUserEntityOrganizationChildrenInner>}
     * @memberof AuthUserEntityOrganization
     */
    children?: Array<AuthUserEntityOrganizationChildrenInner> | null;
}


/**
 * @export
 */
export const AuthUserEntityOrganizationRoleEnum = {
    OrgAdmin: 'org:admin',
    OrgMember: 'org:member'
} as const;
export type AuthUserEntityOrganizationRoleEnum = typeof AuthUserEntityOrganizationRoleEnum[keyof typeof AuthUserEntityOrganizationRoleEnum];

/**
 * @export
 */
export const AuthUserEntityOrganizationTypeEnum = {
    Leaf: 'LEAF',
    Group: 'GROUP'
} as const;
export type AuthUserEntityOrganizationTypeEnum = typeof AuthUserEntityOrganizationTypeEnum[keyof typeof AuthUserEntityOrganizationTypeEnum];


/**
 * Check if a given object implements the AuthUserEntityOrganization interface.
 */
export function instanceOfAuthUserEntityOrganization(value: object): value is AuthUserEntityOrganization {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function AuthUserEntityOrganizationFromJSON(json: any): AuthUserEntityOrganization {
    return AuthUserEntityOrganizationFromJSONTyped(json, false);
}

export function AuthUserEntityOrganizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthUserEntityOrganization {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'role': json['role'],
        'type': json['type'],
        'parent': json['parent'] == null ? undefined : AuthUserEntityOrganizationParentFromJSON(json['parent']),
        'children': json['children'] == null ? undefined : ((json['children'] as Array<any>).map(AuthUserEntityOrganizationChildrenInnerFromJSON)),
    };
}

export function AuthUserEntityOrganizationToJSON(json: any): AuthUserEntityOrganization {
    return AuthUserEntityOrganizationToJSONTyped(json, false);
}

export function AuthUserEntityOrganizationToJSONTyped(value?: AuthUserEntityOrganization | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'role': value['role'],
        'type': value['type'],
        'parent': AuthUserEntityOrganizationParentToJSON(value['parent']),
        'children': value['children'] == null ? undefined : ((value['children'] as Array<any>).map(AuthUserEntityOrganizationChildrenInnerToJSON)),
    };
}

