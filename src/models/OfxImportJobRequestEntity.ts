/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.12.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OfxImportJobRequestEntity
 */
export interface OfxImportJobRequestEntity {
    /**
     * Identificador da solicitação de importação OFX.
     * @type {string}
     * @memberof OfxImportJobRequestEntity
     */
    id: string;
    /**
     * Identificador da conta bancária.
     * @type {string}
     * @memberof OfxImportJobRequestEntity
     */
    bankAccountId: string;
    /**
     * Nome da conta bancária.
     * @type {string}
     * @memberof OfxImportJobRequestEntity
     */
    bankAccountName: string;
    /**
     * Nome do arquivo OFX.
     * @type {string}
     * @memberof OfxImportJobRequestEntity
     */
    fileName: string;
    /**
     * URL assinada do arquivo OFX.
     * @type {string}
     * @memberof OfxImportJobRequestEntity
     */
    signedUrl: string;
    /**
     * Número máximo de transações para sugestão de AI na importação.
     * @type {number}
     * @memberof OfxImportJobRequestEntity
     */
    maxTransactionsForAiSuggestionOnImport?: number;
    /**
     * Identificador do usuário que solicitou a importação.
     * @type {string}
     * @memberof OfxImportJobRequestEntity
     */
    requesterUserId: string;
    /**
     * Número total de transações no arquivo OFX.
     * @type {number}
     * @memberof OfxImportJobRequestEntity
     */
    totalTransactions?: number | null;
    /**
     * Data da transação mais antiga no arquivo OFX.
     * @type {any}
     * @memberof OfxImportJobRequestEntity
     */
    periodStartDate?: any | null;
    /**
     * Data da transação mais recente no arquivo OFX.
     * @type {any}
     * @memberof OfxImportJobRequestEntity
     */
    periodEndDate?: any | null;
    /**
     * Data de criação da solicitação de importação.
     * @type {any}
     * @memberof OfxImportJobRequestEntity
     */
    createdAt: any | null;
    /**
     * Data de atualização da solicitação de importação.
     * @type {any}
     * @memberof OfxImportJobRequestEntity
     */
    updatedAt: any | null;
    /**
     * Data de exclusão da solicitação de importação.
     * @type {any}
     * @memberof OfxImportJobRequestEntity
     */
    deletedAt: any | null;
}

/**
 * Check if a given object implements the OfxImportJobRequestEntity interface.
 */
export function instanceOfOfxImportJobRequestEntity(value: object): value is OfxImportJobRequestEntity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('bankAccountId' in value) || value['bankAccountId'] === undefined) return false;
    if (!('bankAccountName' in value) || value['bankAccountName'] === undefined) return false;
    if (!('fileName' in value) || value['fileName'] === undefined) return false;
    if (!('signedUrl' in value) || value['signedUrl'] === undefined) return false;
    if (!('requesterUserId' in value) || value['requesterUserId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('deletedAt' in value) || value['deletedAt'] === undefined) return false;
    return true;
}

export function OfxImportJobRequestEntityFromJSON(json: any): OfxImportJobRequestEntity {
    return OfxImportJobRequestEntityFromJSONTyped(json, false);
}

export function OfxImportJobRequestEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): OfxImportJobRequestEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'bankAccountId': json['bankAccountId'],
        'bankAccountName': json['bankAccountName'],
        'fileName': json['fileName'],
        'signedUrl': json['signedUrl'],
        'maxTransactionsForAiSuggestionOnImport': json['maxTransactionsForAiSuggestionOnImport'] == null ? undefined : json['maxTransactionsForAiSuggestionOnImport'],
        'requesterUserId': json['requesterUserId'],
        'totalTransactions': json['totalTransactions'] == null ? undefined : json['totalTransactions'],
        'periodStartDate': json['periodStartDate'] == null ? undefined : json['periodStartDate'],
        'periodEndDate': json['periodEndDate'] == null ? undefined : json['periodEndDate'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
        'deletedAt': json['deletedAt'],
    };
}

export function OfxImportJobRequestEntityToJSON(json: any): OfxImportJobRequestEntity {
    return OfxImportJobRequestEntityToJSONTyped(json, false);
}

export function OfxImportJobRequestEntityToJSONTyped(value?: OfxImportJobRequestEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'bankAccountId': value['bankAccountId'],
        'bankAccountName': value['bankAccountName'],
        'fileName': value['fileName'],
        'signedUrl': value['signedUrl'],
        'maxTransactionsForAiSuggestionOnImport': value['maxTransactionsForAiSuggestionOnImport'],
        'requesterUserId': value['requesterUserId'],
        'totalTransactions': value['totalTransactions'],
        'periodStartDate': value['periodStartDate'],
        'periodEndDate': value['periodEndDate'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
        'deletedAt': value['deletedAt'],
    };
}

