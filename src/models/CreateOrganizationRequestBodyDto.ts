/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreateOrganizationRequestBodyDtoPopulatedChildrenInner } from './CreateOrganizationRequestBodyDtoPopulatedChildrenInner';
import {
    CreateOrganizationRequestBodyDtoPopulatedChildrenInnerFromJSON,
    CreateOrganizationRequestBodyDtoPopulatedChildrenInnerFromJSONTyped,
    CreateOrganizationRequestBodyDtoPopulatedChildrenInnerToJSON,
    CreateOrganizationRequestBodyDtoPopulatedChildrenInnerToJSONTyped,
} from './CreateOrganizationRequestBodyDtoPopulatedChildrenInner';
import type { CreateOrganizationRequestBodyDtoGroupSettings } from './CreateOrganizationRequestBodyDtoGroupSettings';
import {
    CreateOrganizationRequestBodyDtoGroupSettingsFromJSON,
    CreateOrganizationRequestBodyDtoGroupSettingsFromJSONTyped,
    CreateOrganizationRequestBodyDtoGroupSettingsToJSON,
    CreateOrganizationRequestBodyDtoGroupSettingsToJSONTyped,
} from './CreateOrganizationRequestBodyDtoGroupSettings';
import type { CreateOrganizationRequestBodyDtoPopulatedParent } from './CreateOrganizationRequestBodyDtoPopulatedParent';
import {
    CreateOrganizationRequestBodyDtoPopulatedParentFromJSON,
    CreateOrganizationRequestBodyDtoPopulatedParentFromJSONTyped,
    CreateOrganizationRequestBodyDtoPopulatedParentToJSON,
    CreateOrganizationRequestBodyDtoPopulatedParentToJSONTyped,
} from './CreateOrganizationRequestBodyDtoPopulatedParent';

/**
 * 
 * @export
 * @interface CreateOrganizationRequestBodyDto
 */
export interface CreateOrganizationRequestBodyDto {
    /**
     * Nome da organização.
     * @type {string}
     * @memberof CreateOrganizationRequestBodyDto
     */
    name: string;
    /**
     * Slug da organização.
     * @type {string}
     * @memberof CreateOrganizationRequestBodyDto
     */
    slug: string;
    /**
     * Tipo da organização.
     * @type {string}
     * @memberof CreateOrganizationRequestBodyDto
     */
    type: CreateOrganizationRequestBodyDtoTypeEnum;
    /**
     * Documento da organização. Geralmente CNPJ.
     * @type {string}
     * @memberof CreateOrganizationRequestBodyDto
     */
    document?: string;
    /**
     * Identificador da organização pai.
     * @type {string}
     * @memberof CreateOrganizationRequestBodyDto
     */
    parent?: string | null;
    /**
     * 
     * @type {CreateOrganizationRequestBodyDtoPopulatedParent}
     * @memberof CreateOrganizationRequestBodyDto
     */
    populatedParent?: CreateOrganizationRequestBodyDtoPopulatedParent | null;
    /**
     * Identificadores das organizações filhas.
     * @type {Array<string>}
     * @memberof CreateOrganizationRequestBodyDto
     */
    children?: Array<string> | null;
    /**
     * Organizações filhas.
     * @type {Array<CreateOrganizationRequestBodyDtoPopulatedChildrenInner>}
     * @memberof CreateOrganizationRequestBodyDto
     */
    populatedChildren?: Array<CreateOrganizationRequestBodyDtoPopulatedChildrenInner> | null;
    /**
     * Descrição da organização.
     * @type {string}
     * @memberof CreateOrganizationRequestBodyDto
     */
    description?: string;
    /**
     * 
     * @type {CreateOrganizationRequestBodyDtoGroupSettings}
     * @memberof CreateOrganizationRequestBodyDto
     */
    groupSettings?: CreateOrganizationRequestBodyDtoGroupSettings;
    /**
     * Imagem do logo em base64.
     * @type {string}
     * @memberof CreateOrganizationRequestBodyDto
     */
    imageInBase64?: string;
}


/**
 * @export
 */
export const CreateOrganizationRequestBodyDtoTypeEnum = {
    Leaf: 'LEAF',
    Group: 'GROUP'
} as const;
export type CreateOrganizationRequestBodyDtoTypeEnum = typeof CreateOrganizationRequestBodyDtoTypeEnum[keyof typeof CreateOrganizationRequestBodyDtoTypeEnum];


/**
 * Check if a given object implements the CreateOrganizationRequestBodyDto interface.
 */
export function instanceOfCreateOrganizationRequestBodyDto(value: object): value is CreateOrganizationRequestBodyDto {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('slug' in value) || value['slug'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function CreateOrganizationRequestBodyDtoFromJSON(json: any): CreateOrganizationRequestBodyDto {
    return CreateOrganizationRequestBodyDtoFromJSONTyped(json, false);
}

export function CreateOrganizationRequestBodyDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOrganizationRequestBodyDto {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'slug': json['slug'],
        'type': json['type'],
        'document': json['document'] == null ? undefined : json['document'],
        'parent': json['parent'] == null ? undefined : json['parent'],
        'populatedParent': json['populatedParent'] == null ? undefined : CreateOrganizationRequestBodyDtoPopulatedParentFromJSON(json['populatedParent']),
        'children': json['children'] == null ? undefined : json['children'],
        'populatedChildren': json['populatedChildren'] == null ? undefined : ((json['populatedChildren'] as Array<any>).map(CreateOrganizationRequestBodyDtoPopulatedChildrenInnerFromJSON)),
        'description': json['description'] == null ? undefined : json['description'],
        'groupSettings': json['groupSettings'] == null ? undefined : CreateOrganizationRequestBodyDtoGroupSettingsFromJSON(json['groupSettings']),
        'imageInBase64': json['imageInBase64'] == null ? undefined : json['imageInBase64'],
    };
}

export function CreateOrganizationRequestBodyDtoToJSON(json: any): CreateOrganizationRequestBodyDto {
    return CreateOrganizationRequestBodyDtoToJSONTyped(json, false);
}

export function CreateOrganizationRequestBodyDtoToJSONTyped(value?: CreateOrganizationRequestBodyDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'slug': value['slug'],
        'type': value['type'],
        'document': value['document'],
        'parent': value['parent'],
        'populatedParent': CreateOrganizationRequestBodyDtoPopulatedParentToJSON(value['populatedParent']),
        'children': value['children'],
        'populatedChildren': value['populatedChildren'] == null ? undefined : ((value['populatedChildren'] as Array<any>).map(CreateOrganizationRequestBodyDtoPopulatedChildrenInnerToJSON)),
        'description': value['description'],
        'groupSettings': CreateOrganizationRequestBodyDtoGroupSettingsToJSON(value['groupSettings']),
        'imageInBase64': value['imageInBase64'],
    };
}

