/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MemberEntity
 */
export interface MemberEntity {
    /**
     * Id da associação membro/organização.
     * @type {string}
     * @memberof MemberEntity
     */
    id: string;
    /**
     * Id do usuário membro.
     * @type {string}
     * @memberof MemberEntity
     */
    user: string;
    /**
     * Email do membro.
     * @type {string}
     * @memberof MemberEntity
     */
    email: string;
    /**
     * Papel do membro na organização.
     * @type {string}
     * @memberof MemberEntity
     */
    role: MemberEntityRoleEnum;
    /**
     * Primeiro nome do membro.
     * @type {string}
     * @memberof MemberEntity
     */
    firstName?: string | null;
    /**
     * Sobrenome do membro.
     * @type {string}
     * @memberof MemberEntity
     */
    lastName?: string | null;
    /**
     * Url da foto do membro.
     * @type {string}
     * @memberof MemberEntity
     */
    imageUrl?: string | null;
    /**
     * Data de criação do membro.
     * @type {any}
     * @memberof MemberEntity
     */
    createdAt: any | null;
    /**
     * Data de atualização do membro.
     * @type {any}
     * @memberof MemberEntity
     */
    updatedAt: any | null;
}


/**
 * @export
 */
export const MemberEntityRoleEnum = {
    OrgAdmin: 'org:admin',
    OrgMember: 'org:member'
} as const;
export type MemberEntityRoleEnum = typeof MemberEntityRoleEnum[keyof typeof MemberEntityRoleEnum];


/**
 * Check if a given object implements the MemberEntity interface.
 */
export function instanceOfMemberEntity(value: object): value is MemberEntity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function MemberEntityFromJSON(json: any): MemberEntity {
    return MemberEntityFromJSONTyped(json, false);
}

export function MemberEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): MemberEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'user': json['user'],
        'email': json['email'],
        'role': json['role'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'imageUrl': json['imageUrl'] == null ? undefined : json['imageUrl'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
    };
}

export function MemberEntityToJSON(json: any): MemberEntity {
    return MemberEntityToJSONTyped(json, false);
}

export function MemberEntityToJSONTyped(value?: MemberEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'user': value['user'],
        'email': value['email'],
        'role': value['role'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'imageUrl': value['imageUrl'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
    };
}

