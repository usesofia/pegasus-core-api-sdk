/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreateOrUpdateBankTransactionRequestBodyDtoPopulatedBankAccount } from './CreateOrUpdateBankTransactionRequestBodyDtoPopulatedBankAccount';
import {
    CreateOrUpdateBankTransactionRequestBodyDtoPopulatedBankAccountFromJSON,
    CreateOrUpdateBankTransactionRequestBodyDtoPopulatedBankAccountFromJSONTyped,
    CreateOrUpdateBankTransactionRequestBodyDtoPopulatedBankAccountToJSON,
    CreateOrUpdateBankTransactionRequestBodyDtoPopulatedBankAccountToJSONTyped,
} from './CreateOrUpdateBankTransactionRequestBodyDtoPopulatedBankAccount';
import type { CreateOrUpdateBankTransactionRequestBodyDtoCreditCardMetadata } from './CreateOrUpdateBankTransactionRequestBodyDtoCreditCardMetadata';
import {
    CreateOrUpdateBankTransactionRequestBodyDtoCreditCardMetadataFromJSON,
    CreateOrUpdateBankTransactionRequestBodyDtoCreditCardMetadataFromJSONTyped,
    CreateOrUpdateBankTransactionRequestBodyDtoCreditCardMetadataToJSON,
    CreateOrUpdateBankTransactionRequestBodyDtoCreditCardMetadataToJSONTyped,
} from './CreateOrUpdateBankTransactionRequestBodyDtoCreditCardMetadata';
import type { CreateOrUpdateBankTransactionRequestBodyDtoMerchant } from './CreateOrUpdateBankTransactionRequestBodyDtoMerchant';
import {
    CreateOrUpdateBankTransactionRequestBodyDtoMerchantFromJSON,
    CreateOrUpdateBankTransactionRequestBodyDtoMerchantFromJSONTyped,
    CreateOrUpdateBankTransactionRequestBodyDtoMerchantToJSON,
    CreateOrUpdateBankTransactionRequestBodyDtoMerchantToJSONTyped,
} from './CreateOrUpdateBankTransactionRequestBodyDtoMerchant';
import type { CreateOrUpdateBankTransactionRequestBodyDtoPaymentData } from './CreateOrUpdateBankTransactionRequestBodyDtoPaymentData';
import {
    CreateOrUpdateBankTransactionRequestBodyDtoPaymentDataFromJSON,
    CreateOrUpdateBankTransactionRequestBodyDtoPaymentDataFromJSONTyped,
    CreateOrUpdateBankTransactionRequestBodyDtoPaymentDataToJSON,
    CreateOrUpdateBankTransactionRequestBodyDtoPaymentDataToJSONTyped,
} from './CreateOrUpdateBankTransactionRequestBodyDtoPaymentData';

/**
 * 
 * @export
 * @interface BankTransactionEntity
 */
export interface BankTransactionEntity {
    /**
     * Identificador da movimentação financeira.
     * @type {string}
     * @memberof BankTransactionEntity
     */
    id: string;
    /**
     * Identificador da organização dona da movimentação financeira.
     * @type {string}
     * @memberof BankTransactionEntity
     */
    ownerOrganization: string;
    /**
     * Identificador da conta bancária da movimentação financeira.
     * @type {string}
     * @memberof BankTransactionEntity
     */
    bankAccount: string;
    /**
     * 
     * @type {CreateOrUpdateBankTransactionRequestBodyDtoPopulatedBankAccount}
     * @memberof BankTransactionEntity
     */
    populatedBankAccount?: CreateOrUpdateBankTransactionRequestBodyDtoPopulatedBankAccount | null;
    /**
     * Provedor da movimentação financeira.
     * @type {string}
     * @memberof BankTransactionEntity
     */
    provider: BankTransactionEntityProviderEnum;
    /**
     * Identificador da movimentação financeira no provedor.
     * @type {string}
     * @memberof BankTransactionEntity
     */
    providerTransactionId: string;
    /**
     * Valor da movimentação financeira em centavos.
     * @type {number}
     * @memberof BankTransactionEntity
     */
    amountInBrl: number;
    /**
     * Data da movimentação financeira.
     * @type {any}
     * @memberof BankTransactionEntity
     */
    date: any | null;
    /**
     * Tipo da movimentação financeira (entrada ou saída).
     * @type {string}
     * @memberof BankTransactionEntity
     */
    type: BankTransactionEntityTypeEnum;
    /**
     * Descrição da movimentação financeira.
     * @type {string}
     * @memberof BankTransactionEntity
     */
    description?: string | null;
    /**
     * Status da movimentação financeira.
     * @type {string}
     * @memberof BankTransactionEntity
     */
    status: BankTransactionEntityStatusEnum;
    /**
     * Indica se a movimentação financeira deve ser ignorada.
     * @type {boolean}
     * @memberof BankTransactionEntity
     */
    ignored: boolean;
    /**
     * Identificador externo da movimentação financeira.
     * @type {string}
     * @memberof BankTransactionEntity
     */
    externalId?: string | null;
    /**
     * Valor da movimentação financeira.
     * @type {number}
     * @memberof BankTransactionEntity
     */
    amount?: number | null;
    /**
     * Valor da movimentação financeira na moeda da conta.
     * @type {number}
     * @memberof BankTransactionEntity
     */
    amountInAccountCurrency?: number | null;
    /**
     * Saldo após a movimentação financeira.
     * @type {number}
     * @memberof BankTransactionEntity
     */
    balance?: number | null;
    /**
     * Código da moeda da movimentação financeira.
     * @type {string}
     * @memberof BankTransactionEntity
     */
    currencyCode?: string | null;
    /**
     * Categoria da movimentação financeira.
     * @type {string}
     * @memberof BankTransactionEntity
     */
    category?: string | null;
    /**
     * Código do provedor da movimentação financeira.
     * @type {string}
     * @memberof BankTransactionEntity
     */
    providerCode?: string | null;
    /**
     * 
     * @type {CreateOrUpdateBankTransactionRequestBodyDtoPaymentData}
     * @memberof BankTransactionEntity
     */
    paymentData?: CreateOrUpdateBankTransactionRequestBodyDtoPaymentData | null;
    /**
     * 
     * @type {CreateOrUpdateBankTransactionRequestBodyDtoCreditCardMetadata}
     * @memberof BankTransactionEntity
     */
    creditCardMetadata?: CreateOrUpdateBankTransactionRequestBodyDtoCreditCardMetadata | null;
    /**
     * 
     * @type {CreateOrUpdateBankTransactionRequestBodyDtoMerchant}
     * @memberof BankTransactionEntity
     */
    merchant?: CreateOrUpdateBankTransactionRequestBodyDtoMerchant | null;
    /**
     * Identificador da categoria da movimentação financeira.
     * @type {string}
     * @memberof BankTransactionEntity
     */
    categoryId?: string | null;
    /**
     * Tipo de operação da movimentação financeira.
     * @type {string}
     * @memberof BankTransactionEntity
     */
    operationType?: string | null;
    /**
     * Data de criação da movimentação financeira.
     * @type {any}
     * @memberof BankTransactionEntity
     */
    createdAt: any | null;
    /**
     * Data de atualização da movimentação financeira.
     * @type {any}
     * @memberof BankTransactionEntity
     */
    updatedAt: any | null;
}


/**
 * @export
 */
export const BankTransactionEntityProviderEnum = {
    Pluggy: 'PLUGGY',
    Ofx: 'OFX',
    Other: 'OTHER'
} as const;
export type BankTransactionEntityProviderEnum = typeof BankTransactionEntityProviderEnum[keyof typeof BankTransactionEntityProviderEnum];

/**
 * @export
 */
export const BankTransactionEntityTypeEnum = {
    Debit: 'DEBIT',
    Credit: 'CREDIT'
} as const;
export type BankTransactionEntityTypeEnum = typeof BankTransactionEntityTypeEnum[keyof typeof BankTransactionEntityTypeEnum];

/**
 * @export
 */
export const BankTransactionEntityStatusEnum = {
    Pending: 'PENDING',
    Posted: 'POSTED'
} as const;
export type BankTransactionEntityStatusEnum = typeof BankTransactionEntityStatusEnum[keyof typeof BankTransactionEntityStatusEnum];


/**
 * Check if a given object implements the BankTransactionEntity interface.
 */
export function instanceOfBankTransactionEntity(value: object): value is BankTransactionEntity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('ownerOrganization' in value) || value['ownerOrganization'] === undefined) return false;
    if (!('bankAccount' in value) || value['bankAccount'] === undefined) return false;
    if (!('provider' in value) || value['provider'] === undefined) return false;
    if (!('providerTransactionId' in value) || value['providerTransactionId'] === undefined) return false;
    if (!('amountInBrl' in value) || value['amountInBrl'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('ignored' in value) || value['ignored'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function BankTransactionEntityFromJSON(json: any): BankTransactionEntity {
    return BankTransactionEntityFromJSONTyped(json, false);
}

export function BankTransactionEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): BankTransactionEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'ownerOrganization': json['ownerOrganization'],
        'bankAccount': json['bankAccount'],
        'populatedBankAccount': json['populatedBankAccount'] == null ? undefined : CreateOrUpdateBankTransactionRequestBodyDtoPopulatedBankAccountFromJSON(json['populatedBankAccount']),
        'provider': json['provider'],
        'providerTransactionId': json['providerTransactionId'],
        'amountInBrl': json['amountInBrl'],
        'date': json['date'],
        'type': json['type'],
        'description': json['description'] == null ? undefined : json['description'],
        'status': json['status'],
        'ignored': json['ignored'],
        'externalId': json['externalId'] == null ? undefined : json['externalId'],
        'amount': json['amount'] == null ? undefined : json['amount'],
        'amountInAccountCurrency': json['amountInAccountCurrency'] == null ? undefined : json['amountInAccountCurrency'],
        'balance': json['balance'] == null ? undefined : json['balance'],
        'currencyCode': json['currencyCode'] == null ? undefined : json['currencyCode'],
        'category': json['category'] == null ? undefined : json['category'],
        'providerCode': json['providerCode'] == null ? undefined : json['providerCode'],
        'paymentData': json['paymentData'] == null ? undefined : CreateOrUpdateBankTransactionRequestBodyDtoPaymentDataFromJSON(json['paymentData']),
        'creditCardMetadata': json['creditCardMetadata'] == null ? undefined : CreateOrUpdateBankTransactionRequestBodyDtoCreditCardMetadataFromJSON(json['creditCardMetadata']),
        'merchant': json['merchant'] == null ? undefined : CreateOrUpdateBankTransactionRequestBodyDtoMerchantFromJSON(json['merchant']),
        'categoryId': json['categoryId'] == null ? undefined : json['categoryId'],
        'operationType': json['operationType'] == null ? undefined : json['operationType'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
    };
}

export function BankTransactionEntityToJSON(json: any): BankTransactionEntity {
    return BankTransactionEntityToJSONTyped(json, false);
}

export function BankTransactionEntityToJSONTyped(value?: BankTransactionEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'ownerOrganization': value['ownerOrganization'],
        'bankAccount': value['bankAccount'],
        'populatedBankAccount': CreateOrUpdateBankTransactionRequestBodyDtoPopulatedBankAccountToJSON(value['populatedBankAccount']),
        'provider': value['provider'],
        'providerTransactionId': value['providerTransactionId'],
        'amountInBrl': value['amountInBrl'],
        'date': value['date'],
        'type': value['type'],
        'description': value['description'],
        'status': value['status'],
        'ignored': value['ignored'],
        'externalId': value['externalId'],
        'amount': value['amount'],
        'amountInAccountCurrency': value['amountInAccountCurrency'],
        'balance': value['balance'],
        'currencyCode': value['currencyCode'],
        'category': value['category'],
        'providerCode': value['providerCode'],
        'paymentData': CreateOrUpdateBankTransactionRequestBodyDtoPaymentDataToJSON(value['paymentData']),
        'creditCardMetadata': CreateOrUpdateBankTransactionRequestBodyDtoCreditCardMetadataToJSON(value['creditCardMetadata']),
        'merchant': CreateOrUpdateBankTransactionRequestBodyDtoMerchantToJSON(value['merchant']),
        'categoryId': value['categoryId'],
        'operationType': value['operationType'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
    };
}

