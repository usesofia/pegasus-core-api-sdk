/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.0.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateFileUploadRequestBodyDto
 */
export interface CreateFileUploadRequestBodyDto {
    /**
     * Nome original do arquivo.
     * @type {string}
     * @memberof CreateFileUploadRequestBodyDto
     */
    originalFileName: string;
    /**
     * Tipo MIME do arquivo.
     * @type {string}
     * @memberof CreateFileUploadRequestBodyDto
     */
    mimeType: string;
    /**
     * Tamanho do arquivo em bytes.
     * @type {number}
     * @memberof CreateFileUploadRequestBodyDto
     */
    size: number;
    /**
     * Tipo do arquivo.
     * @type {string}
     * @memberof CreateFileUploadRequestBodyDto
     */
    fileType: CreateFileUploadRequestBodyDtoFileTypeEnum;
    /**
     * URL assinada do arquivo.
     * @type {string}
     * @memberof CreateFileUploadRequestBodyDto
     */
    signedUrl?: string;
    /**
     * Canal de origem da operação
     * @type {string}
     * @memberof CreateFileUploadRequestBodyDto
     */
    channel: CreateFileUploadRequestBodyDtoChannelEnum;
}


/**
 * @export
 */
export const CreateFileUploadRequestBodyDtoFileTypeEnum = {
    Default: 'DEFAULT',
    FinancialRecord: 'FINANCIAL_RECORD',
    Export: 'EXPORT',
    InstallmentFinancialRecord: 'INSTALLMENT_FINANCIAL_RECORD',
    RecurringFinancialRecord: 'RECURRING_FINANCIAL_RECORD',
    Ofx: 'OFX',
    ExtractFinancialRecordFromFile: 'EXTRACT_FINANCIAL_RECORD_FROM_FILE',
    SevenDaysTempFile: 'SEVEN_DAYS_TEMP_FILE'
} as const;
export type CreateFileUploadRequestBodyDtoFileTypeEnum = typeof CreateFileUploadRequestBodyDtoFileTypeEnum[keyof typeof CreateFileUploadRequestBodyDtoFileTypeEnum];

/**
 * @export
 */
export const CreateFileUploadRequestBodyDtoChannelEnum = {
    WebApp: 'WEB_APP',
    Whatsapp: 'WHATSAPP',
    System: 'SYSTEM',
    Email: 'EMAIL'
} as const;
export type CreateFileUploadRequestBodyDtoChannelEnum = typeof CreateFileUploadRequestBodyDtoChannelEnum[keyof typeof CreateFileUploadRequestBodyDtoChannelEnum];


/**
 * Check if a given object implements the CreateFileUploadRequestBodyDto interface.
 */
export function instanceOfCreateFileUploadRequestBodyDto(value: object): value is CreateFileUploadRequestBodyDto {
    if (!('originalFileName' in value) || value['originalFileName'] === undefined) return false;
    if (!('mimeType' in value) || value['mimeType'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('fileType' in value) || value['fileType'] === undefined) return false;
    if (!('channel' in value) || value['channel'] === undefined) return false;
    return true;
}

export function CreateFileUploadRequestBodyDtoFromJSON(json: any): CreateFileUploadRequestBodyDto {
    return CreateFileUploadRequestBodyDtoFromJSONTyped(json, false);
}

export function CreateFileUploadRequestBodyDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateFileUploadRequestBodyDto {
    if (json == null) {
        return json;
    }
    return {
        
        'originalFileName': json['originalFileName'],
        'mimeType': json['mimeType'],
        'size': json['size'],
        'fileType': json['fileType'],
        'signedUrl': json['signedUrl'] == null ? undefined : json['signedUrl'],
        'channel': json['channel'],
    };
}

export function CreateFileUploadRequestBodyDtoToJSON(json: any): CreateFileUploadRequestBodyDto {
    return CreateFileUploadRequestBodyDtoToJSONTyped(json, false);
}

export function CreateFileUploadRequestBodyDtoToJSONTyped(value?: CreateFileUploadRequestBodyDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'originalFileName': value['originalFileName'],
        'mimeType': value['mimeType'],
        'size': value['size'],
        'fileType': value['fileType'],
        'signedUrl': value['signedUrl'],
        'channel': value['channel'],
    };
}

