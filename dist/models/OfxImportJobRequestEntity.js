"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e m√©dias empresas.
 *
 * The version of the OpenAPI document: 1.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfOfxImportJobRequestEntity = instanceOfOfxImportJobRequestEntity;
exports.OfxImportJobRequestEntityFromJSON = OfxImportJobRequestEntityFromJSON;
exports.OfxImportJobRequestEntityFromJSONTyped = OfxImportJobRequestEntityFromJSONTyped;
exports.OfxImportJobRequestEntityToJSON = OfxImportJobRequestEntityToJSON;
exports.OfxImportJobRequestEntityToJSONTyped = OfxImportJobRequestEntityToJSONTyped;
/**
 * Check if a given object implements the OfxImportJobRequestEntity interface.
 */
function instanceOfOfxImportJobRequestEntity(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('bankAccountId' in value) || value['bankAccountId'] === undefined)
        return false;
    if (!('bankAccountName' in value) || value['bankAccountName'] === undefined)
        return false;
    if (!('fileName' in value) || value['fileName'] === undefined)
        return false;
    if (!('signedUrl' in value) || value['signedUrl'] === undefined)
        return false;
    if (!('requesterUserId' in value) || value['requesterUserId'] === undefined)
        return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined)
        return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined)
        return false;
    if (!('deletedAt' in value) || value['deletedAt'] === undefined)
        return false;
    return true;
}
function OfxImportJobRequestEntityFromJSON(json) {
    return OfxImportJobRequestEntityFromJSONTyped(json, false);
}
function OfxImportJobRequestEntityFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'bankAccountId': json['bankAccountId'],
        'bankAccountName': json['bankAccountName'],
        'fileName': json['fileName'],
        'signedUrl': json['signedUrl'],
        'maxTransactionsForAiSuggestionOnImport': json['maxTransactionsForAiSuggestionOnImport'] == null ? undefined : json['maxTransactionsForAiSuggestionOnImport'],
        'requesterUserId': json['requesterUserId'],
        'totalTransactions': json['totalTransactions'] == null ? undefined : json['totalTransactions'],
        'periodStartDate': json['periodStartDate'] == null ? undefined : json['periodStartDate'],
        'periodEndDate': json['periodEndDate'] == null ? undefined : json['periodEndDate'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
        'deletedAt': json['deletedAt'],
    };
}
function OfxImportJobRequestEntityToJSON(json) {
    return OfxImportJobRequestEntityToJSONTyped(json, false);
}
function OfxImportJobRequestEntityToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'bankAccountId': value['bankAccountId'],
        'bankAccountName': value['bankAccountName'],
        'fileName': value['fileName'],
        'signedUrl': value['signedUrl'],
        'maxTransactionsForAiSuggestionOnImport': value['maxTransactionsForAiSuggestionOnImport'],
        'requesterUserId': value['requesterUserId'],
        'totalTransactions': value['totalTransactions'],
        'periodStartDate': value['periodStartDate'],
        'periodEndDate': value['periodEndDate'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
        'deletedAt': value['deletedAt'],
    };
}
