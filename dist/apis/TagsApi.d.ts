/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CreateTagRequestBodyDto, PartialUpdateTagRequestBodyDto, RemoveTagRequestBodyDto, TagEntity, TagsPageEntity } from '../models/index';
export interface CreateTagRequest {
    createTagRequestBodyDto: CreateTagRequestBodyDto;
    populate?: string;
}
export interface FindAllTagsRequest {
    populate?: string;
    sortOrder?: string;
    sortBy?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}
export interface FindByIdTagRequest {
    id: string;
    populate?: string;
}
export interface PartialUpdateTagRequest {
    id: string;
    partialUpdateTagRequestBodyDto: PartialUpdateTagRequestBodyDto;
    populate?: string;
}
export interface RemoveTagRequest {
    id: string;
    removeTagRequestBodyDto: RemoveTagRequestBodyDto;
}
/**
 * TagsApi - interface
 *
 * @export
 * @interface TagsApiInterface
 */
export interface TagsApiInterface {
    /**
     *
     * @summary Cria uma nova tag.
     * @param {CreateTagRequestBodyDto} createTagRequestBodyDto
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    createTagRaw(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>>;
    /**
     * Cria uma nova tag.
     */
    createTag(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity>;
    /**
     *
     * @summary Busca todas as tags.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [sortOrder] Ordem de ordenação dos resultados. Valores possíveis: asc ou desc.
     * @param {string} [sortBy] Campo para ordenação dos resultados. Valores possíveis: name ou createdAt.
     * @param {string} [textSearchTerm] Termo para busca por nome da tag.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    findAllTagsRaw(requestParameters: FindAllTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagsPageEntity>>;
    /**
     * Busca todas as tags.
     */
    findAllTags(requestParameters: FindAllTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagsPageEntity>;
    /**
     *
     * @summary Busca uma tag pelo identificador.
     * @param {string} id Identificador da tag.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    findByIdTagRaw(requestParameters: FindByIdTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>>;
    /**
     * Busca uma tag pelo identificador.
     */
    findByIdTag(requestParameters: FindByIdTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity>;
    /**
     *
     * @summary Atualiza parcialmente uma tag.
     * @param {string} id Identificador da tag.
     * @param {PartialUpdateTagRequestBodyDto} partialUpdateTagRequestBodyDto
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    partialUpdateTagRaw(requestParameters: PartialUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>>;
    /**
     * Atualiza parcialmente uma tag.
     */
    partialUpdateTag(requestParameters: PartialUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity>;
    /**
     *
     * @summary Remove uma tag.
     * @param {string} id Identificador da tag.
     * @param {RemoveTagRequestBodyDto} removeTagRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApiInterface
     */
    removeTagRaw(requestParameters: RemoveTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove uma tag.
     */
    removeTag(requestParameters: RemoveTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
/**
 *
 */
export declare class TagsApi extends runtime.BaseAPI implements TagsApiInterface {
    /**
     * Cria uma nova tag.
     */
    createTagRaw(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>>;
    /**
     * Cria uma nova tag.
     */
    createTag(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity>;
    /**
     * Busca todas as tags.
     */
    findAllTagsRaw(requestParameters: FindAllTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagsPageEntity>>;
    /**
     * Busca todas as tags.
     */
    findAllTags(requestParameters?: FindAllTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagsPageEntity>;
    /**
     * Busca uma tag pelo identificador.
     */
    findByIdTagRaw(requestParameters: FindByIdTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>>;
    /**
     * Busca uma tag pelo identificador.
     */
    findByIdTag(requestParameters: FindByIdTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity>;
    /**
     * Atualiza parcialmente uma tag.
     */
    partialUpdateTagRaw(requestParameters: PartialUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagEntity>>;
    /**
     * Atualiza parcialmente uma tag.
     */
    partialUpdateTag(requestParameters: PartialUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagEntity>;
    /**
     * Remove uma tag.
     */
    removeTagRaw(requestParameters: RemoveTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove uma tag.
     */
    removeTag(requestParameters: RemoveTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
