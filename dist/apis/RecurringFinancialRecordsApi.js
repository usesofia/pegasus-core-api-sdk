"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindAllRecurringFinancialRecordsSortByEnum = exports.FindAllRecurringFinancialRecordsSortOrderEnum = exports.FindAllRecurringFinancialRecordsDirectionEnum = exports.FindAllRecurringFinancialRecordsFrequencyEnum = exports.RecurringFinancialRecordsApi = void 0;
var runtime = require("../runtime");
var index_1 = require("../models/index");
/**
 *
 */
var RecurringFinancialRecordsApi = /** @class */ (function (_super) {
    __extends(RecurringFinancialRecordsApi, _super);
    function RecurringFinancialRecordsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Cria múltiplos lançamentos financeiros recorrentes.
     */
    RecurringFinancialRecordsApi.prototype.createManyRecurringFinancialRecordsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['createManyRecurringFinancialRecordsRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('createManyRecurringFinancialRecordsRequestBodyDto', 'Required parameter "createManyRecurringFinancialRecordsRequestBodyDto" was null or undefined when calling createManyRecurringFinancialRecords().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/external/recurring-financial-records/many";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.CreateManyRecurringFinancialRecordsRequestBodyDtoToJSON)(requestParameters['createManyRecurringFinancialRecordsRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(index_1.RecurringFinancialRecordDtoFromJSON); })];
                }
            });
        });
    };
    /**
     * Cria múltiplos lançamentos financeiros recorrentes.
     */
    RecurringFinancialRecordsApi.prototype.createManyRecurringFinancialRecords = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createManyRecurringFinancialRecordsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Cria um novo lançamento financeiro recorrente.
     */
    RecurringFinancialRecordsApi.prototype.createRecurringFinancialRecordRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['createRecurringFinancialRecordRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('createRecurringFinancialRecordRequestBodyDto', 'Required parameter "createRecurringFinancialRecordRequestBodyDto" was null or undefined when calling createRecurringFinancialRecord().');
                        }
                        queryParameters = {};
                        if (requestParameters['populate'] != null) {
                            queryParameters['populate'] = requestParameters['populate'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/external/recurring-financial-records";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.CreateRecurringFinancialRecordRequestBodyDtoToJSON)(requestParameters['createRecurringFinancialRecordRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.RecurringFinancialRecordDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Cria um novo lançamento financeiro recorrente.
     */
    RecurringFinancialRecordsApi.prototype.createRecurringFinancialRecord = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createRecurringFinancialRecordRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Busca todos os lançamentos financeiros recorrentes.
     */
    RecurringFinancialRecordsApi.prototype.findAllRecurringFinancialRecordsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['frequency'] != null) {
                            queryParameters['frequency'] = requestParameters['frequency'];
                        }
                        if (requestParameters['isActive'] != null) {
                            queryParameters['isActive'] = requestParameters['isActive'];
                        }
                        if (requestParameters['automaticCompletion'] != null) {
                            queryParameters['automaticCompletion'] = requestParameters['automaticCompletion'];
                        }
                        if (requestParameters['onlyBusinessDays'] != null) {
                            queryParameters['onlyBusinessDays'] = requestParameters['onlyBusinessDays'];
                        }
                        if (requestParameters['repetitionMonth'] != null) {
                            queryParameters['repetitionMonth'] = requestParameters['repetitionMonth'];
                        }
                        if (requestParameters['repetitionDay'] != null) {
                            queryParameters['repetitionDay'] = requestParameters['repetitionDay'];
                        }
                        if (requestParameters['tags'] != null) {
                            queryParameters['tags'] = requestParameters['tags'];
                        }
                        if (requestParameters['amountTo'] != null) {
                            queryParameters['amountTo'] = requestParameters['amountTo'];
                        }
                        if (requestParameters['amountFrom'] != null) {
                            queryParameters['amountFrom'] = requestParameters['amountFrom'];
                        }
                        if (requestParameters['subcategory'] != null) {
                            queryParameters['subcategory'] = requestParameters['subcategory'];
                        }
                        if (requestParameters['contact'] != null) {
                            queryParameters['contact'] = requestParameters['contact'];
                        }
                        if (requestParameters['firstOccurrenceDateTo'] != null) {
                            queryParameters['firstOccurrenceDateTo'] = requestParameters['firstOccurrenceDateTo'].toISOString().substring(0, 10);
                        }
                        if (requestParameters['firstOccurrenceDateFrom'] != null) {
                            queryParameters['firstOccurrenceDateFrom'] = requestParameters['firstOccurrenceDateFrom'].toISOString().substring(0, 10);
                        }
                        if (requestParameters['direction'] != null) {
                            queryParameters['direction'] = requestParameters['direction'];
                        }
                        if (requestParameters['sortOrder'] != null) {
                            queryParameters['sortOrder'] = requestParameters['sortOrder'];
                        }
                        if (requestParameters['sortBy'] != null) {
                            queryParameters['sortBy'] = requestParameters['sortBy'];
                        }
                        if (requestParameters['populate'] != null) {
                            queryParameters['populate'] = requestParameters['populate'];
                        }
                        if (requestParameters['textSearchTerm'] != null) {
                            queryParameters['textSearchTerm'] = requestParameters['textSearchTerm'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['pageSize'] = requestParameters['pageSize'];
                        }
                        if (requestParameters['pageIndex'] != null) {
                            queryParameters['pageIndex'] = requestParameters['pageIndex'];
                        }
                        headerParameters = {};
                        urlPath = "/external/recurring-financial-records";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.RecurringFinancialRecordsPageDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Busca todos os lançamentos financeiros recorrentes.
     */
    RecurringFinancialRecordsApi.prototype.findAllRecurringFinancialRecords = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.findAllRecurringFinancialRecordsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Busca um lançamento financeiro recorrente pelo identificador.
     */
    RecurringFinancialRecordsApi.prototype.findByIdRecurringFinancialRecordRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling findByIdRecurringFinancialRecord().');
                        }
                        queryParameters = {};
                        if (requestParameters['populate'] != null) {
                            queryParameters['populate'] = requestParameters['populate'];
                        }
                        headerParameters = {};
                        urlPath = "/external/recurring-financial-records/{id}";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.RecurringFinancialRecordDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Busca um lançamento financeiro recorrente pelo identificador.
     */
    RecurringFinancialRecordsApi.prototype.findByIdRecurringFinancialRecord = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.findByIdRecurringFinancialRecordRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Atualiza parcialmente um lançamento financeiro recorrente.
     */
    RecurringFinancialRecordsApi.prototype.partialUpdateRecurringFinancialRecordRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling partialUpdateRecurringFinancialRecord().');
                        }
                        if (requestParameters['partialUpdateRecurringFinancialRecordRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('partialUpdateRecurringFinancialRecordRequestBodyDto', 'Required parameter "partialUpdateRecurringFinancialRecordRequestBodyDto" was null or undefined when calling partialUpdateRecurringFinancialRecord().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/external/recurring-financial-records/{id}";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.PartialUpdateRecurringFinancialRecordRequestBodyDtoToJSON)(requestParameters['partialUpdateRecurringFinancialRecordRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.RecurringFinancialRecordDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Atualiza parcialmente um lançamento financeiro recorrente.
     */
    RecurringFinancialRecordsApi.prototype.partialUpdateRecurringFinancialRecord = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.partialUpdateRecurringFinancialRecordRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Remove um lançamento financeiro recorrente.
     */
    RecurringFinancialRecordsApi.prototype.removeRecurringFinancialRecordRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling removeRecurringFinancialRecord().');
                        }
                        if (requestParameters['removeRecurringFinancialRecordRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('removeRecurringFinancialRecordRequestBodyDto', 'Required parameter "removeRecurringFinancialRecordRequestBodyDto" was null or undefined when calling removeRecurringFinancialRecord().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/external/recurring-financial-records/{id}";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.RemoveRecurringFinancialRecordRequestBodyDtoToJSON)(requestParameters['removeRecurringFinancialRecordRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Remove um lançamento financeiro recorrente.
     */
    RecurringFinancialRecordsApi.prototype.removeRecurringFinancialRecord = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.removeRecurringFinancialRecordRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Agenda o seeder de lançamentos financeiros recorrentes.
     */
    RecurringFinancialRecordsApi.prototype.scheduleRecurringFinancialRecordsSeedingRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['scheduleRecurringFinancialRecordsSeedingRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('scheduleRecurringFinancialRecordsSeedingRequestBodyDto', 'Required parameter "scheduleRecurringFinancialRecordsSeedingRequestBodyDto" was null or undefined when calling scheduleRecurringFinancialRecordsSeeding().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/internal/recurring-financial-records/seed";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.ScheduleRecurringFinancialRecordsSeedingRequestBodyDtoToJSON)(requestParameters['scheduleRecurringFinancialRecordsSeedingRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Agenda o seeder de lançamentos financeiros recorrentes.
     */
    RecurringFinancialRecordsApi.prototype.scheduleRecurringFinancialRecordsSeeding = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.scheduleRecurringFinancialRecordsSeedingRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Inicia o seeder de lançamentos financeiros recorrentes.
     */
    RecurringFinancialRecordsApi.prototype.startRecurringFinancialRecordsSeederRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['seedRecurringFinancialRecordsRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('seedRecurringFinancialRecordsRequestBodyDto', 'Required parameter "seedRecurringFinancialRecordsRequestBodyDto" was null or undefined when calling startRecurringFinancialRecordsSeeder().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/internal/queues/recurring-financial-records-2";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.SeedRecurringFinancialRecordsRequestBodyDtoToJSON)(requestParameters['seedRecurringFinancialRecordsRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Inicia o seeder de lançamentos financeiros recorrentes.
     */
    RecurringFinancialRecordsApi.prototype.startRecurringFinancialRecordsSeeder = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.startRecurringFinancialRecordsSeederRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return RecurringFinancialRecordsApi;
}(runtime.BaseAPI));
exports.RecurringFinancialRecordsApi = RecurringFinancialRecordsApi;
/**
 * @export
 */
exports.FindAllRecurringFinancialRecordsFrequencyEnum = {
    Weekly: 'WEEKLY',
    Monthly: 'MONTHLY',
    Yearly: 'YEARLY'
};
/**
 * @export
 */
exports.FindAllRecurringFinancialRecordsDirectionEnum = {
    In: 'IN',
    Out: 'OUT'
};
/**
 * @export
 */
exports.FindAllRecurringFinancialRecordsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.FindAllRecurringFinancialRecordsSortByEnum = {
    Direction: 'direction',
    FirstOccurrenceDate: 'firstOccurrenceDate',
    Contact: 'contact',
    Description: 'description',
    Subcategory: 'subcategory',
    Amount: 'amount',
    Frequency: 'frequency',
    IsActive: 'isActive',
    CreatedAt: 'createdAt'
};
