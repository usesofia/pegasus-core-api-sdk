/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { BankTransactionEntity, BankTransactionsPageDto, CreateOrUpdateBankTransactionRequestBodyDto, PartialUpdateBankTransactionRequestBodyDto } from '../models/index';
export interface CreateOrUpdateBankTransactionRequest {
    createOrUpdateBankTransactionRequestBodyDto: CreateOrUpdateBankTransactionRequestBodyDto;
    populate?: string;
}
export interface FindAllBankTransactionsRequest {
    populate?: string;
    type?: FindAllBankTransactionsTypeEnum;
    dateTo?: Date;
    dateFrom?: Date;
    bankAccount?: string;
    searchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}
export interface FindByIdBankTransactionRequest {
    id: string;
    populate?: string;
}
export interface PartialUpdateBankTransactionRequest {
    id: string;
    partialUpdateBankTransactionRequestBodyDto: PartialUpdateBankTransactionRequestBodyDto;
    populate?: string;
}
/**
 * BankTransactionsApi - interface
 *
 * @export
 * @interface BankTransactionsApiInterface
 */
export interface BankTransactionsApiInterface {
    /**
     *
     * @summary Cria ou atualiza uma movimentação financeira.
     * @param {CreateOrUpdateBankTransactionRequestBodyDto} createOrUpdateBankTransactionRequestBodyDto
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    createOrUpdateBankTransactionRaw(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    createOrUpdateBankTransaction(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     *
     * @summary Busca todas as movimentações financeiras.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {'DEBIT' | 'CREDIT'} [type] Tipo da movimentação.
     * @param {Date} [dateTo] Data final para filtrar.
     * @param {Date} [dateFrom] Data inicial para filtrar.
     * @param {string} [bankAccount] ID da conta bancária para filtrar.
     * @param {string} [searchTerm] Termo para busca por descrição.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    findAllBankTransactionsRaw(requestParameters: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsPageDto>>;
    /**
     * Busca todas as movimentações financeiras.
     */
    findAllBankTransactions(requestParameters: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsPageDto>;
    /**
     *
     * @summary Busca uma movimentação financeira pelo identificador.
     * @param {string} id Identificador da movimentação financeira.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    findByIdBankTransactionRaw(requestParameters: FindByIdBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Busca uma movimentação financeira pelo identificador.
     */
    findByIdBankTransaction(requestParameters: FindByIdBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     *
     * @summary Atualiza parcialmente uma movimentação financeira.
     * @param {string} id Identificador da movimentação financeira.
     * @param {PartialUpdateBankTransactionRequestBodyDto} partialUpdateBankTransactionRequestBodyDto
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    partialUpdateBankTransactionRaw(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    partialUpdateBankTransaction(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
}
/**
 *
 */
export declare class BankTransactionsApi extends runtime.BaseAPI implements BankTransactionsApiInterface {
    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    createOrUpdateBankTransactionRaw(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    createOrUpdateBankTransaction(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     * Busca todas as movimentações financeiras.
     */
    findAllBankTransactionsRaw(requestParameters: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsPageDto>>;
    /**
     * Busca todas as movimentações financeiras.
     */
    findAllBankTransactions(requestParameters?: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsPageDto>;
    /**
     * Busca uma movimentação financeira pelo identificador.
     */
    findByIdBankTransactionRaw(requestParameters: FindByIdBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Busca uma movimentação financeira pelo identificador.
     */
    findByIdBankTransaction(requestParameters: FindByIdBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    partialUpdateBankTransactionRaw(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    partialUpdateBankTransaction(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
}
/**
 * @export
 */
export declare const FindAllBankTransactionsTypeEnum: {
    readonly Debit: "DEBIT";
    readonly Credit: "CREDIT";
};
export type FindAllBankTransactionsTypeEnum = typeof FindAllBankTransactionsTypeEnum[keyof typeof FindAllBankTransactionsTypeEnum];
