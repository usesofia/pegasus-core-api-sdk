/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.11.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { BankTransactionEntity, BankTransactionsPageDto, BulkBankTransactionsJobRequestDto, BulkBankTransactionsJobRequestEntity, CreateOrUpdateBankTransactionRequestBodyDto, ExecuteBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto, ExecuteBulkBankTransactionsJobRequestBodyDto, ExecuteOfxImportJobRequestBodyDto, OfxImportJobRequestEntity, OfxImportJobRequestsPageDto, OfxImportRequestBodyDto, PartialUpdateBankTransactionRequestBodyDto, ReconcileBankTransactionRequestBodyDto, ShouldAiSuggestActionRequestBodyDto, ShouldAiSuggestActionResponseDto } from '../models/index';
export interface CreateOrUpdateBankTransactionRequest {
    createOrUpdateBankTransactionRequestBodyDto: CreateOrUpdateBankTransactionRequestBodyDto;
    populate?: string;
}
export interface CreateOrUpdateBankTransactionBestSuggestedActionRequest {
    bankTransactionId: string;
}
export interface DispatchOfxImportRequest {
    ofxImportRequestBodyDto: OfxImportRequestBodyDto;
}
export interface FindAllBankTransactionsRequest {
    populate?: string;
    sortOrder?: FindAllBankTransactionsSortOrderEnum;
    sortBy?: FindAllBankTransactionsSortByEnum;
    ignored?: boolean;
    origin?: FindAllBankTransactionsOriginEnum;
    reconciled?: boolean;
    type?: FindAllBankTransactionsTypeEnum;
    dateTo?: Date;
    dateFrom?: Date;
    bankAccount?: string;
    semanticSearchTermInBase64?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}
export interface FindAllOfxImportJobRequestsRequest {
    sortOrder?: FindAllOfxImportJobRequestsSortOrderEnum;
    sortBy?: FindAllOfxImportJobRequestsSortByEnum;
    pageSize?: number;
    pageIndex?: number;
}
export interface FindBankTransactionByIdRequest {
    id: string;
    populate?: string;
}
export interface PartialUpdateBankTransactionRequest {
    id: string;
    partialUpdateBankTransactionRequestBodyDto: PartialUpdateBankTransactionRequestBodyDto;
    populate?: string;
}
export interface ProcessBankTransactionsCreateOrUpdateBestSuggestionActionRequest {
    executeBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto: ExecuteBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto;
}
export interface ProcessBulkBankTransactionsOperationRequest {
    executeBulkBankTransactionsJobRequestBodyDto: ExecuteBulkBankTransactionsJobRequestBodyDto;
}
export interface ProcessOfxImportRequest {
    executeOfxImportJobRequestBodyDto: ExecuteOfxImportJobRequestBodyDto;
}
export interface ReconcileBankTransactionRequest {
    bankTransactionId: string;
    reconcileBankTransactionRequestBodyDto: ReconcileBankTransactionRequestBodyDto;
}
export interface ScheduleBulkBankTransactionsOperationRequest {
    bulkBankTransactionsJobRequestDto: BulkBankTransactionsJobRequestDto;
}
export interface ShouldAiSuggestActionRequest {
    shouldAiSuggestActionRequestBodyDto: ShouldAiSuggestActionRequestBodyDto;
}
export interface SystemFindAllBankTransactionsRequest {
    ownerOrganizationId: string;
    populate?: string;
    sortOrder?: SystemFindAllBankTransactionsSortOrderEnum;
    sortBy?: SystemFindAllBankTransactionsSortByEnum;
    ignored?: boolean;
    origin?: SystemFindAllBankTransactionsOriginEnum;
    reconciled?: boolean;
    type?: SystemFindAllBankTransactionsTypeEnum;
    dateTo?: Date;
    dateFrom?: Date;
    bankAccount?: string;
    semanticSearchTermInBase64?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}
export interface SystemFindBankTransactionByIdRequest {
    id: string;
    populate?: string;
}
export interface UnreconcileBankTransactionRequest {
    bankTransactionId: string;
}
/**
 * BankTransactionsApi - interface
 *
 * @export
 * @interface BankTransactionsApiInterface
 */
export interface BankTransactionsApiInterface {
    /**
     *
     * @summary Cria ou atualiza uma movimentação financeira.
     * @param {CreateOrUpdateBankTransactionRequestBodyDto} createOrUpdateBankTransactionRequestBodyDto
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    createOrUpdateBankTransactionRaw(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    createOrUpdateBankTransaction(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     *
     * @summary Cria ou atualiza uma sugestão de melhor ação para uma transação bancária.
     * @param {string} bankTransactionId ID da transação bancária para obter sugestões de melhor ação.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    createOrUpdateBankTransactionBestSuggestedActionRaw(requestParameters: CreateOrUpdateBankTransactionBestSuggestedActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Cria ou atualiza uma sugestão de melhor ação para uma transação bancária.
     */
    createOrUpdateBankTransactionBestSuggestedAction(requestParameters: CreateOrUpdateBankTransactionBestSuggestedActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     *
     * @summary Dispara a importação assíncrona de um arquivo OFX.
     * @param {OfxImportRequestBodyDto} ofxImportRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    dispatchOfxImportRaw(requestParameters: DispatchOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OfxImportJobRequestEntity>>;
    /**
     * Dispara a importação assíncrona de um arquivo OFX.
     */
    dispatchOfxImport(requestParameters: DispatchOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OfxImportJobRequestEntity>;
    /**
     *
     * @summary Busca todas as movimentações financeiras.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {'asc' | 'desc'} [sortOrder] Ordem da ordenação. Valores possíveis: \&#39;asc\&#39;, \&#39;desc\&#39;.
     * @param {'date' | 'amountInBrl' | 'description' | 'createdAt' | 'reconciled'} [sortBy] Campo para ordenação
     * @param {boolean} [ignored] Filtrar por transações ignoradas/arquivadas. (true/false)
     * @param {'AUTOMATIC_INTEGRATION' | 'MANUAL_OFX_IMPORT'} [origin] Filtrar pela origem da transação.
     * @param {boolean} [reconciled] Filtrar por transações reconciliadas. (true/false)
     * @param {'DEBIT' | 'CREDIT'} [type] Tipo da movimentação.
     * @param {Date} [dateTo] Data final para filtrar.
     * @param {Date} [dateFrom] Data inicial para filtrar.
     * @param {string} [bankAccount] ID da conta bancária para filtrar.
     * @param {string} [semanticSearchTermInBase64] Termo para busca semântica em base64.
     * @param {string} [textSearchTerm] Termo para busca textual.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    findAllBankTransactionsRaw(requestParameters: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsPageDto>>;
    /**
     * Busca todas as movimentações financeiras.
     */
    findAllBankTransactions(requestParameters: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsPageDto>;
    /**
     *
     * @summary Lista todas as solicitações de importação de arquivos OFX com suas execuções.
     * @param {'asc' | 'desc'} [sortOrder] Ordem da ordenação. Valores possíveis: \&#39;asc\&#39;, \&#39;desc\&#39;.
     * @param {'createdAt' | 'fileName' | 'bankAccountName'} [sortBy] Campo para ordenação. Valores possíveis: \&#39;createdAt\&#39;, \&#39;fileName\&#39;, \&#39;bankAccountName\&#39;.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    findAllOfxImportJobRequestsRaw(requestParameters: FindAllOfxImportJobRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OfxImportJobRequestsPageDto>>;
    /**
     * Lista todas as solicitações de importação de arquivos OFX com suas execuções.
     */
    findAllOfxImportJobRequests(requestParameters: FindAllOfxImportJobRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OfxImportJobRequestsPageDto>;
    /**
     *
     * @summary Busca uma movimentação financeira por ID.
     * @param {string} id ID da movimentação financeira.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    findBankTransactionByIdRaw(requestParameters: FindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Busca uma movimentação financeira por ID.
     */
    findBankTransactionById(requestParameters: FindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     *
     * @summary Atualiza parcialmente uma movimentação financeira.
     * @param {string} id ID da movimentação financeira.
     * @param {PartialUpdateBankTransactionRequestBodyDto} partialUpdateBankTransactionRequestBodyDto
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    partialUpdateBankTransactionRaw(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    partialUpdateBankTransaction(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     *
     * @summary Processa a obtenção de sugestões de melhor ação para transações bancárias via AI.
     * @param {ExecuteBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto} executeBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    processBankTransactionsCreateOrUpdateBestSuggestionActionRaw(requestParameters: ProcessBankTransactionsCreateOrUpdateBestSuggestionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Processa a obtenção de sugestões de melhor ação para transações bancárias via AI.
     */
    processBankTransactionsCreateOrUpdateBestSuggestionAction(requestParameters: ProcessBankTransactionsCreateOrUpdateBestSuggestionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     *
     * @summary Processa uma operação em lote para transações bancárias.
     * @param {ExecuteBulkBankTransactionsJobRequestBodyDto} executeBulkBankTransactionsJobRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    processBulkBankTransactionsOperationRaw(requestParameters: ProcessBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Processa uma operação em lote para transações bancárias.
     */
    processBulkBankTransactionsOperation(requestParameters: ProcessBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     *
     * @summary Processa a importação assíncrona de um arquivo OFX.
     * @param {ExecuteOfxImportJobRequestBodyDto} executeOfxImportJobRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    processOfxImportRaw(requestParameters: ProcessOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Processa a importação assíncrona de um arquivo OFX.
     */
    processOfxImport(requestParameters: ProcessOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     *
     * @summary Reconcilia uma transação bancária com múltiplos lançamentos financeiros.
     * @param {string} bankTransactionId ID da transação bancária a ser reconciliada.
     * @param {ReconcileBankTransactionRequestBodyDto} reconcileBankTransactionRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    reconcileBankTransactionRaw(requestParameters: ReconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Reconcilia uma transação bancária com múltiplos lançamentos financeiros.
     */
    reconcileBankTransaction(requestParameters: ReconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     *
     * @summary Agenda uma operação em lote para transações bancárias.
     * @param {BulkBankTransactionsJobRequestDto} bulkBankTransactionsJobRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    scheduleBulkBankTransactionsOperationRaw(requestParameters: ScheduleBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkBankTransactionsJobRequestEntity>>;
    /**
     * Agenda uma operação em lote para transações bancárias.
     */
    scheduleBulkBankTransactionsOperation(requestParameters: ScheduleBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkBankTransactionsJobRequestEntity>;
    /**
     *
     * @summary Verifica se a AI deve sugerir uma ação para uma transação bancária.
     * @param {ShouldAiSuggestActionRequestBodyDto} shouldAiSuggestActionRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    shouldAiSuggestActionRaw(requestParameters: ShouldAiSuggestActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShouldAiSuggestActionResponseDto>>;
    /**
     * Verifica se a AI deve sugerir uma ação para uma transação bancária.
     */
    shouldAiSuggestAction(requestParameters: ShouldAiSuggestActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShouldAiSuggestActionResponseDto>;
    /**
     *
     * @summary Busca todas as movimentações financeiras pelo sistema.
     * @param {string} ownerOrganizationId Identificador da organização proprietária das movimentações financeiras.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {'asc' | 'desc'} [sortOrder] Ordem da ordenação. Valores possíveis: \&#39;asc\&#39;, \&#39;desc\&#39;.
     * @param {'date' | 'amountInBrl' | 'description' | 'createdAt' | 'reconciled'} [sortBy] Campo para ordenação
     * @param {boolean} [ignored] Filtrar por transações ignoradas/arquivadas. (true/false)
     * @param {'AUTOMATIC_INTEGRATION' | 'MANUAL_OFX_IMPORT'} [origin] Filtrar pela origem da transação.
     * @param {boolean} [reconciled] Filtrar por transações reconciliadas. (true/false)
     * @param {'DEBIT' | 'CREDIT'} [type] Tipo da movimentação.
     * @param {Date} [dateTo] Data final para filtrar.
     * @param {Date} [dateFrom] Data inicial para filtrar.
     * @param {string} [bankAccount] ID da conta bancária para filtrar.
     * @param {string} [semanticSearchTermInBase64] Termo para busca semântica em base64.
     * @param {string} [textSearchTerm] Termo para busca textual.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    systemFindAllBankTransactionsRaw(requestParameters: SystemFindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsPageDto>>;
    /**
     * Busca todas as movimentações financeiras pelo sistema.
     */
    systemFindAllBankTransactions(requestParameters: SystemFindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsPageDto>;
    /**
     *
     * @summary Busca uma movimentação financeira por ID.
     * @param {string} id ID da movimentação financeira.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    systemFindBankTransactionByIdRaw(requestParameters: SystemFindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Busca uma movimentação financeira por ID.
     */
    systemFindBankTransactionById(requestParameters: SystemFindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     *
     * @summary Desfaz a reconciliação de uma transação bancária.
     * @param {string} bankTransactionId ID da transação bancária para desfazer a reconciliação.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApiInterface
     */
    unreconcileBankTransactionRaw(requestParameters: UnreconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Desfaz a reconciliação de uma transação bancária.
     */
    unreconcileBankTransaction(requestParameters: UnreconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
}
/**
 *
 */
export declare class BankTransactionsApi extends runtime.BaseAPI implements BankTransactionsApiInterface {
    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    createOrUpdateBankTransactionRaw(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    createOrUpdateBankTransaction(requestParameters: CreateOrUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     * Cria ou atualiza uma sugestão de melhor ação para uma transação bancária.
     */
    createOrUpdateBankTransactionBestSuggestedActionRaw(requestParameters: CreateOrUpdateBankTransactionBestSuggestedActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Cria ou atualiza uma sugestão de melhor ação para uma transação bancária.
     */
    createOrUpdateBankTransactionBestSuggestedAction(requestParameters: CreateOrUpdateBankTransactionBestSuggestedActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     * Dispara a importação assíncrona de um arquivo OFX.
     */
    dispatchOfxImportRaw(requestParameters: DispatchOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OfxImportJobRequestEntity>>;
    /**
     * Dispara a importação assíncrona de um arquivo OFX.
     */
    dispatchOfxImport(requestParameters: DispatchOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OfxImportJobRequestEntity>;
    /**
     * Busca todas as movimentações financeiras.
     */
    findAllBankTransactionsRaw(requestParameters: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsPageDto>>;
    /**
     * Busca todas as movimentações financeiras.
     */
    findAllBankTransactions(requestParameters?: FindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsPageDto>;
    /**
     * Lista todas as solicitações de importação de arquivos OFX com suas execuções.
     */
    findAllOfxImportJobRequestsRaw(requestParameters: FindAllOfxImportJobRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OfxImportJobRequestsPageDto>>;
    /**
     * Lista todas as solicitações de importação de arquivos OFX com suas execuções.
     */
    findAllOfxImportJobRequests(requestParameters?: FindAllOfxImportJobRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OfxImportJobRequestsPageDto>;
    /**
     * Busca uma movimentação financeira por ID.
     */
    findBankTransactionByIdRaw(requestParameters: FindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Busca uma movimentação financeira por ID.
     */
    findBankTransactionById(requestParameters: FindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    partialUpdateBankTransactionRaw(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    partialUpdateBankTransaction(requestParameters: PartialUpdateBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     * Processa a obtenção de sugestões de melhor ação para transações bancárias via AI.
     */
    processBankTransactionsCreateOrUpdateBestSuggestionActionRaw(requestParameters: ProcessBankTransactionsCreateOrUpdateBestSuggestionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Processa a obtenção de sugestões de melhor ação para transações bancárias via AI.
     */
    processBankTransactionsCreateOrUpdateBestSuggestionAction(requestParameters: ProcessBankTransactionsCreateOrUpdateBestSuggestionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Processa uma operação em lote para transações bancárias.
     */
    processBulkBankTransactionsOperationRaw(requestParameters: ProcessBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Processa uma operação em lote para transações bancárias.
     */
    processBulkBankTransactionsOperation(requestParameters: ProcessBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Processa a importação assíncrona de um arquivo OFX.
     */
    processOfxImportRaw(requestParameters: ProcessOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Processa a importação assíncrona de um arquivo OFX.
     */
    processOfxImport(requestParameters: ProcessOfxImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Reconcilia uma transação bancária com múltiplos lançamentos financeiros.
     */
    reconcileBankTransactionRaw(requestParameters: ReconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Reconcilia uma transação bancária com múltiplos lançamentos financeiros.
     */
    reconcileBankTransaction(requestParameters: ReconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     * Agenda uma operação em lote para transações bancárias.
     */
    scheduleBulkBankTransactionsOperationRaw(requestParameters: ScheduleBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkBankTransactionsJobRequestEntity>>;
    /**
     * Agenda uma operação em lote para transações bancárias.
     */
    scheduleBulkBankTransactionsOperation(requestParameters: ScheduleBulkBankTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkBankTransactionsJobRequestEntity>;
    /**
     * Verifica se a AI deve sugerir uma ação para uma transação bancária.
     */
    shouldAiSuggestActionRaw(requestParameters: ShouldAiSuggestActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShouldAiSuggestActionResponseDto>>;
    /**
     * Verifica se a AI deve sugerir uma ação para uma transação bancária.
     */
    shouldAiSuggestAction(requestParameters: ShouldAiSuggestActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShouldAiSuggestActionResponseDto>;
    /**
     * Busca todas as movimentações financeiras pelo sistema.
     */
    systemFindAllBankTransactionsRaw(requestParameters: SystemFindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionsPageDto>>;
    /**
     * Busca todas as movimentações financeiras pelo sistema.
     */
    systemFindAllBankTransactions(requestParameters: SystemFindAllBankTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionsPageDto>;
    /**
     * Busca uma movimentação financeira por ID.
     */
    systemFindBankTransactionByIdRaw(requestParameters: SystemFindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Busca uma movimentação financeira por ID.
     */
    systemFindBankTransactionById(requestParameters: SystemFindBankTransactionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
    /**
     * Desfaz a reconciliação de uma transação bancária.
     */
    unreconcileBankTransactionRaw(requestParameters: UnreconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankTransactionEntity>>;
    /**
     * Desfaz a reconciliação de uma transação bancária.
     */
    unreconcileBankTransaction(requestParameters: UnreconcileBankTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankTransactionEntity>;
}
/**
 * @export
 */
export declare const FindAllBankTransactionsSortOrderEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type FindAllBankTransactionsSortOrderEnum = typeof FindAllBankTransactionsSortOrderEnum[keyof typeof FindAllBankTransactionsSortOrderEnum];
/**
 * @export
 */
export declare const FindAllBankTransactionsSortByEnum: {
    readonly Date: "date";
    readonly AmountInBrl: "amountInBrl";
    readonly Description: "description";
    readonly CreatedAt: "createdAt";
    readonly Reconciled: "reconciled";
};
export type FindAllBankTransactionsSortByEnum = typeof FindAllBankTransactionsSortByEnum[keyof typeof FindAllBankTransactionsSortByEnum];
/**
 * @export
 */
export declare const FindAllBankTransactionsOriginEnum: {
    readonly AutomaticIntegration: "AUTOMATIC_INTEGRATION";
    readonly ManualOfxImport: "MANUAL_OFX_IMPORT";
};
export type FindAllBankTransactionsOriginEnum = typeof FindAllBankTransactionsOriginEnum[keyof typeof FindAllBankTransactionsOriginEnum];
/**
 * @export
 */
export declare const FindAllBankTransactionsTypeEnum: {
    readonly Debit: "DEBIT";
    readonly Credit: "CREDIT";
};
export type FindAllBankTransactionsTypeEnum = typeof FindAllBankTransactionsTypeEnum[keyof typeof FindAllBankTransactionsTypeEnum];
/**
 * @export
 */
export declare const FindAllOfxImportJobRequestsSortOrderEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type FindAllOfxImportJobRequestsSortOrderEnum = typeof FindAllOfxImportJobRequestsSortOrderEnum[keyof typeof FindAllOfxImportJobRequestsSortOrderEnum];
/**
 * @export
 */
export declare const FindAllOfxImportJobRequestsSortByEnum: {
    readonly CreatedAt: "createdAt";
    readonly FileName: "fileName";
    readonly BankAccountName: "bankAccountName";
};
export type FindAllOfxImportJobRequestsSortByEnum = typeof FindAllOfxImportJobRequestsSortByEnum[keyof typeof FindAllOfxImportJobRequestsSortByEnum];
/**
 * @export
 */
export declare const SystemFindAllBankTransactionsSortOrderEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type SystemFindAllBankTransactionsSortOrderEnum = typeof SystemFindAllBankTransactionsSortOrderEnum[keyof typeof SystemFindAllBankTransactionsSortOrderEnum];
/**
 * @export
 */
export declare const SystemFindAllBankTransactionsSortByEnum: {
    readonly Date: "date";
    readonly AmountInBrl: "amountInBrl";
    readonly Description: "description";
    readonly CreatedAt: "createdAt";
    readonly Reconciled: "reconciled";
};
export type SystemFindAllBankTransactionsSortByEnum = typeof SystemFindAllBankTransactionsSortByEnum[keyof typeof SystemFindAllBankTransactionsSortByEnum];
/**
 * @export
 */
export declare const SystemFindAllBankTransactionsOriginEnum: {
    readonly AutomaticIntegration: "AUTOMATIC_INTEGRATION";
    readonly ManualOfxImport: "MANUAL_OFX_IMPORT";
};
export type SystemFindAllBankTransactionsOriginEnum = typeof SystemFindAllBankTransactionsOriginEnum[keyof typeof SystemFindAllBankTransactionsOriginEnum];
/**
 * @export
 */
export declare const SystemFindAllBankTransactionsTypeEnum: {
    readonly Debit: "DEBIT";
    readonly Credit: "CREDIT";
};
export type SystemFindAllBankTransactionsTypeEnum = typeof SystemFindAllBankTransactionsTypeEnum[keyof typeof SystemFindAllBankTransactionsTypeEnum];
