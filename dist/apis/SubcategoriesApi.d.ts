/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.0.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ExternalCreateSubcategoryRequestBodyDto, PartialUpdateSubcategoryRequestBodyDto, RemoveSubcategoryRequestBodyDto, SubcategoriesPageEntity, SubcategoryEntity } from '../models/index';
export interface CreateSubcategoryRequest {
    externalCreateSubcategoryRequestBodyDto: ExternalCreateSubcategoryRequestBodyDto;
    populate?: string;
}
export interface FindAllSubcategoriesRequest {
    active?: boolean;
    sortOrder?: string;
    sortBy?: string;
    populate?: string;
    categoryId?: string;
    searchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}
export interface FindBySlugSubcategoryRequest {
    slug: string;
    populate?: string;
}
export interface PartialUpdateSubcategoryRequest {
    id: string;
    partialUpdateSubcategoryRequestBodyDto: PartialUpdateSubcategoryRequestBodyDto;
    populate?: string;
}
export interface RemoveSubcategoryRequest {
    id: string;
    removeSubcategoryRequestBodyDto: RemoveSubcategoryRequestBodyDto;
}
/**
 * SubcategoriesApi - interface
 *
 * @export
 * @interface SubcategoriesApiInterface
 */
export interface SubcategoriesApiInterface {
    /**
     *
     * @summary Cria uma nova subcategoria.
     * @param {ExternalCreateSubcategoryRequestBodyDto} externalCreateSubcategoryRequestBodyDto
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoriesApiInterface
     */
    createSubcategoryRaw(requestParameters: CreateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoryEntity>>;
    /**
     * Cria uma nova subcategoria.
     */
    createSubcategory(requestParameters: CreateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoryEntity>;
    /**
     *
     * @summary Busca todas as subcategorias.
     * @param {boolean} [active] Filtra subcategorias ativas ou inativas.
     * @param {string} [sortOrder] Ordem de ordenação das subcategorias.
     * @param {string} [sortBy] Campo para ordenar as subcategorias.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [categoryId] ID da categoria para filtrar subcategorias.
     * @param {string} [searchTerm] Termo para busca por nome da subcategoria.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoriesApiInterface
     */
    findAllSubcategoriesRaw(requestParameters: FindAllSubcategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoriesPageEntity>>;
    /**
     * Busca todas as subcategorias.
     */
    findAllSubcategories(requestParameters: FindAllSubcategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoriesPageEntity>;
    /**
     *
     * @summary Busca uma subcategoria pelo slug.
     * @param {string} slug Slug da subcategoria.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoriesApiInterface
     */
    findBySlugSubcategoryRaw(requestParameters: FindBySlugSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoryEntity>>;
    /**
     * Busca uma subcategoria pelo slug.
     */
    findBySlugSubcategory(requestParameters: FindBySlugSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoryEntity>;
    /**
     *
     * @summary Atualiza parcialmente uma subcategoria.
     * @param {string} id Identificador da subcategoria.
     * @param {PartialUpdateSubcategoryRequestBodyDto} partialUpdateSubcategoryRequestBodyDto
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoriesApiInterface
     */
    partialUpdateSubcategoryRaw(requestParameters: PartialUpdateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoryEntity>>;
    /**
     * Atualiza parcialmente uma subcategoria.
     */
    partialUpdateSubcategory(requestParameters: PartialUpdateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoryEntity>;
    /**
     *
     * @summary Remove uma subcategoria.
     * @param {string} id Identificador da subcategoria.
     * @param {RemoveSubcategoryRequestBodyDto} removeSubcategoryRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoriesApiInterface
     */
    removeSubcategoryRaw(requestParameters: RemoveSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove uma subcategoria.
     */
    removeSubcategory(requestParameters: RemoveSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
/**
 *
 */
export declare class SubcategoriesApi extends runtime.BaseAPI implements SubcategoriesApiInterface {
    /**
     * Cria uma nova subcategoria.
     */
    createSubcategoryRaw(requestParameters: CreateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoryEntity>>;
    /**
     * Cria uma nova subcategoria.
     */
    createSubcategory(requestParameters: CreateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoryEntity>;
    /**
     * Busca todas as subcategorias.
     */
    findAllSubcategoriesRaw(requestParameters: FindAllSubcategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoriesPageEntity>>;
    /**
     * Busca todas as subcategorias.
     */
    findAllSubcategories(requestParameters?: FindAllSubcategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoriesPageEntity>;
    /**
     * Busca uma subcategoria pelo slug.
     */
    findBySlugSubcategoryRaw(requestParameters: FindBySlugSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoryEntity>>;
    /**
     * Busca uma subcategoria pelo slug.
     */
    findBySlugSubcategory(requestParameters: FindBySlugSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoryEntity>;
    /**
     * Atualiza parcialmente uma subcategoria.
     */
    partialUpdateSubcategoryRaw(requestParameters: PartialUpdateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubcategoryEntity>>;
    /**
     * Atualiza parcialmente uma subcategoria.
     */
    partialUpdateSubcategory(requestParameters: PartialUpdateSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubcategoryEntity>;
    /**
     * Remove uma subcategoria.
     */
    removeSubcategoryRaw(requestParameters: RemoveSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove uma subcategoria.
     */
    removeSubcategory(requestParameters: RemoveSubcategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
