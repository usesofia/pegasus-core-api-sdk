/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CreateManyRecurringFinancialRecordsRequestBodyDto, CreateRecurringFinancialRecordRequestBodyDto, PartialUpdateRecurringFinancialRecordRequestBodyDto, RecurringFinancialRecordDto, RecurringFinancialRecordsPageDto, RemoveRecurringFinancialRecordRequestBodyDto, ScheduleRecurringFinancialRecordsSeedingRequestBodyDto, SeedRecurringFinancialRecordsRequestBodyDto } from '../models/index';
export interface CreateManyRecurringFinancialRecordsRequest {
    createManyRecurringFinancialRecordsRequestBodyDto: CreateManyRecurringFinancialRecordsRequestBodyDto;
}
export interface CreateRecurringFinancialRecordRequest {
    createRecurringFinancialRecordRequestBodyDto: CreateRecurringFinancialRecordRequestBodyDto;
    populate?: string;
}
export interface FindAllRecurringFinancialRecordsRequest {
    frequency?: FindAllRecurringFinancialRecordsFrequencyEnum;
    isActive?: boolean;
    automaticCompletion?: boolean;
    onlyBusinessDays?: boolean;
    repetitionMonth?: number;
    repetitionDay?: number;
    tags?: Array<any>;
    amountTo?: string;
    amountFrom?: string;
    subcategory?: string;
    contact?: string;
    firstOccurrenceDateTo?: Date;
    firstOccurrenceDateFrom?: Date;
    direction?: FindAllRecurringFinancialRecordsDirectionEnum;
    sortOrder?: FindAllRecurringFinancialRecordsSortOrderEnum;
    sortBy?: FindAllRecurringFinancialRecordsSortByEnum;
    populate?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}
export interface FindByIdRecurringFinancialRecordRequest {
    id: string;
    populate?: string;
}
export interface PartialUpdateRecurringFinancialRecordRequest {
    id: string;
    partialUpdateRecurringFinancialRecordRequestBodyDto: PartialUpdateRecurringFinancialRecordRequestBodyDto;
}
export interface RemoveRecurringFinancialRecordRequest {
    id: string;
    removeRecurringFinancialRecordRequestBodyDto: RemoveRecurringFinancialRecordRequestBodyDto;
}
export interface ScheduleRecurringFinancialRecordsSeedingRequest {
    scheduleRecurringFinancialRecordsSeedingRequestBodyDto: ScheduleRecurringFinancialRecordsSeedingRequestBodyDto;
}
export interface StartRecurringFinancialRecordsSeederRequest {
    seedRecurringFinancialRecordsRequestBodyDto: SeedRecurringFinancialRecordsRequestBodyDto;
}
/**
 * RecurringFinancialRecordsApi - interface
 *
 * @export
 * @interface RecurringFinancialRecordsApiInterface
 */
export interface RecurringFinancialRecordsApiInterface {
    /**
     *
     * @summary Cria múltiplos lançamentos financeiros recorrentes.
     * @param {CreateManyRecurringFinancialRecordsRequestBodyDto} createManyRecurringFinancialRecordsRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    createManyRecurringFinancialRecordsRaw(requestParameters: CreateManyRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RecurringFinancialRecordDto>>>;
    /**
     * Cria múltiplos lançamentos financeiros recorrentes.
     */
    createManyRecurringFinancialRecords(requestParameters: CreateManyRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RecurringFinancialRecordDto>>;
    /**
     *
     * @summary Cria um novo lançamento financeiro recorrente.
     * @param {CreateRecurringFinancialRecordRequestBodyDto} createRecurringFinancialRecordRequestBodyDto
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    createRecurringFinancialRecordRaw(requestParameters: CreateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordDto>>;
    /**
     * Cria um novo lançamento financeiro recorrente.
     */
    createRecurringFinancialRecord(requestParameters: CreateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordDto>;
    /**
     *
     * @summary Busca todos os lançamentos financeiros recorrentes.
     * @param {'WEEKLY' | 'MONTHLY' | 'YEARLY'} [frequency] Frequência de repetição do lançamento.
     * @param {boolean} [isActive] Indica se o lançamento recorrente está ativo.
     * @param {boolean} [automaticCompletion] Indica se o lançamento será completado automaticamente.
     * @param {boolean} [onlyBusinessDays] Indica se o lançamento será apenas em dias úteis.
     * @param {number} [repetitionMonth] Mês de repetição do lançamento.
     * @param {number} [repetitionDay] Dia de repetição do lançamento.
     * @param {Array<any>} [tags] Identificadores das tags.
     * @param {string} [amountTo] Valor máximo do lançamento.
     * @param {string} [amountFrom] Valor mínimo do lançamento.
     * @param {string} [subcategory] Identificador da subcategoria.
     * @param {string} [contact] Identificador do contato.
     * @param {Date} [firstOccurrenceDateTo] Data final da primeira ocorrência (formato ISO YYYY-MM-DD).
     * @param {Date} [firstOccurrenceDateFrom] Data inicial da primeira ocorrência (formato ISO YYYY-MM-DD).
     * @param {'IN' | 'OUT'} [direction] Direção do lançamento (entrada/saída).
     * @param {'asc' | 'desc'} [sortOrder] Ordem da ordenação.
     * @param {'direction' | 'firstOccurrenceDate' | 'contact' | 'description' | 'subcategory' | 'amount' | 'frequency' | 'isActive' | 'createdAt'} [sortBy] Campo para ordenação.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [textSearchTerm] Termo para busca por descrição do lançamento.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    findAllRecurringFinancialRecordsRaw(requestParameters: FindAllRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordsPageDto>>;
    /**
     * Busca todos os lançamentos financeiros recorrentes.
     */
    findAllRecurringFinancialRecords(requestParameters: FindAllRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordsPageDto>;
    /**
     *
     * @summary Busca um lançamento financeiro recorrente pelo identificador.
     * @param {string} id Identificador do lançamento financeiro recorrente.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    findByIdRecurringFinancialRecordRaw(requestParameters: FindByIdRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordDto>>;
    /**
     * Busca um lançamento financeiro recorrente pelo identificador.
     */
    findByIdRecurringFinancialRecord(requestParameters: FindByIdRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordDto>;
    /**
     *
     * @summary Atualiza parcialmente um lançamento financeiro recorrente.
     * @param {string} id Identificador do lançamento financeiro recorrente.
     * @param {PartialUpdateRecurringFinancialRecordRequestBodyDto} partialUpdateRecurringFinancialRecordRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    partialUpdateRecurringFinancialRecordRaw(requestParameters: PartialUpdateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordDto>>;
    /**
     * Atualiza parcialmente um lançamento financeiro recorrente.
     */
    partialUpdateRecurringFinancialRecord(requestParameters: PartialUpdateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordDto>;
    /**
     *
     * @summary Remove um lançamento financeiro recorrente.
     * @param {string} id Identificador do lançamento financeiro recorrente.
     * @param {RemoveRecurringFinancialRecordRequestBodyDto} removeRecurringFinancialRecordRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    removeRecurringFinancialRecordRaw(requestParameters: RemoveRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove um lançamento financeiro recorrente.
     */
    removeRecurringFinancialRecord(requestParameters: RemoveRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     *
     * @summary Agenda o seeder de lançamentos financeiros recorrentes.
     * @param {ScheduleRecurringFinancialRecordsSeedingRequestBodyDto} scheduleRecurringFinancialRecordsSeedingRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    scheduleRecurringFinancialRecordsSeedingRaw(requestParameters: ScheduleRecurringFinancialRecordsSeedingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Agenda o seeder de lançamentos financeiros recorrentes.
     */
    scheduleRecurringFinancialRecordsSeeding(requestParameters: ScheduleRecurringFinancialRecordsSeedingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     *
     * @summary Inicia o seeder de lançamentos financeiros recorrentes.
     * @param {SeedRecurringFinancialRecordsRequestBodyDto} seedRecurringFinancialRecordsRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringFinancialRecordsApiInterface
     */
    startRecurringFinancialRecordsSeederRaw(requestParameters: StartRecurringFinancialRecordsSeederRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Inicia o seeder de lançamentos financeiros recorrentes.
     */
    startRecurringFinancialRecordsSeeder(requestParameters: StartRecurringFinancialRecordsSeederRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
/**
 *
 */
export declare class RecurringFinancialRecordsApi extends runtime.BaseAPI implements RecurringFinancialRecordsApiInterface {
    /**
     * Cria múltiplos lançamentos financeiros recorrentes.
     */
    createManyRecurringFinancialRecordsRaw(requestParameters: CreateManyRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RecurringFinancialRecordDto>>>;
    /**
     * Cria múltiplos lançamentos financeiros recorrentes.
     */
    createManyRecurringFinancialRecords(requestParameters: CreateManyRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RecurringFinancialRecordDto>>;
    /**
     * Cria um novo lançamento financeiro recorrente.
     */
    createRecurringFinancialRecordRaw(requestParameters: CreateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordDto>>;
    /**
     * Cria um novo lançamento financeiro recorrente.
     */
    createRecurringFinancialRecord(requestParameters: CreateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordDto>;
    /**
     * Busca todos os lançamentos financeiros recorrentes.
     */
    findAllRecurringFinancialRecordsRaw(requestParameters: FindAllRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordsPageDto>>;
    /**
     * Busca todos os lançamentos financeiros recorrentes.
     */
    findAllRecurringFinancialRecords(requestParameters?: FindAllRecurringFinancialRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordsPageDto>;
    /**
     * Busca um lançamento financeiro recorrente pelo identificador.
     */
    findByIdRecurringFinancialRecordRaw(requestParameters: FindByIdRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordDto>>;
    /**
     * Busca um lançamento financeiro recorrente pelo identificador.
     */
    findByIdRecurringFinancialRecord(requestParameters: FindByIdRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordDto>;
    /**
     * Atualiza parcialmente um lançamento financeiro recorrente.
     */
    partialUpdateRecurringFinancialRecordRaw(requestParameters: PartialUpdateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringFinancialRecordDto>>;
    /**
     * Atualiza parcialmente um lançamento financeiro recorrente.
     */
    partialUpdateRecurringFinancialRecord(requestParameters: PartialUpdateRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringFinancialRecordDto>;
    /**
     * Remove um lançamento financeiro recorrente.
     */
    removeRecurringFinancialRecordRaw(requestParameters: RemoveRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove um lançamento financeiro recorrente.
     */
    removeRecurringFinancialRecord(requestParameters: RemoveRecurringFinancialRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Agenda o seeder de lançamentos financeiros recorrentes.
     */
    scheduleRecurringFinancialRecordsSeedingRaw(requestParameters: ScheduleRecurringFinancialRecordsSeedingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Agenda o seeder de lançamentos financeiros recorrentes.
     */
    scheduleRecurringFinancialRecordsSeeding(requestParameters: ScheduleRecurringFinancialRecordsSeedingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Inicia o seeder de lançamentos financeiros recorrentes.
     */
    startRecurringFinancialRecordsSeederRaw(requestParameters: StartRecurringFinancialRecordsSeederRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Inicia o seeder de lançamentos financeiros recorrentes.
     */
    startRecurringFinancialRecordsSeeder(requestParameters: StartRecurringFinancialRecordsSeederRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
/**
 * @export
 */
export declare const FindAllRecurringFinancialRecordsFrequencyEnum: {
    readonly Weekly: "WEEKLY";
    readonly Monthly: "MONTHLY";
    readonly Yearly: "YEARLY";
};
export type FindAllRecurringFinancialRecordsFrequencyEnum = typeof FindAllRecurringFinancialRecordsFrequencyEnum[keyof typeof FindAllRecurringFinancialRecordsFrequencyEnum];
/**
 * @export
 */
export declare const FindAllRecurringFinancialRecordsDirectionEnum: {
    readonly In: "IN";
    readonly Out: "OUT";
};
export type FindAllRecurringFinancialRecordsDirectionEnum = typeof FindAllRecurringFinancialRecordsDirectionEnum[keyof typeof FindAllRecurringFinancialRecordsDirectionEnum];
/**
 * @export
 */
export declare const FindAllRecurringFinancialRecordsSortOrderEnum: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type FindAllRecurringFinancialRecordsSortOrderEnum = typeof FindAllRecurringFinancialRecordsSortOrderEnum[keyof typeof FindAllRecurringFinancialRecordsSortOrderEnum];
/**
 * @export
 */
export declare const FindAllRecurringFinancialRecordsSortByEnum: {
    readonly Direction: "direction";
    readonly FirstOccurrenceDate: "firstOccurrenceDate";
    readonly Contact: "contact";
    readonly Description: "description";
    readonly Subcategory: "subcategory";
    readonly Amount: "amount";
    readonly Frequency: "frequency";
    readonly IsActive: "isActive";
    readonly CreatedAt: "createdAt";
};
export type FindAllRecurringFinancialRecordsSortByEnum = typeof FindAllRecurringFinancialRecordsSortByEnum[keyof typeof FindAllRecurringFinancialRecordsSortByEnum];
