/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { BankAccountDto, BankAccountTypeEntity, BankAccountsPageDto, CreateBankAccountRequestBodyDto, PartialUpdateBankAccountRequestBodyDto, RemoveBankAccountRequestBodyDto } from '../models/index';
export interface CreateBankAccountRequest {
    createBankAccountRequestBodyDto: CreateBankAccountRequestBodyDto;
    populate?: string;
}
export interface FindAllBankAccountsRequest {
    sortOrder?: string;
    sortBy?: string;
    populate?: string;
    providerAccountId?: string;
    provider?: string;
    active?: boolean;
    ids?: Array<string>;
    isDefault?: boolean;
    isAutomatic?: boolean;
    type?: string;
    semanticSearchTermInBase64?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}
export interface FindAllByPluggyItemRequest {
    itemId: string;
    populate?: string;
}
export interface FindByIdBankAccountRequest {
    id: string;
    populate?: string;
}
export interface PartialUpdateBankAccountRequest {
    id: string;
    partialUpdateBankAccountRequestBodyDto: PartialUpdateBankAccountRequestBodyDto;
    populate?: string;
}
export interface RemoveBankAccountRequest {
    id: string;
    removeBankAccountRequestBodyDto: RemoveBankAccountRequestBodyDto;
}
export interface SystemFindAllBankAccountsRequest {
    ownerOrganizationId: string;
    readPreference?: SystemFindAllBankAccountsReadPreferenceEnum;
    sortOrder?: string;
    sortBy?: string;
    populate?: string;
    providerAccountId?: string;
    provider?: string;
    active?: boolean;
    isDefault?: boolean;
    isAutomatic?: boolean;
    type?: string;
    semanticSearchTermInBase64?: string;
    textSearchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}
export interface SystemFindByIdBankAccountRequest {
    id: string;
    populate?: string;
}
/**
 * BankAccountsApi - interface
 *
 * @export
 * @interface BankAccountsApiInterface
 */
export interface BankAccountsApiInterface {
    /**
     *
     * @summary Cria uma nova conta bancária.
     * @param {CreateBankAccountRequestBodyDto} createBankAccountRequestBodyDto
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    createBankAccountRaw(requestParameters: CreateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>>;
    /**
     * Cria uma nova conta bancária.
     */
    createBankAccount(requestParameters: CreateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto>;
    /**
     *
     * @summary Busca todos os tipos de conta bancária.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    findAllBankAccountTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BankAccountTypeEntity>>>;
    /**
     * Busca todos os tipos de conta bancária.
     */
    findAllBankAccountTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BankAccountTypeEntity>>;
    /**
     *
     * @summary Busca todas as contas bancárias.
     * @param {string} [sortOrder] Ordem de ordenação das contas bancárias.
     * @param {string} [sortBy] Campo para ordenação das contas bancárias.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [providerAccountId] Identificador da conta bancária no fornecedor.
     * @param {string} [provider] Fornecedor da conta bancária.
     * @param {boolean} [active] Indica se a conta está ativa.
     * @param {Array<string>} [ids] Identificadores das contas bancárias a serem buscadas.
     * @param {boolean} [isDefault] Indica se a conta é a padrão.
     * @param {boolean} [isAutomatic] Indica se a conta é automática ou manual.
     * @param {string} [type] Tipo de conta bancária a ser buscada.
     * @param {string} [semanticSearchTermInBase64] Termo para busca semântica da conta bancária em base64.
     * @param {string} [textSearchTerm] Termo para busca textual da conta bancária.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    findAllBankAccountsRaw(requestParameters: FindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountsPageDto>>;
    /**
     * Busca todas as contas bancárias.
     */
    findAllBankAccounts(requestParameters: FindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountsPageDto>;
    /**
     *
     * @summary Busca contas bancárias pelo identificador do item do Pluggy.
     * @param {string} itemId Identificador do item de conexão do Pluggy.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    findAllByPluggyItemRaw(requestParameters: FindAllByPluggyItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BankAccountDto>>>;
    /**
     * Busca contas bancárias pelo identificador do item do Pluggy.
     */
    findAllByPluggyItem(requestParameters: FindAllByPluggyItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BankAccountDto>>;
    /**
     *
     * @summary Busca uma conta bancária pelo identificador.
     * @param {string} id Identificador da conta bancária.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    findByIdBankAccountRaw(requestParameters: FindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>>;
    /**
     * Busca uma conta bancária pelo identificador.
     */
    findByIdBankAccount(requestParameters: FindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto>;
    /**
     *
     * @summary Atualiza parcialmente uma conta bancária.
     * @param {string} id Identificador da conta bancária.
     * @param {PartialUpdateBankAccountRequestBodyDto} partialUpdateBankAccountRequestBodyDto
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    partialUpdateBankAccountRaw(requestParameters: PartialUpdateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>>;
    /**
     * Atualiza parcialmente uma conta bancária.
     */
    partialUpdateBankAccount(requestParameters: PartialUpdateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto>;
    /**
     *
     * @summary Remove uma conta bancária.
     * @param {string} id Identificador da conta bancária.
     * @param {RemoveBankAccountRequestBodyDto} removeBankAccountRequestBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    removeBankAccountRaw(requestParameters: RemoveBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove uma conta bancária.
     */
    removeBankAccount(requestParameters: RemoveBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     *
     * @summary Busca todas as contas bancárias.
     * @param {string} ownerOrganizationId Identificador da organização proprietária das contas bancárias.
     * @param {'primary' | 'primaryPreferred' | 'secondary' | 'secondaryPreferred' | 'nearest'} [readPreference] Preferência de leitura das contas bancárias.
     * @param {string} [sortOrder] Ordem de ordenação das contas bancárias.
     * @param {string} [sortBy] Campo para ordenação das contas bancárias.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [providerAccountId] Identificador da conta bancária no fornecedor.
     * @param {string} [provider] Fornecedor da conta bancária.
     * @param {boolean} [active] Indica se a conta está ativa.
     * @param {boolean} [isDefault] Indica se a conta é a padrão.
     * @param {boolean} [isAutomatic] Indica se a conta é automática ou manual.
     * @param {string} [type] Tipo de conta bancária a ser buscada.
     * @param {string} [semanticSearchTermInBase64] Termo para busca semântica da conta bancária em base64.
     * @param {string} [textSearchTerm] Termo para busca textual da conta bancária.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    systemFindAllBankAccountsRaw(requestParameters: SystemFindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountsPageDto>>;
    /**
     * Busca todas as contas bancárias.
     */
    systemFindAllBankAccounts(requestParameters: SystemFindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountsPageDto>;
    /**
     *
     * @summary Busca uma conta bancária pelo identificador.
     * @param {string} id Identificador da conta bancária.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiInterface
     */
    systemFindByIdBankAccountRaw(requestParameters: SystemFindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>>;
    /**
     * Busca uma conta bancária pelo identificador.
     */
    systemFindByIdBankAccount(requestParameters: SystemFindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto>;
}
/**
 *
 */
export declare class BankAccountsApi extends runtime.BaseAPI implements BankAccountsApiInterface {
    /**
     * Cria uma nova conta bancária.
     */
    createBankAccountRaw(requestParameters: CreateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>>;
    /**
     * Cria uma nova conta bancária.
     */
    createBankAccount(requestParameters: CreateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto>;
    /**
     * Busca todos os tipos de conta bancária.
     */
    findAllBankAccountTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BankAccountTypeEntity>>>;
    /**
     * Busca todos os tipos de conta bancária.
     */
    findAllBankAccountTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BankAccountTypeEntity>>;
    /**
     * Busca todas as contas bancárias.
     */
    findAllBankAccountsRaw(requestParameters: FindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountsPageDto>>;
    /**
     * Busca todas as contas bancárias.
     */
    findAllBankAccounts(requestParameters?: FindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountsPageDto>;
    /**
     * Busca contas bancárias pelo identificador do item do Pluggy.
     */
    findAllByPluggyItemRaw(requestParameters: FindAllByPluggyItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BankAccountDto>>>;
    /**
     * Busca contas bancárias pelo identificador do item do Pluggy.
     */
    findAllByPluggyItem(requestParameters: FindAllByPluggyItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BankAccountDto>>;
    /**
     * Busca uma conta bancária pelo identificador.
     */
    findByIdBankAccountRaw(requestParameters: FindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>>;
    /**
     * Busca uma conta bancária pelo identificador.
     */
    findByIdBankAccount(requestParameters: FindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto>;
    /**
     * Atualiza parcialmente uma conta bancária.
     */
    partialUpdateBankAccountRaw(requestParameters: PartialUpdateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>>;
    /**
     * Atualiza parcialmente uma conta bancária.
     */
    partialUpdateBankAccount(requestParameters: PartialUpdateBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto>;
    /**
     * Remove uma conta bancária.
     */
    removeBankAccountRaw(requestParameters: RemoveBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove uma conta bancária.
     */
    removeBankAccount(requestParameters: RemoveBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Busca todas as contas bancárias.
     */
    systemFindAllBankAccountsRaw(requestParameters: SystemFindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountsPageDto>>;
    /**
     * Busca todas as contas bancárias.
     */
    systemFindAllBankAccounts(requestParameters: SystemFindAllBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountsPageDto>;
    /**
     * Busca uma conta bancária pelo identificador.
     */
    systemFindByIdBankAccountRaw(requestParameters: SystemFindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDto>>;
    /**
     * Busca uma conta bancária pelo identificador.
     */
    systemFindByIdBankAccount(requestParameters: SystemFindByIdBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDto>;
}
/**
 * @export
 */
export declare const SystemFindAllBankAccountsReadPreferenceEnum: {
    readonly Primary: "primary";
    readonly PrimaryPreferred: "primaryPreferred";
    readonly Secondary: "secondary";
    readonly SecondaryPreferred: "secondaryPreferred";
    readonly Nearest: "nearest";
};
export type SystemFindAllBankAccountsReadPreferenceEnum = typeof SystemFindAllBankAccountsReadPreferenceEnum[keyof typeof SystemFindAllBankAccountsReadPreferenceEnum];
