"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 1.12.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemFindAllBankTransactionsTypeEnum = exports.SystemFindAllBankTransactionsOriginEnum = exports.SystemFindAllBankTransactionsSortByEnum = exports.SystemFindAllBankTransactionsSortOrderEnum = exports.FindAllOfxImportJobRequestsSortByEnum = exports.FindAllOfxImportJobRequestsSortOrderEnum = exports.FindAllBankTransactionsTypeEnum = exports.FindAllBankTransactionsOriginEnum = exports.FindAllBankTransactionsSortByEnum = exports.FindAllBankTransactionsSortOrderEnum = exports.BankTransactionsApi = void 0;
var runtime = require("../runtime");
var index_1 = require("../models/index");
/**
 *
 */
var BankTransactionsApi = /** @class */ (function (_super) {
    __extends(BankTransactionsApi, _super);
    function BankTransactionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    BankTransactionsApi.prototype.createOrUpdateBankTransactionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['createOrUpdateBankTransactionRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('createOrUpdateBankTransactionRequestBodyDto', 'Required parameter "createOrUpdateBankTransactionRequestBodyDto" was null or undefined when calling createOrUpdateBankTransaction().');
                        }
                        queryParameters = {};
                        if (requestParameters['populate'] != null) {
                            queryParameters['populate'] = requestParameters['populate'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/internal/bank-transactions";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.CreateOrUpdateBankTransactionRequestBodyDtoToJSON)(requestParameters['createOrUpdateBankTransactionRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.BankTransactionEntityFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Cria ou atualiza uma movimentação financeira.
     */
    BankTransactionsApi.prototype.createOrUpdateBankTransaction = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createOrUpdateBankTransactionRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Cria ou atualiza uma sugestão de melhor ação para uma transação bancária.
     */
    BankTransactionsApi.prototype.createOrUpdateBankTransactionBestSuggestedActionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['bankTransactionId'] == null) {
                            throw new runtime.RequiredError('bankTransactionId', 'Required parameter "bankTransactionId" was null or undefined when calling createOrUpdateBankTransactionBestSuggestedAction().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/external/bank-transactions/{bankTransactionId}/best-suggested-action";
                        urlPath = urlPath.replace("{".concat("bankTransactionId", "}"), encodeURIComponent(String(requestParameters['bankTransactionId'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PUT',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.BankTransactionEntityFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Cria ou atualiza uma sugestão de melhor ação para uma transação bancária.
     */
    BankTransactionsApi.prototype.createOrUpdateBankTransactionBestSuggestedAction = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createOrUpdateBankTransactionBestSuggestedActionRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Dispara a importação assíncrona de um arquivo OFX.
     */
    BankTransactionsApi.prototype.dispatchOfxImportRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['ofxImportRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('ofxImportRequestBodyDto', 'Required parameter "ofxImportRequestBodyDto" was null or undefined when calling dispatchOfxImport().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/external/bank-transactions/ofx";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.OfxImportRequestBodyDtoToJSON)(requestParameters['ofxImportRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.OfxImportJobRequestEntityFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Dispara a importação assíncrona de um arquivo OFX.
     */
    BankTransactionsApi.prototype.dispatchOfxImport = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.dispatchOfxImportRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Busca todas as movimentações financeiras.
     */
    BankTransactionsApi.prototype.findAllBankTransactionsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['populate'] != null) {
                            queryParameters['populate'] = requestParameters['populate'];
                        }
                        if (requestParameters['sortOrder'] != null) {
                            queryParameters['sortOrder'] = requestParameters['sortOrder'];
                        }
                        if (requestParameters['sortBy'] != null) {
                            queryParameters['sortBy'] = requestParameters['sortBy'];
                        }
                        if (requestParameters['ignored'] != null) {
                            queryParameters['ignored'] = requestParameters['ignored'];
                        }
                        if (requestParameters['origin'] != null) {
                            queryParameters['origin'] = requestParameters['origin'];
                        }
                        if (requestParameters['reconciled'] != null) {
                            queryParameters['reconciled'] = requestParameters['reconciled'];
                        }
                        if (requestParameters['type'] != null) {
                            queryParameters['type'] = requestParameters['type'];
                        }
                        if (requestParameters['dateTo'] != null) {
                            queryParameters['dateTo'] = requestParameters['dateTo'].toISOString();
                        }
                        if (requestParameters['dateFrom'] != null) {
                            queryParameters['dateFrom'] = requestParameters['dateFrom'].toISOString();
                        }
                        if (requestParameters['bankAccount'] != null) {
                            queryParameters['bankAccount'] = requestParameters['bankAccount'];
                        }
                        if (requestParameters['semanticSearchTermInBase64'] != null) {
                            queryParameters['semanticSearchTermInBase64'] = requestParameters['semanticSearchTermInBase64'];
                        }
                        if (requestParameters['textSearchTerm'] != null) {
                            queryParameters['textSearchTerm'] = requestParameters['textSearchTerm'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['pageSize'] = requestParameters['pageSize'];
                        }
                        if (requestParameters['pageIndex'] != null) {
                            queryParameters['pageIndex'] = requestParameters['pageIndex'];
                        }
                        headerParameters = {};
                        urlPath = "/external/bank-transactions";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.BankTransactionsPageDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Busca todas as movimentações financeiras.
     */
    BankTransactionsApi.prototype.findAllBankTransactions = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.findAllBankTransactionsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Lista todas as solicitações de importação de arquivos OFX com suas execuções.
     */
    BankTransactionsApi.prototype.findAllOfxImportJobRequestsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['sortOrder'] != null) {
                            queryParameters['sortOrder'] = requestParameters['sortOrder'];
                        }
                        if (requestParameters['sortBy'] != null) {
                            queryParameters['sortBy'] = requestParameters['sortBy'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['pageSize'] = requestParameters['pageSize'];
                        }
                        if (requestParameters['pageIndex'] != null) {
                            queryParameters['pageIndex'] = requestParameters['pageIndex'];
                        }
                        headerParameters = {};
                        urlPath = "/external/bank-transactions/ofx/job-requests";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.OfxImportJobRequestsPageDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Lista todas as solicitações de importação de arquivos OFX com suas execuções.
     */
    BankTransactionsApi.prototype.findAllOfxImportJobRequests = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.findAllOfxImportJobRequestsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Busca uma movimentação financeira por ID.
     */
    BankTransactionsApi.prototype.findBankTransactionByIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling findBankTransactionById().');
                        }
                        queryParameters = {};
                        if (requestParameters['populate'] != null) {
                            queryParameters['populate'] = requestParameters['populate'];
                        }
                        headerParameters = {};
                        urlPath = "/external/bank-transactions/{id}";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.BankTransactionEntityFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Busca uma movimentação financeira por ID.
     */
    BankTransactionsApi.prototype.findBankTransactionById = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.findBankTransactionByIdRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    BankTransactionsApi.prototype.partialUpdateBankTransactionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling partialUpdateBankTransaction().');
                        }
                        if (requestParameters['partialUpdateBankTransactionRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('partialUpdateBankTransactionRequestBodyDto', 'Required parameter "partialUpdateBankTransactionRequestBodyDto" was null or undefined when calling partialUpdateBankTransaction().');
                        }
                        queryParameters = {};
                        if (requestParameters['populate'] != null) {
                            queryParameters['populate'] = requestParameters['populate'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/external/bank-transactions/{id}";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'PATCH',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.PartialUpdateBankTransactionRequestBodyDtoToJSON)(requestParameters['partialUpdateBankTransactionRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.BankTransactionEntityFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Atualiza parcialmente uma movimentação financeira.
     */
    BankTransactionsApi.prototype.partialUpdateBankTransaction = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.partialUpdateBankTransactionRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Processa a obtenção de sugestões de melhor ação para transações bancárias via AI.
     */
    BankTransactionsApi.prototype.processBankTransactionsCreateOrUpdateBestSuggestionActionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['executeBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('executeBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto', 'Required parameter "executeBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto" was null or undefined when calling processBankTransactionsCreateOrUpdateBestSuggestionAction().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/internal/queues/bank-transactions-create-or-update-best-suggestion-action";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.ExecuteBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDtoToJSON)(requestParameters['executeBankTransactionsCreateOrUpdateBestSuggestionActionRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Processa a obtenção de sugestões de melhor ação para transações bancárias via AI.
     */
    BankTransactionsApi.prototype.processBankTransactionsCreateOrUpdateBestSuggestionAction = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.processBankTransactionsCreateOrUpdateBestSuggestionActionRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Processa uma operação em lote para transações bancárias.
     */
    BankTransactionsApi.prototype.processBulkBankTransactionsOperationRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['executeBulkBankTransactionsJobRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('executeBulkBankTransactionsJobRequestBodyDto', 'Required parameter "executeBulkBankTransactionsJobRequestBodyDto" was null or undefined when calling processBulkBankTransactionsOperation().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/internal/queues/bulk-bank-transactions";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.ExecuteBulkBankTransactionsJobRequestBodyDtoToJSON)(requestParameters['executeBulkBankTransactionsJobRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Processa uma operação em lote para transações bancárias.
     */
    BankTransactionsApi.prototype.processBulkBankTransactionsOperation = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.processBulkBankTransactionsOperationRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Processa a importação assíncrona de um arquivo OFX.
     */
    BankTransactionsApi.prototype.processOfxImportRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['executeOfxImportJobRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('executeOfxImportJobRequestBodyDto', 'Required parameter "executeOfxImportJobRequestBodyDto" was null or undefined when calling processOfxImport().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/internal/queues/ofx-import";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.ExecuteOfxImportJobRequestBodyDtoToJSON)(requestParameters['executeOfxImportJobRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Processa a importação assíncrona de um arquivo OFX.
     */
    BankTransactionsApi.prototype.processOfxImport = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.processOfxImportRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Reconcilia uma transação bancária com múltiplos lançamentos financeiros.
     */
    BankTransactionsApi.prototype.reconcileBankTransactionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['bankTransactionId'] == null) {
                            throw new runtime.RequiredError('bankTransactionId', 'Required parameter "bankTransactionId" was null or undefined when calling reconcileBankTransaction().');
                        }
                        if (requestParameters['reconcileBankTransactionRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('reconcileBankTransactionRequestBodyDto', 'Required parameter "reconcileBankTransactionRequestBodyDto" was null or undefined when calling reconcileBankTransaction().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/external/bank-transactions/{bankTransactionId}/reconcile";
                        urlPath = urlPath.replace("{".concat("bankTransactionId", "}"), encodeURIComponent(String(requestParameters['bankTransactionId'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.ReconcileBankTransactionRequestBodyDtoToJSON)(requestParameters['reconcileBankTransactionRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.BankTransactionEntityFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Reconcilia uma transação bancária com múltiplos lançamentos financeiros.
     */
    BankTransactionsApi.prototype.reconcileBankTransaction = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.reconcileBankTransactionRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Agenda uma operação em lote para transações bancárias.
     */
    BankTransactionsApi.prototype.scheduleBulkBankTransactionsOperationRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['bulkBankTransactionsJobRequestDto'] == null) {
                            throw new runtime.RequiredError('bulkBankTransactionsJobRequestDto', 'Required parameter "bulkBankTransactionsJobRequestDto" was null or undefined when calling scheduleBulkBankTransactionsOperation().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/external/bank-transactions/bulk-operations";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.BulkBankTransactionsJobRequestDtoToJSON)(requestParameters['bulkBankTransactionsJobRequestDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.BulkBankTransactionsJobRequestEntityFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Agenda uma operação em lote para transações bancárias.
     */
    BankTransactionsApi.prototype.scheduleBulkBankTransactionsOperation = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.scheduleBulkBankTransactionsOperationRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Verifica se a AI deve sugerir uma ação para uma transação bancária.
     */
    BankTransactionsApi.prototype.shouldAiSuggestActionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['shouldAiSuggestActionRequestBodyDto'] == null) {
                            throw new runtime.RequiredError('shouldAiSuggestActionRequestBodyDto', 'Required parameter "shouldAiSuggestActionRequestBodyDto" was null or undefined when calling shouldAiSuggestAction().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/internal/bank-transactions/should-ai-suggest-action";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.ShouldAiSuggestActionRequestBodyDtoToJSON)(requestParameters['shouldAiSuggestActionRequestBodyDto']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ShouldAiSuggestActionResponseDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Verifica se a AI deve sugerir uma ação para uma transação bancária.
     */
    BankTransactionsApi.prototype.shouldAiSuggestAction = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.shouldAiSuggestActionRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Busca todas as movimentações financeiras pelo sistema.
     */
    BankTransactionsApi.prototype.systemFindAllBankTransactionsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['ownerOrganizationId'] == null) {
                            throw new runtime.RequiredError('ownerOrganizationId', 'Required parameter "ownerOrganizationId" was null or undefined when calling systemFindAllBankTransactions().');
                        }
                        queryParameters = {};
                        if (requestParameters['ownerOrganizationId'] != null) {
                            queryParameters['ownerOrganizationId'] = requestParameters['ownerOrganizationId'];
                        }
                        if (requestParameters['populate'] != null) {
                            queryParameters['populate'] = requestParameters['populate'];
                        }
                        if (requestParameters['sortOrder'] != null) {
                            queryParameters['sortOrder'] = requestParameters['sortOrder'];
                        }
                        if (requestParameters['sortBy'] != null) {
                            queryParameters['sortBy'] = requestParameters['sortBy'];
                        }
                        if (requestParameters['ignored'] != null) {
                            queryParameters['ignored'] = requestParameters['ignored'];
                        }
                        if (requestParameters['origin'] != null) {
                            queryParameters['origin'] = requestParameters['origin'];
                        }
                        if (requestParameters['reconciled'] != null) {
                            queryParameters['reconciled'] = requestParameters['reconciled'];
                        }
                        if (requestParameters['type'] != null) {
                            queryParameters['type'] = requestParameters['type'];
                        }
                        if (requestParameters['dateTo'] != null) {
                            queryParameters['dateTo'] = requestParameters['dateTo'].toISOString();
                        }
                        if (requestParameters['dateFrom'] != null) {
                            queryParameters['dateFrom'] = requestParameters['dateFrom'].toISOString();
                        }
                        if (requestParameters['bankAccount'] != null) {
                            queryParameters['bankAccount'] = requestParameters['bankAccount'];
                        }
                        if (requestParameters['semanticSearchTermInBase64'] != null) {
                            queryParameters['semanticSearchTermInBase64'] = requestParameters['semanticSearchTermInBase64'];
                        }
                        if (requestParameters['textSearchTerm'] != null) {
                            queryParameters['textSearchTerm'] = requestParameters['textSearchTerm'];
                        }
                        if (requestParameters['pageSize'] != null) {
                            queryParameters['pageSize'] = requestParameters['pageSize'];
                        }
                        if (requestParameters['pageIndex'] != null) {
                            queryParameters['pageIndex'] = requestParameters['pageIndex'];
                        }
                        headerParameters = {};
                        urlPath = "/internal/bank-transactions";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.BankTransactionsPageDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Busca todas as movimentações financeiras pelo sistema.
     */
    BankTransactionsApi.prototype.systemFindAllBankTransactions = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.systemFindAllBankTransactionsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Busca uma movimentação financeira por ID.
     */
    BankTransactionsApi.prototype.systemFindBankTransactionByIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling systemFindBankTransactionById().');
                        }
                        queryParameters = {};
                        if (requestParameters['populate'] != null) {
                            queryParameters['populate'] = requestParameters['populate'];
                        }
                        headerParameters = {};
                        urlPath = "/internal/bank-transactions/{id}";
                        urlPath = urlPath.replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.BankTransactionEntityFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Busca uma movimentação financeira por ID.
     */
    BankTransactionsApi.prototype.systemFindBankTransactionById = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.systemFindBankTransactionByIdRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Desfaz a reconciliação de uma transação bancária.
     */
    BankTransactionsApi.prototype.unreconcileBankTransactionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['bankTransactionId'] == null) {
                            throw new runtime.RequiredError('bankTransactionId', 'Required parameter "bankTransactionId" was null or undefined when calling unreconcileBankTransaction().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/external/bank-transactions/{bankTransactionId}/unreconcile";
                        urlPath = urlPath.replace("{".concat("bankTransactionId", "}"), encodeURIComponent(String(requestParameters['bankTransactionId'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.BankTransactionEntityFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Desfaz a reconciliação de uma transação bancária.
     */
    BankTransactionsApi.prototype.unreconcileBankTransaction = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.unreconcileBankTransactionRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return BankTransactionsApi;
}(runtime.BaseAPI));
exports.BankTransactionsApi = BankTransactionsApi;
/**
 * @export
 */
exports.FindAllBankTransactionsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.FindAllBankTransactionsSortByEnum = {
    Date: 'date',
    AmountInBrl: 'amountInBrl',
    Description: 'description',
    CreatedAt: 'createdAt',
    Reconciled: 'reconciled'
};
/**
 * @export
 */
exports.FindAllBankTransactionsOriginEnum = {
    AutomaticIntegration: 'AUTOMATIC_INTEGRATION',
    ManualOfxImport: 'MANUAL_OFX_IMPORT'
};
/**
 * @export
 */
exports.FindAllBankTransactionsTypeEnum = {
    Debit: 'DEBIT',
    Credit: 'CREDIT'
};
/**
 * @export
 */
exports.FindAllOfxImportJobRequestsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.FindAllOfxImportJobRequestsSortByEnum = {
    CreatedAt: 'createdAt',
    FileName: 'fileName',
    BankAccountName: 'bankAccountName'
};
/**
 * @export
 */
exports.SystemFindAllBankTransactionsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.SystemFindAllBankTransactionsSortByEnum = {
    Date: 'date',
    AmountInBrl: 'amountInBrl',
    Description: 'description',
    CreatedAt: 'createdAt',
    Reconciled: 'reconciled'
};
/**
 * @export
 */
exports.SystemFindAllBankTransactionsOriginEnum = {
    AutomaticIntegration: 'AUTOMATIC_INTEGRATION',
    ManualOfxImport: 'MANUAL_OFX_IMPORT'
};
/**
 * @export
 */
exports.SystemFindAllBankTransactionsTypeEnum = {
    Debit: 'DEBIT',
    Credit: 'CREDIT'
};
